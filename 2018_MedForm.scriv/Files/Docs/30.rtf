{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0   *Background:* Ontologies are considered a means to represent the semantics of a software agent. Semantic reconciliation, and the resulting ontology alignment, has shown instrumental for achieving semantic interoperability (sIOP) between software agents. An ontology alignment expresses inter-ontological concept correspondences, which basically denote set relationships to hold between a pair of concepts, e.g., *subset*, *superset*, *overlap*, and more. Semantic mediation results in *transcriptions*: replacing a native term from one agent for a native term from the other agent. Essentially, such replacement implies semantic equivalence to hold between the two concepts, which can be in contrast with the specified inter-ontological concept correspondence and, hence, their semantic relationship. }
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0   *Motivation:* Without solving this semantic discrepancy between the alignment correspondences that are *specified*, e.g., subset, superset, disjointness, and the transcription that is *applied*, i.e., equivalence, alignment-based mediation will often fail to achieve its purpose, viz. translating concepts between ontologies without introducing phantom semantics. The implementation of a generic transcription engine that adheres to the correspondences as specified by the alignment, would be key to an automated sIOP bridge between collaborating agents.  }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0   *Objective:* First, to investigate the contexts under which the applied transcription, despite its discrepancy with the intended correspondence, *does* represent a faithful semantic transcription between software agents. Second, to investigate how term rewriting can be applied as mathematical footing for such generic semantic transcription capability.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0   *Method:* We consider contexts that emerge from the intra-ontological relations that exist with (i) the source concept(s) and (ii) the aligned target concept(s), and (iii) the specified inter-ontological correspondence between these concepts. For each context, we investigate whether the suggested target concept(s) represents a faithful semantic transcription, or not. On formulating these contexts in formal logics, they collectively describe the foundation for a faithful semantic transcription model that is generic with respect to the applied pair of ontologies and their inter-ontological alignment. We then investigate the applicability of a conditional term rewriting system as implementation for a generic semantic transcription engine, addressing its termination, normalisation, confluence and convergence properties.  }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0   *Results & Consequences:* Independently from their underlying syntax, and irrespective the case-specific ontologies and alignments, our method provides the most accurate data transcription possible given the specified alignment. In this way the semantic difference between the specified correspondence relation and the implemented equivalence relation can be overcome, and data can be transcribed and exchanged between software agents without introducing phantom semantics. Thus sIOP can now be *specified* by inter-ontological alignments, as opposed to *implemented* by specific data wrappers case-by-case, providing for an important improvement in software flexibility, consistency and reuse of data, and a significant reduction in time-to-market. Being agnostic on the particular ontologies and their alignment, the transcription engine with its convergent rewriting property provides for a strong mathematical foundation towards infrastructural semantic standards and services, such that sIOP can be achieved by specification as opposed to implementation.}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}