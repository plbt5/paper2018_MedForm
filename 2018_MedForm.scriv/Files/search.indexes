<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="3">
            <Title>meta-data</Title>
            <Synopsis>Usage: 

The meta-data is formatted and used as YAML-block. This results in variables that can be used by the text processor, i.e., LaTeX, provided that you add code to the .tex template frits processing. The YAML-block must be included as the very first part of the LaTeX source document (or as a separate side-document that is specified as such in the *.tex template). Scrivener can produce a YAML-block in two ways: either as introducing it to its comiler as the first document in the set, or by adding metadata variables in the configuration to the compile action. 

I'm not sure that a combination of both appraches will work, except, possibly, by compling this meta-data document into a separate side document and not taking it into consideration anymore when compiling the Draft (Include in Compile: off). Then, define your metadata variables and take them into account during the Draft compile.</Synopsis>
            <Text>---
title:  'Semantic medation: from alignment relations to data transcriptions'  
subtitle:   
author:  
- name: Paul Brandt  
  affiliation: Eindhoven University of Technology; Netherlands Organization of Applied Scientific Research TNO, Den Haag, The Netherlands   
- name: Marten van Sinderen  
  affiliation: University of Twente, Enschede, The Netherlands  
- name: Twan Basten  
  affiliation: Eindhoven University of Technology, Eindhoven, The Netherlands 
version:   
category:   
ack: This work was supported by TNO through the MSoBD program.    
tags: semantic interoperability, semantic mediation, ontology alignment, term rewriting, cTRS, data transcription   
bibliography: src/bib/CitedByMe-2018_MedForm.bib  
csl: templates/my-basic-reference-style.csl  
abstract: |  
   
    *Background/Problem:* Ontologies are considered a means to represent the semantics of a software agent. Semantic reconciliation, and the resulting ontology alignment, has shown instrumental for achieving semantic interoperability (sIOP) between software agents. An ontology alignment expresses inter-ontological concept correspondences, which basically denote set relationships to hold between a pair of concepts, e.g., *subset*, *superset*, *overlap*, and more. This is in clear contrast with semantic mediation which, by transcribing the data expressed in the native language of one agent into the native language of the other agent, essentially implies an equivalence relation to hold between aligned concepts. 
 
    *Motivation:* Without solving this semantic discrepancy between the *intended* alignment correspondences that are specified, e.g., subset, superset, disjointness, and the correspondence that results from the applied transcription, viz. equivalence, alignment based mediation will always fail to achieve its purpose, that is, translating concepts between ontologies without introducing phantom semantics. The implementation of a generic mediation component that adheres to the correspondences as intended by the alignment, represents the keystone to the sIOP bridge between collaborating agents.  

    *Objective:* We present a mathematical foundation for a faithful semantic mediation that is generic with respect to the applied pair of ontologies and their inter-ontological alignment. We furthermore show how a generic mediator can be efficiently implemented as conditional term rewriting system.  

    *Results &amp; Consequences:* Independently from their underlying syntax, and irrespective the case-specific ontologies and alignments, data can be transcribed and exchanged between software agents without introducing phantom semantics. Thus sIOP can now be *specified* by inter-ontological alignments, as opposed to *implemented* by specific data wrappers case-by-case, providing for a huge improvement in flexibility, consistency and reuse of data, and a significant reduction in time-to-market. The generic characteristic of the mediator will allow to engineer infrastructural semantic standards and services to achieve sIOP.


...</Text>
        </Document>
        <Document ID="4">
            <Title>Introduction</Title>
            <Synopsis>1 page
100 readers

\begin{enumerate}
 \item Describe the Problem.
 \begin{itemize}
 \item not formal but an intuition 
 \item not everything but 
 \item .. hard enough to be interesting, and
 \item .. simple enough to be solvable
 \end{itemize}
 \item State you claims
 \begin{itemize}
 \item as bullit list with 
 \item forward references to sections where you substantiate them.
 \item Claims should be described such that you can fail their deliverance: &quot;Gosh, if they really can, exciting, I must read on&quot;
 \item Contributions are the properties of the solution.
 \end{itemize}
\end{enumerate}

This list *drives* the paper

\end{synopsis}</Synopsis>
            <Text>Assume two collaborating software agents, exchanging data about their common interest. Each agent addresses a part of reality, here denoted the agent’s application domain. Collaboration implies that the agents’ application domains overlap. In terms of formal semantics, an application domain is abstracted into a conceptualisation as a set-based Domain of Interpretation (DoI), denoted \concept{D}. Furthermore, a conceptualisation is represented in tokens which, together, form an ontology, denoted \ont{O}. Finally, an interpretation function $\intn$ exists from the ontology to the conceptualisation. We assume that each agent decides on its own conceptualisation and its own ontological representation, the latter being built from a unique alphabet $\Sigma$. For example, consider ...

Since each agent decides on its own conceptualisation, two DoI’s with two unique ontologies emerge: $\intn: \ont{O} \to \concept{D}$, and $\intn’: \ont{O}’ \to \concept{D}’$, where $\Sigma_{\ont{O}} \cap \Sigma_{\ont{O}’} = \varnothing$^[Even worse, it can be the case that both ontologies share a particular token which refer to different concepts in each conceptualisation.] whereas, since the DoI’s overlap, $\concept{D} \cap \concept{D}’ \neq \varnothing$. We assume the existence of (inter-ontological) alignment correspondences that are allowed between source and target ontological concepts. We make no assumptions on how the alignment correspondences come into existence but we do assume their semantic validity. Now consider that a transcription essentially implements a replacement of terms. From a semantic perspective term replacement enforces an equivalence to hold between both terms, which is in clear contrast with the prescribed correspondence relations (except for an equivalence correspondence). Consequently, the result of the transcription will induce a difference between how it is actually being interpreted and how it was intended to be interpreted according to its correspondence relation. Whether this difference actually results in invalid semantics depends on how the domain of interest have been conceptualised by both agents, and the correspondence relation that is prescribed between them. With invalid semantics we refer to a valuation of a theory that contradicts the state of affairs in the domain of interest. Invalid semantics that are induced by the transcription will be denoted as phantom semantics. Note that due to the open world assumption this includes unfaithful valuations that remain open because conclusive data (or source data for their derivation) have vaporised, and vice versa, those that became closed because definitive data (or source data for their derivation) have transpired. In short, phantom semantics are semantics that are transcription-induced and contradict the state of affairs in the domain of interest. 

Our objective is to facilitate for any pair of collaborating agents a generic semantic mediation: a syntactic replacement between theories from two distinct alphabets, which does not induce phantom semantics, is always terminating, and remains independent on the order with which the terms are replaced.

The main idea of the paper is to identify, for all (i) logical contexts that originate from the source and target ontological concepts, (ii) including their (intra-ontological) relations, and (iii) (inter-ontological) alignment correspondences that are allowed between source and target ontological concepts, the most accurate valid transcription possible or $\token{NULL}$ if none is present. We call aspects (i)-(iii) the transcription contexts, and these are introduced as constraints for an abstract rewriting system, resulting in a conditional term rewriting system (cTRS) as the core engine for a semantic mediator. Our contributions to the semantic mediation process are then:

1. An inductive model of the transcription context, describing any logical context that might occur between collaborating agents, in terms of classes, relationships and correspondences (\cref{an-inductive-transcription-model});
1. A set of valid transcriptions for each transcription context that has been investigated and resolved. Due to space limitations we only present a few examples here -- the full set of valid transcriptions are available at [some web address | a “data” set] (\cref{valid-transcriptions});
1. A mathematical specification of a mediator, founded on a conditional term rewriting system (\cref{a-ctrs-as-mediator});
1. An investigation into the confluence property of the inductive model, to assure that the mediator is properly terminating (\cref{the-confluence-property-of-the-mediator});
1. (Finally, an evaluation of the mediator by providing an implementation that is based on a generic rewriting logic framework, the Maude 2.0 System [@Clavel2003a], (\cref{mediator validation})). 

Before turning to the first of these sections, we will introduce some terminology, as follows.

A correspondence denotes a single particular inter-ontological relation, denoted as $\mu = \tuple{ e, e’, \theta }$, with $\theta \in \Theta$ specifying the correspondence relation that holds between source concept $\token{e} \in \ont{O}$, denoted the transcriptum, and the target concept $\token{e’} \in \ont{O}’$, denoted the transcriptum. We consider $\Theta \; = \; \{\equiv, \sqsubset, \sqsupset, \disj, \overlap \}$, denoting semantic equivalence, subsumption of, subsumes, disjointness, and overlap, respectively. The correspondence is prescribed and assumed to represent a semantically valid relation between both concepts. We denote an atomic correspondence a correspondence where $e$ and $e’$ are atomic elements, i.e., a single concept without considering any relation with another concept from its own ontology. The concepts in the ontologies are of certain type, denoted $\varepsilon$, and is considered one of the following:
\begin{equation}
\varepsilon \; ::= \; \token{C} \; | \; \token{R} \; | \; \token{P} \; | \; \token{\iota}
\end{equation}
where:

* \token{C} denotes the Class concept type, the interpretation of which results in a set $\concept{C} \subseteq \concept{D}$ of individuals: $\forall \token{c} \lhd \token{C}: \intn(\token{c}) \subseteq \concept{C}$, where $\lhd$ denotes the type-of relation between an individual concept (left-hand side, here a particular class) and its type $\varepsilon$ (right-hand side, here a Class type);
* \token{R}, \token{P} and \token{\iota} denote the Relation concept type, the Property concept type, and the Instance concept type, respectively, with their own interpretation in \concept{D}. For the sake of simplicity, we will here limit ourselves to transcribing a Class concept, only. 

In the remainder of this paper, concepts are thus atomic classes from an ontology, whereas complex concepts are a logical combination of classes.

</Text>
            <Comments>brandtp, 12-11-2018 Voorbeeld toevoegen
brandtp, 9/17/2018 Alleen als ik daar tijdruimte voor vinden kan.</Comments>
        </Document>
        <Document ID="30">
            <Title>Abstract</Title>
            <Text>    *Background/Problem:* Ontologies are considered a means to represent the semantics of a software agent. Semantic reconciliation, and the resulting ontology alignment, has shown instrumental for achieving semantic interoperability (sIOP) between software agents. An ontology alignment expresses inter-ontological concept correspondences, which basically denote set relationships to hold between a pair of concepts, e.g., *subset*, *superset*, *overlap*, and more. This is in clear contrast with semantic mediation which, by transcribing the data expressed in the native language of one agent into the native language of the other agent, essentially implies an equivalence relation to hold between aligned concepts. 
 
    *Motivation:* Without solving this semantic discrepancy between the *intended* alignment correspondences that are specified, e.g., subset, superset, disjointness, and the correspondence that results from the applied transcription, viz. equivalence, alignment based mediation will always fail to achieve its purpose, that is, translating concepts between ontologies without introducing phantom semantics. The implementation of a generic mediation component that adheres to the correspondences as intended by the alignment, represents the keystone to the sIOP bridge between collaborating agents.  

    *Objective:* We present a mathematical foundation for a faithful semantic mediation that is generic with respect to the applied pair of ontologies and their inter-ontological alignment. We furthermore show how a generic mediator can be efficiently implemented as conditional term rewriting system.  

    *Results &amp; Consequences:* Independently from their underlying syntax, and irrespective the case-specific ontologies and alignments, data can be transcribed and exchanged between software agents without introducing phantom semantics. Thus sIOP can now be *specified* by inter-ontological alignments, as opposed to *implemented* by specific data wrappers case-by-case, providing for a huge improvement in flexibility, consistency and reuse of data, and a significant reduction in time-to-market. The generic characteristic of the mediator will allow to engineer infrastructural semantic standards and services to achieve sIOP.
</Text>
            <Comments>brandtp, 9/17/2018 The term “fake” might be clearer?</Comments>
        </Document>
        <Document ID="31">
            <Title>Readme</Title>
            <Synopsis>From “How to write a research paper: Seven simple suggestions” by Simon P. Jones

See the youtube recording of his colloquium: https://www.youtube.com/watch?v=1AYxMbYZQ1Y

or his slides here: https://www.cis.upenn.edu/~sweirich/icfp-plmw15/slides/peyton-jones.pdf</Synopsis>
            <Text>The core purpose of your paper is: Convey a reusable idea, and NOT something new (This is Design Science, not natural science, remember!). Infect the mind of your reader: no matter where they stop reading, they should be able to spread your idea as a virus.

Suggestion #1: Writing your paper *IS* your research

Idea --&gt; start writing --&gt; use paper to enforce the relevant parts of the research.

Research = Communicating, whiteboarding
writing  = doing research = how you develop your idea

Suggestion #2: Identify your idea:
An idea is:

* a valuable starting point, always!
* a re-usable insight
* useful to the reader
* one “ping” 

Suggestion #3: Tell a Story, the narrative of which is:
- Here is a problem
- It’s an interesting problem (motivation)
- It’s an unsolved problem (why is it unsolved?)
- Here is my idea (the payload of the paper)
- My idea works (details and data)
- Here is how it compares to other peoples approaches.

As a result, wherever readers stop reading you want to have given them a take-away already. You’ve infected them such that they can speak about it.

Your text should support the reader. DO NOT LEAVE YOUR USERS TO GUESS:

-------------------------------------------------------------------------------------------------
   NOT                              BUT instead:
  
----------------------------------- -------------------------------------------------------------
“We describe the system”            “We give syntax and semantics of language that supports A ...
                                     (Sect. A). Its feature are ...”

“We study the properties”           “We proof that property X is sound, decidable, ...”

“We have evaluated the system in    “We have built X and used it to implement Y (Sect. B) and
 practice”                           the positive effects are... ”

-------------------------------------------------------------------------------------------------

Be 100% explicit: “The main idea of the paper is ....”</Text>
        </Document>
        <Document ID="32">
            <Title>An inductive transcription model</Title>
            <Synopsis>1 page
10 readers

\end{synopsis}</Synopsis>
            <Text>Transcribing an atomic correspondence $\mu = \tuple{ c, c’, \theta }$ is simple: Since no other concepts are present in the atomic context of the correspondence, the transcribendum $c’$ represents the only potential transcription result $t’$ for transcriptum $c$. This shows an important characteristic of a transcription: With no more information available, a transcription implies a binary choice: either transcribe transcriptum $c$ into the transcribendum $c’$, denoted as $c \vldtranscript{\theta} c’$, or not. This choice depends on whether phantom semantics are induced by the transcription. The result of this strategy is shown in \cref{tab:atomic-class-transcriptions}, where each column specifies the possible correspondence relation that applies. The table presents the transcription results $t’$ as either (i) the transcribendum, which, by absence of induced phantom semantics is necessarily valid, or (ii) no transcription, denoted by \ntsa, because the transcription into the transcribendum would induce phantom semantics.

\begin{table}[h]
  \centering
  \caption{Transcription results $t’$ for the atomic correspondences $\tuple{e, e’, \theta}$: atomic concept $e$ represents the transcriptum and is transcribed under relation $\theta$, taking into consideration that no other concepts are present. The value of the transcription result $t’$ is presented in the table. As indicated, we only address class concepts, resulting in a table with one single row only.}
  \label{tab:atomic-class-transcriptions}
  \begin{tabular}{cc@{\qquad}ccccc}
    \toprule
    \multicolumn{2}{c}{$e \vldtranscript{\theta} e’$} &amp; \multicolumn{5}{c}{Correspondence relation $\theta$} \\ \cmidrule{3-7}
     &amp;&amp; $\sqsubset$ 
      &amp; $\equiv$
      &amp; $\sqsupset$
      &amp; $\overlap$ 
      &amp; $\disj$ \\
     \multicolumn{2}{c}{Concept $e$}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sb.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Eq.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sp.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-nD.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Dj.png} \\ \cmidrule(r){1-2} \cmidrule{3-7}
      &amp; $c$     &amp; $c’$        &amp; $c’$     &amp; \ntsa     &amp; \ntsa     &amp; $\neg c’$  \\ \bottomrule
  \end{tabular}
\end{table}

In conclusion, \cref{tab:atomic-class-transcriptions} specifies valid class transcriptions for all atomic correspondences between atomic classes. Unfortunately, two out of five cases prohibit a transcription, a third is rather broad in its transcription, and last but not least, a concept seldom live alone in its ontology. We therefore introduce the local contexts of the transcriptum and transcribendum in their particular ontologies $\ont{O}$ and $\ont{O}’$. Together, we denote this as the transcription context that we define inductively as $\ctx_n = \pair{r, \theta_n, r', \ctx_{n-1}}$, with:

* $r, r’ \in \set{\sqsubset, \equiv, \sqsupset, \overlete, \overlinc, \displete, \disjoinc}$, representing a logical relationship between a class pair, with:
    * $r$ and $r’$ part of $\ont{O}$ and $\ont{O}’$, respectively, and 
    * $\displete, \disjoinc$ denote disjoint and complete, and disjoint and incomplete, whereas 
    * $\overlete, \overlinc$ denote not disjoint but complete and not disjoint and incomplete, respectively;
* $\theta_n \in \Theta$, the correspondence relation that is assumed to hold between classes $c_n \in \ont{O}$ and $c_n’ \in \ont{O}’$;
* $\ctx_{n-1} = \pair{r, \theta_{n-1}, r’, \ctx_{n-2}}$, viz. the transcription context at the previous induction level. 

We first consider the ontological relationships $r, r’ \in \set{\sqsubset, \equiv, \sqsupset}$. Then, the transcription context is fully described by $c_n, r, c_{n-1} \in \ont{O}$ and $c_n’, r’, c_{n-1’} \in \ont{O’}$. This model has been depicted in \cref{fig:gen-class-transc-models}(a). On considering $r, r’ \in \set{\overlete, \overlinc, \displete, \disjoinc}$, we conclude that the completeness part of the relations demands a subsuming class concept that can act as reference for it. This model has been depicted in \cref{fig:gen-class-transc-models}(b), where $r, r’ \in \set{\sqsubset, \equiv, \sqsupset}$ relate the reference concept $c_n$ with subclasses $c_{n-1}$ and $\hat{c}_{n-1}$ that bear an (in)completeness relation $\hat{r}$. 

![The class transcription models that support all seven ontological relations. $\theta_n$ denotes the correspondence relation that applies for the current context $\ctx_n = \pair{\hat{r}, \theta_n, \hat{r}', \ctx_{n-1}}$, and $\longmapsto$ denotes the valid transcription under context $\ctx_{n-1}$. Classes $c_n$ and $c_n'$ are implied by class relations $c_{n-1} \hat{r} \hat{c}_{n-1}$ and $c_{n-1}' \hat{r}' \hat{c}_{n-1}'$, respectively.][def:GenClassTranscModels]

Clearly, situation \ref{fig:gen-class-transc-models}(a) is a special case of situation \ref{fig:gen-class-transc-models}(b) since (b) morphs into (a) for $\hat{r} = \equiv$. As a result, we consider the generic case (b) only when investigating a transcription that involves $r \text{ or } r’ \in \set{\overlete, \overlinc, \displete, \disjoinc}$. 




&lt;!-- Page definitions --&gt;
[def:GenClassTranscModels]: src\images\GenClassTranscModels.png {#fig:gen-class-transc-models width=80%}</Text>
        </Document>
        <Document ID="33">
            <Title>Valid transcriptions</Title>
            <Synopsis>2 pages
10 readers

\end{synopsis}</Synopsis>
            <Text>The main demand for the mediation is to guarantee that it either produces a semantic valid transcription, or none when phantom semantics are induced. A semantic valid transcription is the result of two cooperating mechanisms:

1. Firstly, the transcription relies on transcription context $\ctx$ that is formed by:
    1. The specific context of the source entity $e$ in its source ontology $\ont{O}$;
    1. The specific context of the target entity $e’$ in its source ontology $\ont{O}’$;
    1. The correspondence $\mu = \tuple{ e, e’, \theta }$, with $\theta \in \Theta$ specifying the correspondence relation that holds between $e \in \ont{O}$ and $e’ \in \ont{O}’$. We consider $\Theta \; = \; \{\equiv, \sqsubset, \sqsupset, \disj, \overlap \}$, denoting semantic equivalence, subsumption of, subsumes, disjointness, and overlap, respectively. The correspondence is prescribed and assumed to represent a semantic valid correspondence relation between both concepts;
1. Secondly, the transcriptum $e’$ represents a new theory that is added to $\ont{O}’$. This theory will be evaluated by use of the target’s agent interpretation function $\intn’: \ont{O}’ \to \concept{D}’$. The semantic validity of the transcription, therefore, is dependent on whether $\intn(e)$ addresses the same individuals in the DoI as $\intn’(e’)$. 

Since the above transcription context provides for all potential logical circumstances that can occur, we can resolve the question whether or not a transcription is valid generically and independently from the particular ontologies and alignments that are applied by the software agents. The question at hand is whether $\intn(e) \supseteq \intn’(e’)$ holds or not. In case of the former, the transcription is allowed and the mediation will return the transcriptum $e’$; in case of the latter, the mediation will return $\token{NULL}$. Our task is then to traverse the multidimensional space that is spanned by the transcription context, and for each point in that space consider whether $\intn(e) \supseteq \intn’(e’)$ holds. Due to the inductive characteristic of transcription context, we formulate the question also inductively, as follows:

\begin{mmdef}[Semantic validity of a transcription]\label{def:valid-transcription}
Assume transcribendum $e_n \in \ont{O}}, transcriptum $e_n’ \in \ont{O}’}, correspondence $\mu_n = \tuple{ e_n, e_n’, \theta_n }$, transcription context $\ctx_n = \pair{r, \theta_n, r', \ctx_{n-1}}$ and a semantic valid transcription at one lower level, $\vldtranscript{\theta_{n-1}}$. We denote the transcription result as $t_n’$, and express it inductively as a logical combination of $e_n’$, $e_{n-1}’$ and $\hat{e}_{n-1}’$. Then, we call the transcription \emph{semantically valid} iff:\[
\intn’(t_n’) \subseteq \intn(e_n)
\]
\end{mmdef}

In other words, a transcription is valid if all individuals that potentially belong to the set represented by $e_n$ also belong to the set that can be represented by some logical combination of $e_n’$, $e{n-1}’$ and $\hat{e}_{n-1}’$.

</Text>
        </Document>
        <Document ID="34">
            <Title>A cTRS as mediator</Title>
            <Synopsis>5 pages
3 readers

\end{synopsis}</Synopsis>
        </Document>
        <Document ID="35">
            <Title>Related work</Title>
            <Synopsis>1-2 pages
10 readers

\end{synopsis}</Synopsis>
        </Document>
        <Document ID="36">
            <Title>Conclusions and further work</Title>
            <Synopsis>1/2 page

\end{synopsis}</Synopsis>
        </Document>
        <Document ID="37">
            <Title>MMD cheat sheet</Title>
            <Text>Source: [pandoc’s markdown](http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown)

# Chapter levels, this is level 1 # {#identifier .class .class key=value key=value}

I can refer to [the very first chapter](#foo) or using the [autogenerated chapter id](#chapter-level-2).

The {attributes} should be positioned OUTSIDE the hash-enclosed chapter title.

## Chapter level 2 {#foo -}

The {-} attribute indicates an unnumbered header.

# A level-one header with a [link](/url) and *emphasis*</Text>
        </Document>
        <Document ID="38">
            <Title>Text and Formats</Title>
            <Text>Letter format

**Bold face**

*Italic face*

`literals`

Text with ^superscript^ and ~subscript~

Text with ~~strike out~~

Code block:
~~~python // ← this python thingy is optional, but might result in syntax highlighting
define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
~~~

Text
Create lorum ipsum dummy text with 
\usepackage{blindtext}
\blindtext

</Text>
        </Document>
        <Document ID="39">
            <Title>Proprietary encodings</Title>
            <Text>I have implemented a few proprietary, quasi-MMD codes that are translated by Scrivener to particular Latex codes.

Quasi-MMD codes
Latex code
Implementation
[|text]
\mywordbox{text}
The text is formatted with a small box:
\newcommand{\mywordbox}[1]{%
  {% open a group for a local setting
   \setlength{\fboxsep}{-2\fboxrule}% the rule will be inside the box boundary
   \hspace{1pt}\fcolorbox{gray!20}{blue!5}{\hspace{2pt}\strut\textbf{#1}\hspace{2pt}}\hspace{1pt} % print the box, with some padding at the left and right
  }% close the group
}
[*text]
\index{text}text
With multiple passes of LaTeX, pdfLaTeX, LuaTeX, etc., text will become an entry in the index





</Text>
        </Document>
        <Document ID="40">
            <Title>Authors</Title>
            <Text>Choose between two YAML variants that can be processed by the latex template:

Variant 1: One sub name/affiliation for each author, as

author:  
- name: Paul Brandt  
  affiliation: Eindhoven University of Technology; Netherlands Organization of Applied Scientific Research TNO, Den Haag, The Netherlands   
- name: Twan Basten  
  affiliation: Eindhoven University of Technology, Eindhoven, The Netherlands 

Variant 2: One author only, as

</Text>
        </Document>
        <Document ID="41">
            <Title>Footnotes, Images and Links</Title>
            <Text>Footnotes

By anchor 

A footnote is a kind of anchor [^1] that refers to the actual text defined at the bottom of the page (or elsewhere in the text), like this:

[^1]: the text of the footnote that the anchor refers to. The anchor id can be anything, as long as the carrot symbol precedes the id, e.g., [^this_is_a_very_long_footnote_id]

Inline without anchor

This inline footnote ^[the text of the footnote is included at the position of the anchor] is defined without anchor. Like the anchored footnote, the position of the placement of the footnote in the document is defined by meta-properties.

Image inclusion
Define the image inline as ![image caption](path\to\image.png){#image-ref-label .class width=30 height=20px}

Or, use a short link in the text to indicate its position, such as:
![image caption][image-def-label]
And at the bottom of the page, include its definition with attributes. No matter how \cref{image-ref-label} is defined, you can always refer to its (type and) number with \(c)ref.

[image-def-label]: path\to\image.png &quot;optional title&quot; {#image-ref-label .class width=30 key2=&quot;val 2&quot;}

Internal links
An explicit link has two parts, the link itself and the link definition, which may occur elsewhere in the document (either before or after the link).

* The link itself consists of link text in square brackets, followed by a label in square brackets. (There can be space between the two.): [text that will be given a click-able link] [the-label-of-this-link-source]
* The link definition consists of the bracketed label, followed by a colon and a space, followed by the URL, and optionally (after a space) a link title either in quotes or in parentheses, e.g., [my website]: http://foo.bar.baz (the link title)
* Use the automatically generated identifier (Extension: auto_identifiers)
	* See the [text about this link](#link-as-title-of-the-section).
	* Or, implicitly, see the [text about this link] as placeholder and below its definition

[text about this link](#link-as-title-of-the-section)

References to chapter numbers and images
This is not possible in MMD, currently. Some initiatives are being considered, though (REF). One way to solve this is to use latex code, as follows:

Blahbllah, see \cref{the-section-id-as-referenced-by-MMD}. This will produce: “Blahbllah, see Section 2.1”

Note the missing #-sign in the reference; the #-sign is an MMD-construct, not a latex construct. Furthermore, the cref (clever reference) package does not require the category to be named in the text (Section, Example, Chapter, Theorem, etc.), it will insert the correct one itself.

This works for other forms of references as well, i.e., anything that can be given a label, by the following label definition: \label{my-label-name}. Again, note the missing #-sign in the label definition.

External links
  Blahblah blah blah blah. See [my website][], or [my website].

[my website]: http://foo.bar.baz

footnotes (extension: footnotes)
Here’s a footnote reference [^1] and another.[^longnote]

[^1]: Here is the footnote.
[^longnote]: Here's one with multiple blocks.
    Subsequent paragraphs are indented to show that they
belong to the previous footnote.

        { some.code }

    The whole paragraph can be indented, or just the first
    line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won't be part of the note, because it
isn't indented.</Text>
        </Document>
        <Document ID="42">
            <Title>References</Title>
            <Text>References are based on bibtex. To specify a bibliography file use *--bibliography &lt;myCitations.bib&gt;* at the command line, or, the YAML metadata field *bibliography*.

Citations go inside square brackets and are separated by semicolons (note that NO SPACES surround the semicolon). Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. Examples:

* Blah blah [see @doe99, pp. 33-35;also @smith04, chap. 1].
* Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].
* Blah blah [@smith04; @doe99].

The citation identifier may contain special characters.</Text>
        </Document>
        <Document ID="43">
            <Title>Bullits and numbered lists</Title>
            <Text>Bullits and numbered lists

Bullit lists

The bullets need not be flush with the left margin; they may be indented one, two, or three spaces. The bullet must be followed by whitespace, and preceded by a blank line. A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented four spaces or a tab. 

  * Fruits

    Continued paragraph belonging to Fruits.

List items may include other lists. In this case the preceding blank line is optional. The nested list must be indented four spaces or one tab:

* fruits
    + apples
        - macintosh
        - red delicious

Number lists

Ordered lists work just like bulleted lists, except that the items begin with enumerators (numbers themselves are ignored) rather than bullets:
2. First item
1. Second item
21. Third item

Autonumbers

(@one)  My first example will be numbered (1).
(@)  My second example will be numbered (2).

Explanation of example (@one).

(@)  My third example will be numbered (3).</Text>
        </Document>
        <Document ID="44">
            <Title>Tables</Title>
            <Text>Tables
Pipe tables
Pipe tables look like this:

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|1|1|1|1

  : Demonstration of pipe table syntax {#anchor-for-its-reference}.

The syntax is the same as in PHP markdown extra. The beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header can be omitted, but the horizontal line must still be included, as it defines column alignments. Since the pipes indicate column boundaries, columns need not be vertically aligned, as the last row indicates.
The cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines, nor wrap text within cells.

Grid tables look like this:
: Sample grid table.

+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+
The row of =’s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). Alignments are not supported, nor are cells that span multiple columns or rows. 

Multiline tables
Multiline tables are also possible, and allow headers and table rows to span multiple lines of text (but cells that span multiple columns or rows of the table are not supported). Here is an example:
-------------------------------------------------------------
 Centered   Default           Right Left
  Header    Aligned         Aligned Aligned
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
-------------------------------------------------------------

   : Here's the caption. It, too, may span
multiple lines.

These work like simple tables, but with the following differences:
They must begin with a row of dashes, before the header text (unless the headers are omitted).
They must end with a row of dashes, then a blank line.
The rows must be separated by blank lines.
In multiline tables, the table parser pays attention to the widths of the columns, and the writers try to reproduce these relative widths in the output. So, if you find that one of the columns is too narrow in the output, try widening it in the markdown source.
Headers may be omitted in multiline tables as well as simple tables</Text>
        </Document>
        <Document ID="45">
            <Title>Glossary</Title>
            <Text>Unfortunately, there is as of yet no representation of definition of glossary terms. One definition has been suggested:
[^glossaryfootnote]: glossary: term (optional sort key)
    The actual definition belongs on a new line, and can continue on
    just as other footnotes.
This would allow for footnotes to be specified as glossary terms. The *term* is the item that belongs in the glossary. The *sort key* is optional, and is used to specify that the term should appear somewhere else in the glossary (which is sorted in alphabetical order).</Text>
        </Document>
        <Document ID="46">
            <Title>Math</Title>
            <Text>Mathematical formulae are not possible in MMD. To that end, apply LateX rules and include appropriate libraries in the latex template, see also https://en.wikibooks.org/wiki/LaTeX/Mathematics. The suggestions below are not MMD cheats but LateX cheats instead.

\usepackage{mathtools}

Mathmode: 

* Inline: TEXT encompassed with \( ... \) of $ ... $
* Paragraph: wat was dit ook alweer?

If you are typing text normally, you are said to be in text mode, but while you are typing within one of those mathematical environments, you are said to be in math mode that has some differences compared to the text mode:
Most spaces and line breaks do not have any significance, as all spaces are either derived logically from the mathematical expressions, or have to be specified with special commands such as \quad
Empty lines are not allowed. Only one paragraph per formula.
Each letter is considered to be the name of a variable and will be typeset as such. If you want to typeset normal text within a formula (normal upright font and normal spacing) then you have to enter the text using dedicated commands.
The caret (^) character is used to raise something (superscript), and the underscore (_) is for lowering (subscript). If more than one expression is raised or lowered, they should be grouped using curly braces ({ and }).


$\mathpzc{ALC}$
</Text>
        </Document>
        <Document ID="47">
            <Title>Definitions, proofs etc</Title>
            <Text>Definitions, Theorems, Proofs and more are not possible in MMD. To that end, apply LateX rules and include appropriate libraries in the latex template, see also https://en.wikibooks.org/wiki/LaTeX/Theorems. The suggestions below are therefore not MMD cheats but LateX cheats instead.

\begin{mmdef}[definitie onderwerp]\label{def:my-unique-reference}
Here is a new definition
\end{mmdef}

\begin{mmexmp}\label{ex:my-unique-reference}
Here is a new example
\end{mmexmp}

\begin{mmdp}[My first design principle]
\end{mmdp}

\begin{mmprf}
Write your proof
\end{mmprf}

\begin{mmthrq}\label{:rq:my-unique-reference}
Here is a new research question
\end{mmthrq}


## KNOWN BUG ##

Unfortunately, the MMD format, e.g., MMD-lists, does not work within a Theorem environment, and we need to make use of Latex command. For instance, include a list in the Definition envionment as follows:
\begin{mmdef}
My definition includes the following items:
 \begin{itemize}[label={-}]
   \item here is the first item
   \item Here is the second item
 \end{itemize}
\end{mmdef}

Note that the indentation is only for maintaining an overview of the number of \begin{}-\end{} pairs 

## LaTeX header definition ##
These definitions/proofs/etc. are based on a package for theorems, i.e., amsthm. Before the above definitions/proofs/etc can work, we need to import and configure the Theorem package. This requires a LaTeX header definition, as follows:
\usepackage{amsthm}

\newtheorem{mmexmp}{Example}[section]
\newtheorem{mmthrq}{Research Question}
\newtheorem{mmdef}{Definition}</Text>
        </Document>
        <Document ID="48">
            <Title>Proper English </Title>
            <Text>Some often made mistakes…
</Text>
        </Document>
        <Document ID="49">
            <Title>-ise/ -ize</Title>
            <Text>In British English, most words ending in -ise can also be spelt with ize. Exceptions are words in two syllables, e.g., surprise, and advertise and analyse. Therefore, in BE play safe and consistently use -ise. In American English, only -ize is used. 

* In Americal English, final -l is not usually doubled in an unstressed syllable, whilst in British English it is, e.g., US traveler, leveling, becomes GB traveller, levelling; hence, modelling
* Some endings in -ter in AE become -tre in BE: US theater, center become GB theatre, centre.
* Some endings in -or in AE become -our in BE: US labor, color become GB labour, colour.
* Some endings in -og in AE become -ogue in BE: US catalog, analog become GB catalogue, analogue.
* Some endings in -ense in AE become -ence in BE: US defense, offense, pretense become BE defence, offence, pretence. However, US practice becomes GB practise.

&lt;!-- einde opsomming --&gt;</Text>
        </Document>
        <Document ID="50">
            <Title>That versus which</Title>
            <Text>
* “that/who” (no comma) is used to single out (restrict) from many possibilities the one and only that is referred to: 
    * The painting that was hanging in the foyer was stolen --&gt; from all paintings in the house, one hung in the foyer and that particular one was stolen;
    * The suspect who has red hair committed the crime --&gt; from all suspects indeed the perpetrator was the only red haired person;
* “, which /, who” (with comma) is used to add incidental information (unrestricted) about the subject that is referred to, however, not to single it out:
    * The painting, which was hanging in the foyer, was stolen --&gt; many paintings were hanging in the foyer, and the one that was stolen was one of them;
    * The suspect, who owns a red car, committed the crime --&gt; although the perpetrator owns a red car, this does not necessarily imply that from all suspects the perpetrator and only the perpetrator owns a red car. Any or all of the suspects might own a red car.
* hence, “who” refers to a restrictive clause while “, who” refers to a non-restrictive (informative) clause.

&lt;!-- einde opsomming --&gt;</Text>
        </Document>
        <Document ID="51">
            <Title>Plural versus possessive -s</Title>
            <Text>Source: https://umanitoba.ca/student/academiclearning/media/Plural_vs_Possessive_S_NEW.pdf

**Plural**

* The most common way to pluralize a noun is to simply add an -s at the end:
    Hamburger (singular) becomes hamburgers (plural)\\
    College (singular) becomes colleges (plural)
* Nouns that end in a vowel followed by a -y take an -s in the plural:
    Monkey (singular) becomes monkeys (plural) \\
    Nouns that end in a consonant followed by a -y undergo a more dramatic change. First, the -y changes 
to an -ie and then an -s is added:
    Baby (singular) becomes babies (plural)
* Nouns that end in a sibilant (s, x, z, ch, sh) pluralize by adding an -es:
    Church (singular) becomes churches (plural)
* Nouns that end in an -is are replaced by -es in the plural:
    Thesis (singular) becomes theses (plural)
* Count nouns that end in -f pluralize by changing to a –ves:
    Calf (singular) becomes calves (plural) 

**Possessive**

* The possessive -s is used to show belonging: \\
    Kevin’s coat
* Add an ’s to the plural forms of nouns that do not end in -s: \\
    The children’s bedroom
* Add an ’ to the plural forms of nouns that end in -s: \\
    The addicts’ support group \\ 
    The seven Von Trapp kids’ singing nanny
* Apostrophes should not be used with possessive pronouns (my, yours, hers, his, its, ours). These 
Pronouns do not need apostrophes because they inherently show possession.
* It’s is a contraction for “it is” and its is the possessive pronoun that signifies “belonging to it”. 

&lt;!-- einde opsomming --&gt;</Text>
        </Document>
        <Document ID="52">
            <Title>References {-}</Title>
        </Document>
        <Document ID="53">
            <Title>The confluence property of the mediator</Title>
            <Synopsis>Confluence draagt ervoor zorg dat de cTRS termineert, onafhankelijk van het pad dat de rewriting uiteindelijk volgt. Confluence is voor transcripties eenvoudig te bewijzen:

\begin{itemize}
\item Op het laagste inductienivo, het atomische nivo, bestaat er óf wel, óf geen vertaling. Dat termineert dus altijd
\item op inductienivo n zijn voor alle contexten een vertaling gegeven, óf op basis van het eigen nivo n, óf op basis van nivo n-1. Daaruit kan worden geconcludeerd dat de vertaling op nivo n termineert als voor elke context geldt dat:
 \begin{itemize}
  \item er op nivo n een vertaling is gespecificeerd zonder gebruik te maken van nivo n-1;
  \item er op nivo n een vertaling is gespecificeerd gebruik makend van de vertaling nivo n-1, én de vertaling op nivo n-1 termineert;
  \item er op nivo n een verbod bestaat voor vertaling in deze context.
 \end{itemize}
 \item De eerste en derde conditie zijn hetzelfde als op het atomaire nivo, en termineren. 
 \item De tweede conditie termineert omdat er geen andere contexten en nivo's bestaan dan hier geschetst die niet termineren.
\end{itemize}

\end{synopsis}</Synopsis>
        </Document>
    </Documents>
</SearchIndexes>
