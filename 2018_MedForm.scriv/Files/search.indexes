<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="3">
            <Title>meta-data</Title>
            <Synopsis>Usage: 

The meta-data is formatted and used as YAML-block. This results in variables that can be used by the text processor, i.e., LaTeX, provided that you add code to the .tex template frits processing. The YAML-block must be included as the very first part of the LaTeX source document (or as a separate side-document that is specified as such in the *.tex template). Scrivener can produce a YAML-block in two ways: either as introducing it to its comiler as the first document in the set, or by adding metadata variables in the configuration to the compile action. 

I'm not sure that a combination of both appraches will work, except, possibly, by compling this meta-data document into a separate side document and not taking it into consideration anymore when compiling the Draft (Include in Compile: off). Then, define your metadata variables and take them into account during the Draft compile.</Synopsis>
            <Text>---
title:  'Semantic medation: from alignment relations to data transcriptions'  
subtitle:   
author:  
- name: Paul Brandt  
  affiliation: Eindhoven University of Technology; Netherlands Organization of Applied Scientific Research TNO, Den Haag, The Netherlands   
- name: Marten van Sinderen  
  affiliation: University of Twente, Enschede, The Netherlands  
- name: Twan Basten  
  affiliation: Eindhoven University of Technology, Eindhoven, The Netherlands 
version:   
category:   
ack: This work was supported by TNO through the MSoBD program.    
tags: semantic interoperability, semantic mediation, ontology alignment, term rewriting, cTRS, data transcription   
bibliography: src/bib/CitedByMe-2018_MedForm.bib  
csl: templates/my-basic-reference-style.csl  
abstract: |  
   
    *Background/Problem:* Ontologies are considered a means to represent the semantics of a software agent. Semantic reconciliation, and the resulting ontology alignment, has shown instrumental for achieving semantic interoperability (sIOP) between software agents. An ontology alignment expresses inter-ontological concept correspondences, which basically denote set relationships to hold between a pair of concepts, e.g., *subset*, *superset*, *overlap*, and more. This is in clear contrast with semantic mediation which, by transcribing the data expressed in the native language of one agent into the native language of the other agent, essentially implies an equivalence relation to hold between aligned concepts. 
 
    *Motivation:* Without solving this semantic discrepancy between the *intended* alignment correspondences that are specified, e.g., subset, superset, disjointness, and the transcription that is *applied*, viz. equivalence, alignment based mediation will always fail to achieve its purpose, that is, translating concepts between ontologies without introducing phantom semantics. The implementation of a generic mediation component that adheres to the correspondences as intended by the alignment, represents the keystone to the sIOP bridge between collaborating agents.  

    *Objective:* We present a mathematical foundation for a faithful semantic mediation model that is generic with respect to the applied pair of ontologies and their inter-ontological alignment. We furthermore formulate the generic mediator as a conditional term rewriting system.  

    *Results &amp; Consequences:* Independently from their underlying syntax, and irrespective the case-specific ontologies and alignments, data can be transcribed and exchanged between software agents without introducing phantom semantics. Thus sIOP can now be *specified* by inter-ontological alignments, as opposed to *implemented* by specific data wrappers case-by-case, providing for a huge improvement in flexibility, consistency and reuse of data, and a significant reduction in time-to-market. The generic characteristic of the mediator will allow to engineer infrastructural semantic standards and services to achieve sIOP.


...</Text>
            <Comments>brandtp, 9/17/2018 The term “fake” might be clearer?</Comments>
        </Document>
        <Document ID="4">
            <Title>Introduction</Title>
            <Text>Assume two collaborating software agents, exchanging data about their common interest. Each agent addresses a part of reality, here denoted the agent’s application domain. Collaboration implies that the agents’ application domains overlap. In terms of formal semantics, an application domain is abstracted into a conceptualisation as a set-based Domain of Interpretation (DoI), denoted \concept{D}. Furthermore, a conceptualisation is represented in tokens which, together, form an ontology, denoted \ont{O}. Finally, an interpretation function $\intn$ exists from the ontology to the conceptualisation. We assume that each agent decides on its own conceptualisation and its own ontological representation, the latter being built from a unique alphabet $\Sigma$. For example, consider ...

Since each agent decides on its own conceptualisation, two DoI’s with two unique ontologies emerge: $\intn: \ont{O} \to \concept{D}$, and $\intn’: \ont{O}’ \to \concept{D}’$, where $\Sigma_{\ont{O}} \cap \Sigma_{\ont{O}’} = \varnothing$^[Even worse, it can be the case that both ontologies share identical tokens which refer to different concepts in each conceptualisation.] whereas, since the DoI’s overlap, $\concept{D} \cap \concept{D}’ \neq \varnothing$. We assume the existence of (inter-ontological) alignment correspondences that hold between source and target ontological concepts, such as subsumption, disjointness or overlap. We make no assumptions on how the alignment correspondences are established but we do assume their semantic validity. Now consider that a transcription essentially implements a replacement of terms. From a semantic perspective term replacement enforces an equivalence to hold between both terms, which is in clear contrast with the prescribed correspondence relations (except for an equivalence correspondence). Consequently, the result of the transcription will induce a difference between how it is actually being interpreted by the target agent and how it was intended to be interpreted according to its correspondence relation. Whether this difference actually results in invalid semantics depends on how the domain of interest have been conceptualised by both agents, and the correspondence relation that is prescribed between them. With invalid semantics we refer to a valuation of a theory that contradicts the state of affairs in the domain of interest. Invalid semantics that are induced by the transcription will be denoted as phantom semantics. Note that due to the open world assumption this includes unfaithful valuations that remain open because conclusive data (or source data for their derivation) have vaporised, and vice versa, those that became closed because definitive data (or source data for their derivation) have transpired. In short, phantom semantics are semantics that are transcription-induced and contradict the state of affairs in the domain of interest. 

Our first objective is to facilitate for any pair of collaborating agents a generic semantic mediation: a syntactic replacement between theories from two distinct alphabets, which does not induce phantom semantics, despite the difference between the stated correspondence relation and the actual transcription. Our second objective is to provide for an implementation of such generic semantic mediation, which is always terminating, and remains independent on the order with which the terms are replaced.

The main idea of the paper is to identify, for (i) all logical contexts that originate from the source and target ontological concepts, (ii) including their (intra-ontological) relations, and (iii) all (inter-ontological) alignment correspondences that are possible between source and target ontological concepts, the most accurate valid transcription possible or $\token{null}$ if none is present. We call aspects (i)-(iii) the transcription contexts, and these are introduced as constraints for an abstract rewriting system, resulting in a conditional term rewriting system (cTRS) as the core engine for a semantic mediator. Our contributions to the semantic mediation process are then:

1. An inductive model of the transcription context, describing any logical context that might occur between collaborating agents, in terms of classes, relationships and correspondences (\cref{an-inductive-transcription-model});
1. A set of valid transcriptions for each transcription context that has been investigated and resolved. Due to space limitations we only present a few examples here -- the full set of valid transcriptions are available at [some web address | a “data” set] (\cref{valid-transcriptions});
1. A mathematical specification of a mediator, founded on a conditional term rewriting system (\cref{a-ctrs-as-mediator});
1. An investigation into the confluence property of the inductive model, to assure that the mediator is properly terminating (\cref{the-confluence-property-of-the-mediator});
1. (Finally, an evaluation of the mediator by providing an implementation that is based on a generic rewriting logic framework, the Maude 2.0 System [@Clavel2003a], (\cref{validation})). 

Before turning to the first of these sections, we will introduce some terminology, as follows.

A correspondence denotes a single particular inter-ontological relation, denoted as
\begin{equation}\label{eq:correspondence}
\mu = \tuple{ e, e’, \theta }
\end{equation}
with $\theta \in \Theta$ specifying the correspondence relation that holds between source concept $\token{e} \in \ont{O}$, denoted the transcribendum, and the target concept $\token{e’} \in \ont{O}’$, denoted the transcriptum. We consider $\Theta \; = \; \{=, \sqsubset, \sqsupset, \disj, \overlap \}$, denoting semantic equality, subsumption of, subsumes, disjointness, and overlap, respectively. The correspondence is prescribed and assumed to represent a semantically valid relation between both concepts. 

The concepts in the ontologies are the elements that apply in the ontology. These are of certain type, dependent on the type of logic that is used to formulate the ontology. Although we limit ourselves to description logic, and, for sake of simplicity and available space, to only the classes therein, the principles that we present here are applicable to the other types of elements in description logic, i.e., relations, properties and instances, as well as other type of logic. 

We denote as atomic correspondence a correspondence where $e$ and $e’$ are atomic concepts, i.e., a single concept without considering any (logical or ontological) relation with another concept from its own ontology. 

A correspondence is homogeneous when it relates concepts that are of the same type, whereas correspondences between concepts of different type are denoted as heterogeneous. We assume homogeneous correspondences only. 

Finally, some notation to distinguish various matters of equivalences:
\begin{align*}
  \equiv \;  &amp;\text{: denotes \emph{syntactical identity}, and } \\
  = \;       &amp;\text{: denotes \emph{semantic equality}.} \\
  \approx \; &amp;\text{: a semantic equality that holds \emph{a priori} is called a \emph{($\Sigma$-)identity}}
\end{align*}
</Text>
            <Comments>brandtp, 12-11-2018 Voorbeeld toevoegen
brandtp, 9/17/2018 Alleen als ik daar tijdruimte voor vinden kan.</Comments>
        </Document>
        <Document ID="30">
            <Title>Abstract</Title>
            <Text>    *Background/Problem:* Ontologies are considered a means to represent the semantics of a software agent. Semantic reconciliation, and the resulting ontology alignment, has shown instrumental for achieving semantic interoperability (sIOP) between software agents. An ontology alignment expresses inter-ontological concept correspondences, which basically denote set relationships to hold between a pair of concepts, e.g., *subset*, *superset*, *overlap*, and more. This is in clear contrast with semantic mediation which, by transcribing the data expressed in the native language of one agent into the native language of the other agent, essentially implies an equivalence relation to hold between aligned concepts. 
 
    *Motivation:* Without solving this semantic discrepancy between the *intended* alignment correspondences that are specified, e.g., subset, superset, disjointness, and the transcription that is *applied*, viz. equivalence, alignment based mediation will always fail to achieve its purpose, that is, translating concepts between ontologies without introducing phantom semantics. The implementation of a generic mediation component that adheres to the correspondences as intended by the alignment, represents the keystone to the sIOP bridge between collaborating agents.  

    *Objective:* We present a mathematical foundation for a faithful semantic mediation model that is generic with respect to the applied pair of ontologies and their inter-ontological alignment. We furthermore formulate the generic mediator as a conditional term rewriting system.  

    *Results &amp; Consequences:* Independently from their underlying syntax, and irrespective the case-specific ontologies and alignments, data can be transcribed and exchanged between software agents without introducing phantom semantics. Thus sIOP can now be *specified* by inter-ontological alignments, as opposed to *implemented* by specific data wrappers case-by-case, providing for a huge improvement in flexibility, consistency and reuse of data, and a significant reduction in time-to-market. The generic characteristic of the mediator will allow to engineer infrastructural semantic standards and services to achieve sIOP.
</Text>
            <Comments>brandtp, 9/17/2018 The term “fake” might be clearer?</Comments>
        </Document>
        <Document ID="31">
            <Title>Readme</Title>
            <Synopsis>From “How to write a research paper: Seven simple suggestions” by Simon P. Jones

See the youtube recording of his colloquium: https://www.youtube.com/watch?v=1AYxMbYZQ1Y

or his slides here: https://www.cis.upenn.edu/~sweirich/icfp-plmw15/slides/peyton-jones.pdf</Synopsis>
            <Text>The core purpose of your paper is: Convey a reusable idea, and NOT something new (This is Design Science, not natural science, remember!). Infect the mind of your reader: no matter where they stop reading, they should be able to spread your idea as a virus.

Suggestion #1: Writing your paper *IS* your research

Idea --&gt; start writing --&gt; use paper to enforce the relevant parts of the research.

Research = Communicating, whiteboarding
writing  = doing research = how you develop your idea

Suggestion #2: Identify your idea:
An idea is:

* a valuable starting point, always!
* a re-usable insight
* useful to the reader
* one “ping” 

Suggestion #3: Tell a Story, the narrative of which is:
- Here is a problem
- It’s an interesting problem (motivation)
- It’s an unsolved problem (why is it unsolved?)
- Here is my idea (the payload of the paper)
- My idea works (details and data)
- Here is how it compares to other peoples approaches.

As a result, wherever readers stop reading you want to have given them a take-away already. You’ve infected them such that they can speak about it.

Your text should support the reader. DO NOT LEAVE YOUR USERS TO GUESS:

-------------------------------------------------------------------------------------------------
   NOT                              BUT instead:
  
----------------------------------- -------------------------------------------------------------
“We describe the system”            “We give syntax and semantics of language that supports A ...
                                     (Sect. A). Its feature are ...”

“We study the properties”           “We proof that property X is sound, decidable, ...”

“We have evaluated the system in    “We have built X and used it to implement Y (Sect. B) and
 practice”                           the positive effects are... ”

-------------------------------------------------------------------------------------------------

Be 100% explicit: “The main idea of the paper is ....”</Text>
        </Document>
        <Document ID="32">
            <Title>An inductive transcription model</Title>
            <Text>When considering ontologies that are based on description logic, the concepts that are identified are dependent on their type, denoted $\varepsilon$, and is considered one of the following:
\begin{equation}\label{eq:concept-type}
\varepsilon \; ::= \; \token{C} \; | \; \token{R} \; | \; \token{P} \; | \; \token{T} \; | \; \token{\iota}
\end{equation}
where:

* \token{C} denotes the Class concept type, the interpretation of which results in a set $\concept{C} \subseteq \concept{D}$ of individuals: $\forall \token{c} \lhd \token{C}: \intn(\token{c}) \subseteq \concept{C}$, where $\lhd$ denotes the type-of relation between an individual concept (left-hand side, here a particular class) and its type $\varepsilon$ (right-hand side, here a Class type);
* \token{R}, \token{P}, \token{T} and \token{\iota} denote the Relation concept type, the Property concept type, the value type concept type, and the Instance concept type, respectively, with their own interpretation in \concept{D}. For reasons of space and simplicity we do not further elaborate on these concepts.

The above concepts all represent atomic concepts, and are part of correspondence $\mu = \langle e, e’, \theta \rangle$ as formulated by \cref{eq:correspondence}. The patterns that emerge for each homogeneous and atomic correspondence are depicted in \cref{fig:basic-correspondence} (b) to (f). 

![Atomic homogeneous correspondences, i.e., two ontologies, $\ont{O}$ and $\ont{O’}$, each containing only one atomic concept $e \in \{c, r, p, \iota, t\}$, with correspondence relation $\theta \in \Theta$ that specify how transcribendum $e$ corresponds with its peer transcriptum $e’$. Note that $\theta$ is a directed relation. Correspondence (a) represents the generic atomic correspondence for classes, types and individuals, depicted by correspondences (d), (e) and (f), respectively. orrespondences (b) and (c) represent the generic atomic correspondences for object relations and property relations, respectively.][def:BasicCorrespondence]

\Cref{fig:basic-correspondence} represent all potential atomic correspondence: two ontologies, $\ont{O}$ and $\ont{O’}$, each containing only one atomic concept $e$, with $e \in \{c, r, p, \iota, t\}$, and one correspondence relation $\theta \in \Theta$ to relate transcribendum $e$ with its peer transcriptum $e’$. In correspondence (a), however, concept $e$ can only be one of $c$, $\iota$ or $t$: when considering concepts that express relations, i.e., correspondence (b) on object relations and correspondence (c) on property relations, a class concept $c$ becomes a necessary part of the pattern to represent the domain of the relations; similarly, range concepts are necessarily included to the patterns as well. Furthermore, by including these secondary (domain and range) concepts, secondary correspondence relations are necessary to include in the atomic correspondence as well in order to clarify how the secondary concepts of the source $\ont{O}$ relate with those of the target ontology $\ont{O’}$. When one considers these secondary correspondence relations, i.e., $\theta_c$ and $\theta_t$ from correspondences (b) and (c) it becomes clear that these are, in fact, atomic correspondences. From this it follows that:

1. indeed correspondence (a) represents the generic atomic correspondence but only for classes, $\tuple{ c, c’, \theta_c}$ as depicted in correspondence (d), types, $\tuple{t, t’, \theta_t}$ as depicted in correspondence (e), and individuals, $\tuple{\iota, c’, \theta_\iota}$ as depicted in correspondence (f);
1. correspondences (b) and (c) represent the generic atomic correspondences for relations, since apart from the primary atomic correspondence also two secondary atomic correspondences are involved, i.e., three atomic correspondences in total;
1. the generic atomic correspondence of a relation can only be addressed once the transcriptions for the atomic correspondences (d) and (e) are resolved. 

In this paper, we only investigate the mediation for correspondence (d). To that end, we introduce the local contexts of the transcriptum and transcribendum in their particular ontologies $\ont{O}$ and $\ont{O}’$. Together, we denote this as the transcription context $\ctx$ that we define inductively as follows:
\begin{equation}\label{eq:transcription-context}
\ctx_n = \pair{r, \theta_n, r', \ctx_{n-1}}
\end{equation}
where:

* $r, r’ \in \set{\sqsubset, =, \sqsupset, \overlete, \overlinc, \displete, \disjoinc}$, representing a logical relationship between an intra-ontological class pair, with:
    * $r$ and $r’$ part of $\ont{O}$ and $\ont{O}’$, respectively;
    * $\sqsubset, =, \sqsupset$ denote subsumption of, semantic equivalence, and subsumes, and
    * $\displete, \disjoinc$ denote disjoint and complete, and disjoint and incomplete, whereas 
    * $\overlete, \overlinc$ denote not disjoint but complete and not disjoint and incomplete, respectively;
* $\theta_n \in \Theta$, the correspondence relation that is assumed to hold between classes $c_n \in \ont{O}$ and $c_n’ \in \ont{O}’$;
* $\ctx_{n-1} = \pair{r, \theta_{n-1}, r’, \ctx_{n-2}}$, viz. the transcription context at the previous induction level. 

We can depict the inductive transcription context as follows. We first consider the ontological relationships $r, r’ \in \set{\sqsubset, =, \sqsupset}$. The context $\ctx_n$ then is fully described by the concepts $c_n, c_{n-1} \in \ont{O}$ and $c_n’, c_{n-1}’ \in \ont{O’}$ and their intra-ontological relationships $r, r’$, the inter-ontological correspondence relation $\theta_n$ and the transcription context $\ctx_{n-1}$. This model has been depicted in \cref{fig:gen-class-transc-models}(a). 

On considering $\set{\overlete, \overlinc, \displete, \disjoinc}$, the completeness aspect of the relations demands a subsuming class concept that can act as reference for (in)completeness. This model has been depicted in \cref{fig:gen-class-transc-models}(b), where $r, r’ \in \set{\sqsubset, =, \sqsupset}$ relate the reference concept $c_n$, resp. $c_n’$, with subclasses $c_{n-1}$ and $\hat{c}_{n-1}$, resp. $c_{n-1}’$ and $\hat{c}_{n-1}’$ that bear an (in)completeness relation $\hat{r} \text{ resp. } \hat{r}’ \in \set{\overlete, \overlinc, \displete, \disjoinc}$. 

![The class transcription models that support all seven ontological relations. $\theta_n$ denotes the correspondence relation that applies for the current context $\ctx_n = \pair{\hat{r}, \theta_n, \hat{r}', \ctx_{n-1}}$, and $\longmapsto$ denotes the valid transcription under context $\ctx_{n-1}$. Classes $c_n$ and $c_n'$ are implied by class relations $c_{n-1} \hat{r} \hat{c}_{n-1}$ and $c_{n-1}' \hat{r}' \hat{c}_{n-1}'$, respectively.][def:GenClassTranscModels]

In the remainder of this paper we will refer to a specific context as case. Clearly, situation \ref{fig:gen-class-transc-models}(a) is a special case of situation \ref{fig:gen-class-transc-models}(b) since (b) morphs into (a) for $\hat{r} \equiv$ “$=$”. As a result, case (b) represents the generic, inductive transcription context with which we can describe each and every correspondence in every context that might apply. How this can be used to produce transcriptions that are valid and, therefore, do not produce phantom semantics, is presented in the next Section. 




&lt;!-- Page definitions --&gt;
[def:GenClassTranscModels]: src\images\GenClassTranscModels.png {#fig:gen-class-transc-models width=80%}
[def:BasicCorrespondence]: src\images\BasicCorrespondence.png {#fig:basic-correspondence width=100%}</Text>
        </Document>
        <Document ID="33">
            <Title>Valid transcriptions</Title>
            <Text>The main demand for the mediation is to guarantee that it either produces a semantic valid transcription, or $\token{null}$ when phantom semantics are induced. We formulate a generic transcription as a function $T_{\ctx} : \ont{O} \to \ont{O}’$, and denote a valid transcription as $e \vldtranscript{\ctx} e’$, indicating that concept $e \in \ont{O}$ can be replaced by concept $e’ \in \ont{O}’$ under the specified transcription context $\ctx$ without inducing phantom semantics. When the context is reduced to the correspondence relation $\theta$ only, we write $T_{(\theta)}$ and $e \vldtranscript{(\theta)} e’$. The semantic validity of a transcription is the result of two cooperating mechanisms:

1. Firstly, the transcription depends on transcription context $\ctx_n$, the correspondence $\mu_n = \tuple{ e_n, e_n’, \theta_n }$ as defined in \cref{eq:correspondence}, and the (valid) transcription result $e_{n-1} \vldtranscript{(\theta_{n-1})} e_{n-1}’$. The correspondence $\mu_n$ is prescribed and assumed to represent a semantic valid correspondence relation between both concepts;
1. Secondly, the transcription result $T_{\ctx_n}(e_n)$ represents a new theory that is added to $\ont{O}’$. This theory is evaluated by use of the target’s agent interpretation function $\intn’: \ont{O}’ \to \concept{D}’$. The semantic validity of the transcription, therefore, is dependent on whether the transcribendum $\intn(e_n)$ addresses the same individuals in the DoI as the transcription result $\intn’(T_{\ctx_n}(e_n))$. 

Since the transcription context provides for all potential logical circumstances that can occur, we can resolve the question whether or not a transcription is valid generically and independently from the particular ontologies and alignments that are applied by the software agents, as follows:

\begin{mmdef}[Semantic validity of a transcription]\label{def:valid-transcription}
Assume transcribendum $e_n \in \ont{O}$, transcriptum $e_n’ \in \ont{O}’$, correspondence $\mu_n = \tuple{ e_n, e_n’, \theta_n }$, transcription context $\ctx_n = \pair{r, \theta_n, r', \ctx_{n-1}}$ and a semantic valid transcription at the lower inductive level, $e_{n-1}\vldtranscript{\ctx_{n-1}}$. We denote the transcription result as $T_{\ctx_n}(e_n)$. Then, we call the transcription \emph{semantically valid} iff:\[
\intn’(T_{\ctx_n}(e_n)) \subseteq \intn(e_n)
\]
\end{mmdef}
In other words, a transcription is valid if all individuals that potentially belong to the set represented by $e_n$ also belong to the set that is constructed by $T_{\ctx_n}(e_n)$. The question at hand then becomes how to establish $T_{\ctx_n}(e_n)$? Clearly, the transcription result can be represented inductively as a logical combination of $e_n’$, $e_{n-1}’$ and $\hat{e}_{n-1}’$. Our task is then to traverse the multidimensional space that is spanned by the transcription context, and for each point in that space consider when $\intn(e_n) \supseteq \intn’(T_{\ctx_n}(e_n))$ holds, viz. which logical combination of $e_n’$, $e_{n-1}’$ and $\hat{e}_{n-1}’$ implies the set that maximally equals $\intn(e_n)$. In the worst case this is not possible and the result is the empty set, denoted $\ntsa$. We first consider transcriptions for atomic correspondences, and in the subsequent subsections we extend it to cover several example cases of the full transcription context.</Text>
        </Document>
        <Document ID="34">
            <Title>A cTRS as mediator</Title>
            <Text>Before we show how a transcription can be formulated as a conditional Term Rewriting System (cTRS), we will first provide for a small summary on term rewriting systems.</Text>
        </Document>
        <Document ID="35">
            <Title>Related work</Title>
            <Synopsis>1-2 pages
10 readers

\end{synopsis}</Synopsis>
        </Document>
        <Document ID="36">
            <Title>Conclusions and further work</Title>
            <Synopsis>1/2 page

\end{synopsis}</Synopsis>
        </Document>
        <Document ID="37">
            <Title>MMD cheat sheet</Title>
            <Text>Source: [pandoc’s markdown](http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown)

# Chapter levels, this is level 1 # {#identifier .class .class key=value key=value}

I can refer to [the very first chapter](#foo) or using the [autogenerated chapter id](#chapter-level-2).

The {attributes} should be positioned OUTSIDE the hash-enclosed chapter title.

## Chapter level 2 {#foo -}

The {-} attribute indicates an unnumbered header.

# A level-one header with a [link](/url) and *emphasis*</Text>
        </Document>
        <Document ID="38">
            <Title>Text and Formats</Title>
            <Text>Letter format

**Bold face**

*Italic face*

`literals`

Text with ^superscript^ and ~subscript~

Text with ~~strike out~~

Code block:
~~~python // ← this python thingy is optional, but might result in syntax highlighting
define foobar() {
    print &quot;Welcome to flavor country!&quot;;
}
~~~

Text
Create lorum ipsum dummy text with 
\usepackage{blindtext}
\blindtext

</Text>
        </Document>
        <Document ID="39">
            <Title>Proprietary encodings</Title>
            <Text>I have implemented a few proprietary, quasi-MMD codes that are translated by Scrivener to particular Latex codes.

Quasi-MMD codes
Latex code
Implementation
[|text]
\mywordbox{text}
The text is formatted with a small box:
\newcommand{\mywordbox}[1]{%
  {% open a group for a local setting
   \setlength{\fboxsep}{-2\fboxrule}% the rule will be inside the box boundary
   \hspace{1pt}\fcolorbox{gray!20}{blue!5}{\hspace{2pt}\strut\textbf{#1}\hspace{2pt}}\hspace{1pt} % print the box, with some padding at the left and right
  }% close the group
}
[*text]
\index{text}text
With multiple passes of LaTeX, pdfLaTeX, LuaTeX, etc., text will become an entry in the index





</Text>
        </Document>
        <Document ID="40">
            <Title>Authors</Title>
            <Text>Choose between two YAML variants that can be processed by the latex template:

Variant 1: One sub name/affiliation for each author, as

author:  
- name: Paul Brandt  
  affiliation: Eindhoven University of Technology; Netherlands Organization of Applied Scientific Research TNO, Den Haag, The Netherlands   
- name: Twan Basten  
  affiliation: Eindhoven University of Technology, Eindhoven, The Netherlands 

Variant 2: One author only, as

</Text>
        </Document>
        <Document ID="41">
            <Title>Footnotes, Images and Links</Title>
            <Text>Footnotes

By anchor 

A footnote is a kind of anchor [^1] that refers to the actual text defined at the bottom of the page (or elsewhere in the text), like this:

[^1]: the text of the footnote that the anchor refers to. The anchor id can be anything, as long as the carrot symbol precedes the id, e.g., [^this_is_a_very_long_footnote_id]

Inline without anchor

This inline footnote ^[the text of the footnote is included at the position of the anchor] is defined without anchor. Like the anchored footnote, the position of the placement of the footnote in the document is defined by meta-properties.

Image inclusion
Define the image inline as ![image caption](path\to\image.png){#image-ref-label .class width=30 height=20px}

Or, use a short link in the text to indicate its position, such as:
![image caption][image-def-label]
And at the bottom of the page, include its definition with attributes. No matter how \cref{image-ref-label} is defined, you can always refer to its (type and) number with \(c)ref.

[image-def-label]: path\to\image.png &quot;optional title&quot; {#image-ref-label .class width=30 key2=&quot;val 2&quot;}

Internal links
An explicit link has two parts, the link itself and the link definition, which may occur elsewhere in the document (either before or after the link).

* The link itself consists of link text in square brackets, followed by a label in square brackets. (There can be space between the two.): [text that will be given a click-able link] [the-label-of-this-link-source]
* The link definition consists of the bracketed label, followed by a colon and a space, followed by the URL, and optionally (after a space) a link title either in quotes or in parentheses, e.g., [my website]: http://foo.bar.baz (the link title)
* Use the automatically generated identifier (Extension: auto_identifiers)
	* See the [text about this link](#link-as-title-of-the-section).
	* Or, implicitly, see the [text about this link] as placeholder and below its definition

[text about this link](#link-as-title-of-the-section)

References to chapter numbers and images
This is not possible in MMD, currently. Some initiatives are being considered, though (REF). One way to solve this is to use latex code, as follows:

Blahbllah, see \cref{the-section-id-as-referenced-by-MMD}. This will produce: “Blahbllah, see Section 2.1”

Note the missing #-sign in the reference; the #-sign is an MMD-construct, not a latex construct. Furthermore, the cref (clever reference) package does not require the category to be named in the text (Section, Example, Chapter, Theorem, etc.), it will insert the correct one itself.

This works for other forms of references as well, i.e., anything that can be given a label, by the following label definition: \label{my-label-name}. Again, note the missing #-sign in the label definition.

External links
  Blahblah blah blah blah. See [my website][], or [my website].

[my website]: http://foo.bar.baz

footnotes (extension: footnotes)
Here’s a footnote reference [^1] and another.[^longnote]

[^1]: Here is the footnote.
[^longnote]: Here's one with multiple blocks.
    Subsequent paragraphs are indented to show that they
belong to the previous footnote.

        { some.code }

    The whole paragraph can be indented, or just the first
    line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won't be part of the note, because it
isn't indented.</Text>
        </Document>
        <Document ID="42">
            <Title>References</Title>
            <Text>References are based on bibtex. To specify a bibliography file use *--bibliography &lt;myCitations.bib&gt;* at the command line, or, the YAML metadata field *bibliography*.

Citations go inside square brackets and are separated by semicolons (note that NO SPACES surround the semicolon). Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. Examples:

* Blah blah [see @doe99, pp. 33-35;also @smith04, chap. 1].
* Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].
* Blah blah [@smith04; @doe99].

The citation identifier may contain special characters.</Text>
        </Document>
        <Document ID="43">
            <Title>Bullits and numbered lists</Title>
            <Text>Bullits and numbered lists

Bullit lists

The bullets need not be flush with the left margin; they may be indented one, two, or three spaces. The bullet must be followed by whitespace, and preceded by a blank line. A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented four spaces or a tab. 

  * Fruits

    Continued paragraph belonging to Fruits.

List items may include other lists. In this case the preceding blank line is optional. The nested list must be indented four spaces or one tab:

* fruits
    + apples
        - macintosh
        - red delicious

Number lists

Ordered lists work just like bulleted lists, except that the items begin with enumerators (numbers themselves are ignored) rather than bullets:
2. First item
1. Second item
21. Third item

Autonumbers

(@one)  My first example will be numbered (1).
(@)  My second example will be numbered (2).

Explanation of example (@one).

(@)  My third example will be numbered (3).</Text>
        </Document>
        <Document ID="44">
            <Title>Tables</Title>
            <Text>Tables
Pipe tables
Pipe tables look like this:

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|1|1|1|1

  : Demonstration of pipe table syntax {#anchor-for-its-reference}.

The syntax is the same as in PHP markdown extra. The beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header can be omitted, but the horizontal line must still be included, as it defines column alignments. Since the pipes indicate column boundaries, columns need not be vertically aligned, as the last row indicates.
The cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines, nor wrap text within cells.

Grid tables look like this:
: Sample grid table.

+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+
The row of =’s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.). Alignments are not supported, nor are cells that span multiple columns or rows. 

Multiline tables
Multiline tables are also possible, and allow headers and table rows to span multiple lines of text (but cells that span multiple columns or rows of the table are not supported). Here is an example:
-------------------------------------------------------------
 Centered   Default           Right Left
  Header    Aligned         Aligned Aligned
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here's another one. Note
                                    the blank line between
                                    rows.
-------------------------------------------------------------

   : Here's the caption. It, too, may span
multiple lines.

These work like simple tables, but with the following differences:
They must begin with a row of dashes, before the header text (unless the headers are omitted).
They must end with a row of dashes, then a blank line.
The rows must be separated by blank lines.
In multiline tables, the table parser pays attention to the widths of the columns, and the writers try to reproduce these relative widths in the output. So, if you find that one of the columns is too narrow in the output, try widening it in the markdown source.
Headers may be omitted in multiline tables as well as simple tables</Text>
        </Document>
        <Document ID="45">
            <Title>Glossary</Title>
            <Text>Unfortunately, there is as of yet no representation of definition of glossary terms. One definition has been suggested:
[^glossaryfootnote]: glossary: term (optional sort key)
    The actual definition belongs on a new line, and can continue on
    just as other footnotes.
This would allow for footnotes to be specified as glossary terms. The *term* is the item that belongs in the glossary. The *sort key* is optional, and is used to specify that the term should appear somewhere else in the glossary (which is sorted in alphabetical order).</Text>
        </Document>
        <Document ID="46">
            <Title>Math</Title>
            <Text>Mathematical formulae are not possible in MMD. To that end, apply LateX rules and include appropriate libraries in the latex template, see also https://en.wikibooks.org/wiki/LaTeX/Mathematics. The suggestions below are not MMD cheats but LateX cheats instead.

\usepackage{mathtools}

Mathmode: 

* Inline: TEXT encompassed with \( ... \) of $ ... $
* Paragraph: wat was dit ook alweer?

If you are typing text normally, you are said to be in text mode, but while you are typing within one of those mathematical environments, you are said to be in math mode that has some differences compared to the text mode:
Most spaces and line breaks do not have any significance, as all spaces are either derived logically from the mathematical expressions, or have to be specified with special commands such as \quad
Empty lines are not allowed. Only one paragraph per formula.
Each letter is considered to be the name of a variable and will be typeset as such. If you want to typeset normal text within a formula (normal upright font and normal spacing) then you have to enter the text using dedicated commands.
The caret (^) character is used to raise something (superscript), and the underscore (_) is for lowering (subscript). If more than one expression is raised or lowered, they should be grouped using curly braces ({ and }).


$\mathpzc{ALC}$
</Text>
        </Document>
        <Document ID="47">
            <Title>Definitions, proofs etc</Title>
            <Text>Definitions, Theorems, Proofs and more are not possible in MMD. To that end, apply LateX rules and include appropriate libraries in the latex template, see also https://en.wikibooks.org/wiki/LaTeX/Theorems. The suggestions below are therefore not MMD cheats but LateX cheats instead.

\begin{mmdef}[definitie onderwerp]\label{def:my-unique-reference}
Here is a new definition
\end{mmdef}

\begin{mmexmp}\label{ex:my-unique-reference}
Here is a new example
\end{mmexmp}

\begin{mmdp}[My first design principle]
\end{mmdp}

\begin{mmprf}
Write your proof
\end{mmprf}

\begin{mmthrq}\label{:rq:my-unique-reference}
Here is a new research question
\end{mmthrq}


## KNOWN BUG ##

Unfortunately, the MMD format, e.g., MMD-lists, does not work within a Theorem environment, and we need to make use of Latex command. For instance, include a list in the Definition envionment as follows:
\begin{mmdef}
My definition includes the following items:
 \begin{itemize}[label={-}]
   \item here is the first item
   \item Here is the second item
 \end{itemize}
\end{mmdef}

Note that the indentation is only for maintaining an overview of the number of \begin{}-\end{} pairs 

## LaTeX header definition ##
These definitions/proofs/etc. are based on a package for theorems, i.e., amsthm. Before the above definitions/proofs/etc can work, we need to import and configure the Theorem package. This requires a LaTeX header definition, as follows:
\usepackage{amsthm}

\newtheorem{mmexmp}{Example}[section]
\newtheorem{mmthrq}{Research Question}
\newtheorem{mmdef}{Definition}</Text>
        </Document>
        <Document ID="48">
            <Title>Proper English </Title>
            <Text>Some often made mistakes…
</Text>
        </Document>
        <Document ID="49">
            <Title>-ise/ -ize</Title>
            <Text>In British English, most words ending in -ise can also be spelt with ize. Exceptions are words in two syllables, e.g., surprise, and advertise and analyse. Therefore, in BE play safe and consistently use -ise. In American English, only -ize is used. 

* In Americal English, final -l is not usually doubled in an unstressed syllable, whilst in British English it is, e.g., US traveler, leveling, becomes GB traveller, levelling; hence, modelling
* Some endings in -ter in AE become -tre in BE: US theater, center become GB theatre, centre.
* Some endings in -or in AE become -our in BE: US labor, color become GB labour, colour.
* Some endings in -og in AE become -ogue in BE: US catalog, analog become GB catalogue, analogue.
* Some endings in -ense in AE become -ence in BE: US defense, offense, pretense become BE defence, offence, pretence. However, US practice becomes GB practise.

&lt;!-- einde opsomming --&gt;</Text>
        </Document>
        <Document ID="50">
            <Title>That versus which</Title>
            <Text>
* “that/who” (no comma) is used to single out (restrict) from many possibilities the one and only that is referred to: 
    * The painting that was hanging in the foyer was stolen --&gt; from all paintings in the house, one hung in the foyer and that particular one was stolen;
    * The suspect who has red hair committed the crime --&gt; from all suspects indeed the perpetrator was the only red haired person;
* “, which /, who” (with comma) is used to add incidental information (unrestricted) about the subject that is referred to, however, not to single it out:
    * The painting, which was hanging in the foyer, was stolen --&gt; many paintings were hanging in the foyer, and the one that was stolen was one of them;
    * The suspect, who owns a red car, committed the crime --&gt; although the perpetrator owns a red car, this does not necessarily imply that from all suspects the perpetrator and only the perpetrator owns a red car. Any or all of the suspects might own a red car.
* hence, “who” refers to a restrictive clause while “, who” refers to a non-restrictive (informative) clause.

&lt;!-- einde opsomming --&gt;</Text>
        </Document>
        <Document ID="51">
            <Title>Plural versus possessive -s</Title>
            <Text>Source: https://umanitoba.ca/student/academiclearning/media/Plural_vs_Possessive_S_NEW.pdf

**Plural**

* The most common way to pluralize a noun is to simply add an -s at the end:
    Hamburger (singular) becomes hamburgers (plural)\\
    College (singular) becomes colleges (plural)
* Nouns that end in a vowel followed by a -y take an -s in the plural:
    Monkey (singular) becomes monkeys (plural) \\
    Nouns that end in a consonant followed by a -y undergo a more dramatic change. First, the -y changes 
to an -ie and then an -s is added:
    Baby (singular) becomes babies (plural)
* Nouns that end in a sibilant (s, x, z, ch, sh) pluralize by adding an -es:
    Church (singular) becomes churches (plural)
* Nouns that end in an -is are replaced by -es in the plural:
    Thesis (singular) becomes theses (plural)
* Count nouns that end in -f pluralize by changing to a –ves:
    Calf (singular) becomes calves (plural) 

**Possessive**

* The possessive -s is used to show belonging: \\
    Kevin’s coat
* Add an ’s to the plural forms of nouns that do not end in -s: \\
    The children’s bedroom
* Add an ’ to the plural forms of nouns that end in -s: \\
    The addicts’ support group \\ 
    The seven Von Trapp kids’ singing nanny
* Apostrophes should not be used with possessive pronouns (my, yours, hers, his, its, ours). These 
Pronouns do not need apostrophes because they inherently show possession.
* It’s is a contraction for “it is” and its is the possessive pronoun that signifies “belonging to it”. 

&lt;!-- einde opsomming --&gt;</Text>
        </Document>
        <Document ID="52">
            <Title>References {-}</Title>
        </Document>
        <Document ID="53">
            <Title>The confluence property of the mediator</Title>
            <Synopsis>Confluence draagt ervoor zorg dat de cTRS termineert, onafhankelijk van het pad dat de rewriting uiteindelijk volgt. Confluence is voor transcripties eenvoudig te bewijzen:

\begin{itemize}
\item Op het laagste inductienivo, het atomische nivo, bestaat er óf wel, óf geen vertaling. Dat termineert dus altijd
\item op inductienivo n zijn voor alle contexten een vertaling gegeven, óf op basis van het eigen nivo n, óf op basis van nivo n-1. Daaruit kan worden geconcludeerd dat de vertaling op nivo n termineert als voor elke context geldt dat:
 \begin{itemize}
  \item er op nivo n een vertaling is gespecificeerd zonder gebruik te maken van nivo n-1;
  \item er op nivo n een vertaling is gespecificeerd gebruik makend van de vertaling nivo n-1, én de vertaling op nivo n-1 termineert;
  \item er op nivo n een verbod bestaat voor vertaling in deze context.
 \end{itemize}
 \item De eerste en derde conditie zijn hetzelfde als op het atomaire nivo, en termineren. 
 \item De tweede conditie termineert omdat er geen andere contexten en nivo's bestaan dan hier geschetst die niet termineren.
\end{itemize}

\end{synopsis}</Synopsis>
        </Document>
        <Document ID="54">
            <Title>Validation</Title>
            <Synopsis>Only possible if I have time to produce an implementation (specification) in either Pure or Maude (TRS-facilitating platforms)</Synopsis>
        </Document>
        <Document ID="55">
            <Title>Transcribing over atomic class context</Title>
            <Text>We first consider the transcription of case (d) in \cref{fig:basic-correspondence}, the atomic correspondence $\mu = \tuple{ c, c’, \theta }$, with its atomic transcription context $\ctx = (\theta)$. As indicated, the question at hand is which logical combination of $e_n’$, $e_{n-1}’$ and $\hat{e}_{n-1}’$ implies the set that maximally equals $\intn(e_n)$?

This is straightforward for this case: since no other concepts are present in context $\ctx$, the transcriptum $c’$ represents the only potential concept that will take part in the transcription result. Hence the only potential outcomes are $\set{c’, \neg c’, \ntsa}$. The choice depends on whether phantom semantics are amongst the results of the transcription for the particular context $\ctx = (\theta)$ that is considered. The result of this strategy is shown in \cref{tab:atomic-class-transcriptions}, where each column specifies the possible correspondence relation that applies, and the row specifies the individual transcription results $T_\sqsubset(c)$, $T_=(c)$, $T_\sqsupset(c)$, $T_\overlap(c)$, and $T_\disj(c)$, collectively denoted as $T_{(\theta)}(c)$.

\begin{table}[h]
  \centering
  \caption{Transcription results $T_{(\theta)}(c)$ for the atomic transcription context $\ctx = (\theta)$ and correspondences $\tuple{c, c’, \theta}$: atomic class $c$ represents the transcribendum and is transcribed under relation $\theta$, taking into consideration that no other concepts are present. The transcription result is semantically valid by token of not inducing phantom semantics under this specific context, denoted as $c \vldtranscript{(\theta)} c’$. }
  \label{tab:atomic-class-transcriptions}
  \begin{tabular}{cc@{\qquad}ccccc}
    \toprule
    \multicolumn{2}{c}{$c \vldtranscript{(\theta)}$} &amp; \multicolumn{5}{c}{Correspondence relation $\theta$} \\ \cmidrule{3-7}
     &amp;&amp; $\sqsubset$ 
      &amp; $=$
      &amp; $\sqsupset$
      &amp; $\overlap$ 
      &amp; $\disj$ \\
     \multicolumn{2}{c}{Concept $e$}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sb.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Eq.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sp.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-nD.png}
      &amp; \includegraphics[width=0.1\textwidth]{src/images/VennBC-Dj.png} \\ \cmidrule(r){1-2} \cmidrule{3-7}
      &amp; $c$     &amp; $c’$        &amp; $c’$     &amp; \ntsa     &amp; \ntsa     &amp; $\neg c’$  \\ \bottomrule
  \end{tabular}
\end{table}

In conclusion, \cref{tab:atomic-class-transcriptions} specifies all transcriptions under the one single atomic transcription context for all correspondences, collectively. We therefore denote such transcription table as $T_\ctx$, and this particular one as $T_{(\theta)}$.

Unfortunately, two out of five correspondence relations prohibit a transcription, and a third is rather broad in its transcription. These particular three correspondences, $\theta \in \set{\sqsupset, \overlap, \disj}$, do have a common ground for their “shortcomings”, being lack of knowledge. Therefore, we extend the atomic context of the transcription to the full transcription context in order to gain more information with the purpose to resolve the shortcomings of the atomic case.</Text>
        </Document>
        <Document ID="56">
            <Title>Transcribing over an implied class context</Title>
            <Text>The following two cases are a minimal extension of the original atomic class transcription from the previous section. We introduce a new class that is implied (subsumed) by the existing class: $c_n’ \sqsupset c_{n-1}’$ into $\ont{O’}$ is depicted in \cref{fig:medcxt-sup} case (a), and case (b) introduces the same class implication but now into $\ont{O}$. 

![Correspondences over an \emph{implied class context}. Case (a): class $c_n’$ subsumes class $c_{n-1}’$. Case (b): class $c_n$ subsumes class $c_{n-1}$. Both cases (a) and (b) build upon the valid transcription under context $\ctx_{n-1} = \pair{\theta_{n-1}}$, as specified in \cref{tab:atomic-class-transcriptions}. The current context, $\ctx_n$, specifies case (a) as $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$, and case (b) as $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$][def:MedcxtSup]

Both cases are founded on case \ref{fig:basic-correspondence}(d) since the transcription of the latter (specified in \cref{tab:atomic-class-transcriptions}) has been incorporated inductively as the underlying transcription, i.e., as $T_{\ctx_{n-1}}(c_{n-1})$. Since this is a valid transcription (as we have seen in the previous section) we can denote this as $c_{n-1}\vldtranscript{\ctx_{n-1}}$. Context $\ctx_{n-1}$ is fully defined by correlation relation $\theta_{n-1}$, i.e., $\ctx_{n-1} = \pair{\theta_{n-1}}$. In contrast, the current context $\ctx_n$ for case \ref{fig:medcxt-sup}(a) is defined by (i) the ontological relationship between $c_n$ and $c_{n-1}$, i.e., equivalence, (ii) the correlation relation $\theta_n$ between $c_n$ and $c_n’$, (iii) the ontological relationship between $c_n’$ and $c_{n-1}’$, viz. subsumption, and finally (iv) the previous context $\ctx_{n-1}$. Hence, $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$. Similarly, for case \ref{fig:medcxt-sup}(b), its context is defined by $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$.

One way to establish $T_{\ctx_n}(c_{n-1})$ is to draw the Venn-diagrams for $c_n$, $c_{n-1}$, $c_n’$ and $c_{n-1}’$ conform each instance of context $\ctx_n$, viz. each point in the table, and investigate how $c_{n-1}$ can be transcribed best. ‘Best’ here refers to the as small as possible subset, represented by a logical combination of $c_n’$ and $c_{n-1}’$, that fully encompasses $c_{n-1}$. Another way is to apply first order logic to derive the best transcription. Either way, the results are either (i) a valid transcription result, (ii) the absence of a valid transcription under context $\ctx_n$, denoted as $\ntsa_n$, or (iii) a logical contradiction in the context and therefore not applicable, denoted by `-`.      

Since context $\ctx_n$ is constructed from classes $c_n$ and $c_{n-1}$ that both entail a correspondence, both transcriptions $T_{\ctx_n}(c_n)$ and $T_{\ctx_n}(c_{n-1})$ are to be considered per case. We start with the transcriptions for class $c_{n-1}$, shown in \cref{tab:transcr_cn-1_ctxn_sup_a,tab:transcr_cn-1_ctxn_sup_b}, where $c_{n-1}$ refers to the very same class that is denoted as class $c$ in \cref{tab:atomic-class-transcriptions}. In contrast to \cref{tab:atomic-class-transcriptions} where an atomic context was considered only, here the implied class context from cases \ref{fig:medcxt-sup} (a) and (b) are taken into consideration, as specified in the first column in \cref{tab:transcr_cn-1_ctxn_sup_a,tab:transcr_cn-1_ctxn_sup_b}, entitled *Context* $\ctx_{n-1}$. This column specifies, therefore, the atomic transcriptions from \cref{tab:atomic-class-transcriptions} as presupposition: rows 3 and 4 of this column show $\ntsa_{n-1}$, indicating that class $c_{n-1}$ could not be transcribed under $\theta_{n-1} \in \{ \sqsupset, \overlap \}$.

\begin{table}[h]
  \centering
  \caption{Transcription results $T_{\ctx_n}(c_{n-1})$ for case \ref{fig:medcxt-sup} (a), i.e., under context $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$. The table presents (i) the valid transcriptum, or (ii) the absence of a valid transcription under context $\ctx_n$, denoted as $\ntsa_n$, or (iii) a logical contradiction in the context and therefore not applicable, denoted by `-`.}
  \label{tab:transcr_cn-1_ctxn_sup_a}
  \begin{tabular}{cc@{\hspace{4px}}c@{\hspace{5px}}lccccc}
    \toprule
    $c_{n-1} \vldtranscript{( =, \theta_n, \sqsupset, \ctx_{n-1})}$ &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    &amp; \multicolumn{1}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; \multicolumn{1}{c}{$\theta_{n-1}$}
                                           &amp; &amp; $\sqsubset$ &amp; $=$ &amp; $\sqsupset$ &amp; $\overlap$  &amp; $\disj$    \\  \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule{5-9}
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$      &amp; &amp; $c_{n-1}’$  &amp; -        &amp; -           &amp; -           &amp; -               \\ 
    2 &amp; $c_{n-1}’$      &amp; $=$         &amp; &amp; $c_{n-1}’$  &amp; -        &amp; -           &amp; -           &amp; -               \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$      &amp; &amp; $c_n’$      &amp; $c_n’$   &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; -               \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$       &amp; &amp; $c_n’$      &amp; -        &amp; -           &amp; $\ntsa_n$   &amp; -               \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$          &amp; &amp; $c_n’ \sqcap \neg c_{n-1}’$ \rmk{seq}
                                                           &amp; -        &amp; -           &amp; $\neg c_{n-1}’$ \rmk{inh1}
                                                                                                  &amp; $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}

\begin{table}[h]
  \centering
  \caption{Transcription results $T_{\ctx_n}(c_{n-1})$ for case \ref{fig:medcxt-sup} (b), i.e., under context $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$. }
  \label{tab:transcr_cn-1_ctxn_sup_b}
  \begin{tabular}{cr@{, }l@{\hspace{5px}}lccccc}
    \toprule
    $c_{n-1} \vldtranscript{(\sqsupset, \theta_n, =, \ctx_{n-1})}$ &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}}$ 
                        &amp; $\theta_{n-1}$    &amp; &amp; $\sqsubset$ &amp; $=$        &amp; $\sqsupset$ &amp; $\overlap$  &amp; $\disj$  \\ \cmidrule(r){2-3} \cmidrule{5-9}
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$       &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $c_{n-1}’$ \rmk{inh2}
                                                                                       &amp; $c_{n-1}’$ \rmk{inh2} &amp; - \\ 
    2 &amp; $c_{n-1}’$      &amp; $=$               &amp; &amp; -           &amp; -          &amp; $c_{n-1}’$ \rmk{inh2} &amp; - &amp; -         \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$       &amp; &amp; -           &amp; -          &amp; $c_n \vldtranscript{\ctx_n}$ \rmk{anc}
                                                                                       &amp; -           &amp; -         \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$        &amp; &amp; -           &amp; -          &amp; $c_n \vldtranscript{\ctx_n}$ \rmk{anc}
                                                                                       &amp; $\ntsa_n$   &amp; -         \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$           &amp; &amp; -           &amp; -          &amp; $\neg c_{n-1}’ \sqcap c_n \vldtranscript{\ctx_n}$ \rmk{anc}
                                                                                       &amp; $\neg c_{n-1}’$ \rmk{inh2}
                                                                                                     &amp; $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}
\begin{mmrmk}\label{rmk:inh1}
Solely based on correspondence relation $\theta_n$, insufficient information is present to support a transcription of transcribendum $c_{n-1}$. In contrast, when context $\ctx_n$ is considered, the transcription of context $\ctx_{n-1}$ can be taken into account. Since (i) transcribendum $c_{n-1}$ has been given a valid transcription under context $\ctx_{n-1}$, viz. $c_{n-1} \vldtranscript{\ctx_{n-1}} \neg c’_{n-1}$, and (ii) context $\ctx_n$ does not imply an invalid logical construct, and (iii) $c_n’ \sqsupset c’_{n-1}$, therefore the transcription $c_{n-1} \vldtranscript{\ctx_n}$ will inherit the transcriptum from $c_{n-1} \vldtranscript{\ctx_{n-1}}$.
\end{mmrmk}
\begin{mmrmk}\label{rmk:seq}
Solely based on correspondence relation $\theta_n$, a valid transcription $c_{n-1} \vldtranscript{\sqsubset} c_n’$ applies. However, by token of the underlying context $\ctx_{n-1}$, it had already been established that $c_{n-1} \vldtranscript{\ctx_{n-1}} \neg c_{n-1}’$. Since the former transcription further constrains the latter, both transcriptions should be applied, rendering the double constraint as shown. 
\end{mmrmk}
\begin{mmrmk}\label{rmk:inh2}
Solely based on correspondence relation $\theta_n$, insufficient information is present to support a transcription of transcribendum $c_{n-1}$. Based on $\ctx_n$, however, the transcription of context $\ctx_{n-1}$ can be taken into account. Since (i) transcribendum $c_{n-1}$ has been given a transcription result under context $\ctx_{n-1}$, viz. $c_{n-1} \vldtranscript{\ctx_{n-1}} c’_{n-1}$, and (ii) context $\ctx_n$ does not imply an invalid logical construct, the transcription $c_{n-1} \vldtranscript{\ctx_n}$ will inherit the transcriptum from $c_{n-1} \vldtranscript{\ctx_{n-1}}$.
\end{mmrmk}
\begin{mmrmk}\label{rmk:anc}
Solely based on context $\ctx_n$, insufficient information is present to support a transcription for $c_{n-1}$. However, since $c_{n-1} \cong_{c’} c_n$, it follows that $c_{n-1} \vldtranscript{\ctx_n} = c_n \vldtranscript{\ctx_n}$. At this point, $c_n \vldtranscript{\ctx_n}$ remains undetermined. Whenever transcribendum $c_n$ can be transcribed under any future context $\ctx{}$, $c_{n-1}$ can be transcribed identically under the current context $\ctx_n$ as well.
\end{mmrmk}

Indeed, the information added by case \ref{fig:medcxt-sup} (a) renders insufficient knowledge to provide for an alternative transcription for the problematic rows 3 and 4, as is shown in \cref{tab:transcr_cn-1_ctxn_sup_a}, columns $\theta_n \in \{ \sqsupset, \overlap \}$. Contrarily, columns $\theta_n \in \set{\sqsubset, =}$ do provide for alternative transcriptions, so by introducing more (context) information we have gained a 50% improvement over the atomic class context. When we look at case (b) in \cref{tab:transcr_cn-1_ctxn_sup_b}, a potential transcription for the hard case $\theta_n = \sqsupset$ is available as well for rows 3 and 4, as explained in \cref{rmk:anc}; an improvement of 66% over the atomic case. Moreover, for rows 1, 2, and 5, both cases (a) and (b) provide for a transcription for $\theta_n \in \{ \sqsupset, \overlap \}$ for all points where the context is logically consistent. Finally, both cases (a) and (b) provide for a more specific transcription for $\theta_{n-1} = \disj$, refer to \cref{rmk:seq}. 

Now that we have addressed the transcriptions for class $c_{n-1}$, let’s turn our attention to the transcription for class $c_n$. Consider case \ref{fig:medcxt-sup} (a), viz. context $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$. Since the intra-ontological relation $r$ specifies that $c_n = c_{n-1}$, we can derive that $T_{(=, \theta_n, \sqsupset, \ctx_{n-1})}(c_n) = T_{(=, \theta_n, \sqsupset, \ctx_{n-1})}(c_{n-1})$. As we already concluded for \cref{tab:transcr_cn-1_ctxn_sup_a}, we again gain 50% improvement over the atomic class context. On considering case \ref{fig:medcxt-sup} (b), viz. context $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$, the transcription results for class $c_n$, $T_{(=, \theta_n, \sqsupset, \ctx_{n-1})}(c_n)$, are summarised in \cref{tab:transcr_cn_ctxn_sup_b}.

\begin{table}[h]
  \centering
  \caption{Transcription results $T_{\ctx_n}(c_n)$ for case \ref{fig:medcxt-sup} (b), i.e., under context $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$.}
  \label{tab:transcr_cn_ctxn_sup_b}
  \begin{tabular}{cr@{, }l@{\hspace{10px}}lccccc}
    \toprule
    $c_n \vldtranscript{(\sqsupset, \theta_n, =, \ctx_{n-1})}$ &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9} 
    &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}}$ 
                        &amp; $\theta_{n-1}$ &amp; &amp; $\sqsubset$   &amp; $=$   &amp; $\sqsupset$ &amp; $\overlap$ &amp; $\disj$   \\  \cmidrule(r){2-3} \cmidrule{5-9} 
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$      &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; -               \\ 
    2 &amp; $c_{n-1}’$      &amp; $=$              &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; -          &amp; -               \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$      &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; -               \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$       &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; -          &amp; -               \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$          &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}

For this case there is no substantial difference whether context $\ctx_n$ is taken into account (\cref{tab:transcr_cn_ctxn_sup_b}) or not (\cref{tab:atomic-class-transcriptions}): For the columns where the original shortcomings occurred, i.e., $\theta_n \in \{\sqsupset, \overlap \}$, no transcription could be added. This is not surprising since the information that has been added into context $\ctx_n$, i.e., $c_n \sqsupset c_{n-1}$, does not constrain in any way correspondence $\mu = \tuple{c_n, c_{n-1}’, \theta_n}$. 

In conclusion, introducing new information brings about cases that *do* facilitate a valid transcription for $c_{n-1}$ where, originally, a valid transcription was not possible. Not for *all* cases, unfortunately. Let’s introduce a more constraining relation in the next section by excluding equivalence in context $\ctx_n$.

&lt;!-- Page definitions --&gt;
[def:MedcxtSup]: src\images\MedCxt-sup.png {#fig:medcxt-sup width=50%}

</Text>
        </Document>
        <Document ID="57">
            <Title>Transcribing over a disjoint class context</Title>
            <Text>![A correspondence over a \emph{disjoint class context}. Case (a): class $c_n’$ is disjoint with class $c_{n-1}’$; case (b): class $c_n$ is disjoint with class $c_{n-1}$. Both cases (a) and (b) build upon the valid transcription under context $\ctx_{n-1}$ as specified in \cref{tab:atomic-class-transcriptions}. Both cases include a new correspondence relation, $\theta_n$, that defines the correspondence between the new class $c_n’$ resp. $c_n$ and the original class $c_{n-1}$ resp. $c_{n-1}’$ that we introduced with an equivalent class $c_n$ resp. $c_n’$. The current context, $\ctx_n$, is defined for case (a) as $\ctx_n = \pair{\equiv, \theta_n, \disj, \ctx_{n-1}}$ and for case (b) as $\ctx_n = \pair{\disj, \theta_n, \ctx_{n-1}, \equiv}$][def:MedcxtDjt]

We will perform the same exercise as before: firstly, we transcribe $c_{n-1}$ under context $\ctx_n$, i.e., cases \ref{fig:medcxt-djt}(a) and (b), presented in \cref{tab:transcr_cn-1_ctxn_djt_a,tab:transcr_cn-1_ctxn_djt_b} respectively. Subsequently, we present the transcription of $c_n$ for case (b) in \cref{tab:transcr_cn_ctxn_djt_b}. 

\begin{table}[h]
  \centering
  \caption{Transcribing $c_{n-1}$ for case \ref{fig:medcxt-sub} (a), i.e., under context $\ctx_n = \pair{\ctx_{n-1}, \sqsubset, \theta_n}$.}
  \label{tab:transcr_cn-1_ctxn_djt_a}
  \begin{tabular}{cr@{, }l@{\hspace{10px}}lccccc}
    \toprule
    &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9} 
    &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}}$ 
                        &amp; $\theta_{n-1}$ &amp; &amp; $\sqsubset$ &amp; $\equiv$   &amp; $\sqsupset$ &amp; $\overlap$  &amp; $\disj$ \\  \cmidrule(r){2-3} \cmidrule{5-9} 
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$      &amp; &amp; $c_n’$      &amp; $c_n’$     &amp; $c_{n-1}’$  &amp; $c_{n-1}’$  &amp; $\neg c_n’ \sqcap c_{n-1}’$ \\ 
    2 &amp; $c_{n-1}’$      &amp; $\equiv$         &amp; &amp; -           &amp; -          &amp; $c_{n-1}’$  &amp; -           &amp; -                           \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$      &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; -           &amp; -                           \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$       &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; $\neg c_n’$                 \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$          &amp; &amp; -           &amp; -          &amp; -           &amp; -           &amp; $\neg c_{n-1}’$             \\ \cmidrule{2-9}
      &amp; \multicolumn{3}{r}{Concluding: $c_{n-1} \vldtranscript{\ctx_n}$} &amp; \multicolumn{5}{c}{} \\
    a &amp; \multicolumn{1}{r}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; $c_n’$      &amp; $c_n’$     &amp; $c_{n-1}’$  &amp; $c_{n-1}’$  &amp; $\neg c_n’ \sqcap c_{n-1}’$ \\ 
    b &amp; \multicolumn{1}{r}{$\ntsa_{n-1}$}  &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; $\ntsa_n$                   \\ \bottomrule
  \end{tabular}
\end{table}


\begin{table}[h]
  \centering
  \caption{Transcribing $c_{n-1}$ for case \ref{fig:medcxt-djt} (b), i.e., under context $\ctx_n = \pair{\disj, \ctx_{n-1}, \theta_n}$.}
  \label{tab:transcr_cn-1_ctxn_djt_b}
  \begin{tabular}{cr@{, }l@{\hspace{10px}}lccccc}
    \toprule
    &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9} 
    &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}}$ 
                        &amp; $\theta_{n-1}$ &amp; &amp; $\sqsubset$ &amp; $\equiv$   &amp; $\sqsupset$ &amp; $\overlap$  &amp; $\disj$ \\  \cmidrule(r){2-3} \cmidrule{5-9}
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$      &amp; &amp; $c_{n-1}’$  &amp; -          &amp; -           &amp; -           &amp; -               \\ 
    2 &amp; $c_{n-1}’$      &amp; $\equiv$         &amp; &amp; $c_{n-1}’$  &amp; -          &amp; -           &amp; -           &amp; -               \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$      &amp; &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; $\ntsa_n$       \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$       &amp; &amp; $\ntsa_n$   &amp; -          &amp; -           &amp; $\ntsa_n$   &amp; $\ntsa_n$       \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$          &amp; &amp; -           &amp; -          &amp; -           &amp; -           &amp; $\neg c_{n-1}’$ \\ \cmidrule{2-9}
      &amp; \multicolumn{3}{r}{Concluding: $c_{n-1} \vldtranscript{\ctx_n}$} &amp; \multicolumn{5}{c}{} \\
    a &amp; \multicolumn{1}{r}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; $c_{n-1}’$  &amp; -          &amp; -           &amp; -           &amp; $\neg c_{n-1}’$ \\ 
    b &amp; \multicolumn{1}{r}{$\ntsa_{n-1}$}  &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; $\ntsa_n$       \\ \bottomrule
  \end{tabular}
\end{table}

Let’s now consider the transcription for $c_n$ for case \ref{fig:medcxt-djt}(b), summarised in \cref{tab:transcr_cn_ctxn_djt_b}.

\begin{table}[h]
  \centering
  \caption{Transcribing $c_n$ for case \ref{fig:medcxt-djt} (b), i.e., under context $\ctx_n = \pair{\disj, \theta_n, =, \ctx_{n-1}}$. }
  \label{tab:transcr_cn_ctxn_djt_b}
  \begin{tabular}{cr@{, }l@{\hspace{10px}}lccccc}
    \toprule
    &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9} 
    &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}}$ 
                        &amp; $\theta_{n-1}$ &amp; &amp; $\sqsubset$ &amp; $\equiv$   &amp; $\sqsupset$ &amp; $\overlap$  &amp; $\disj$ \\  \cmidrule(r){2-3} \cmidrule{5-9}
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$      &amp; &amp; $c_{n-1}’$  &amp; -          &amp; -           &amp; -           &amp; -               \\ 
    2 &amp; $c_{n-1}’$      &amp; $\equiv$         &amp; &amp; $c_{n-1}’$  &amp; -          &amp; -           &amp; -           &amp; -               \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$      &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; $\neg c_{n-1}’$ \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$       &amp; &amp; $c_{n-1}’$  &amp; -          &amp; -           &amp; $\ntsa_n$   &amp; $\neg c_{n-1}’$ \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$          &amp; &amp; -           &amp; -          &amp; -           &amp; -           &amp; $\neg c_{n-1}’$ \\ \cmidrule{2-9}
      &amp; \multicolumn{3}{r}{Concluding: $c_n \vldtranscript{\ctx_n}$} &amp; \multicolumn{5}{c}{} \\
    a &amp; \multicolumn{1}{r}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; $c_{n-1}’$  &amp; -          &amp; -           &amp; -           &amp; $\neg c_{n-1}’$ \\ 
    b &amp; \multicolumn{1}{r}{$\ntsa_{n-1}$}  &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}

&lt;!-- Page definitions --&gt;
[def:MedcxtDjt]: src\images\MedCxt-equ-theta-subinc-djt.png {#fig:medcxt-djt width=50%}</Text>
        </Document>
        <Document ID="58">
            <Title>Summary</Title>
            <Synopsis>Show that the tables can be rewritten as rules; this is necessary for the conditional part of the cTRS in the following section.

\end{synopsis}</Synopsis>
            <Text>\begin{table}[h]
  \centering
  \caption{Transcribing $c_{n-1}$ for case \ref{fig:medcxt-sup} (a), i.e., under context $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$. The table presents (i) the valid transcriptum, or (ii) the absence of a valid transcription under context $\ctx_n$, denoted as $\ntsa_n$, or (iii) a logical contradiction in the context and therefore not applicable, denoted by `-`.}
  \label{tab:transcr_}
  \begin{tabular}{cc@{\hspace{4px}}c@{\hspace{5px}}lccccc}
    \toprule
    $c_{n-1} \vldtranscript{( =, \theta_n, \sqsupset, \ctx_{n-1})}$ &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    &amp; \multicolumn{1}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; \multicolumn{1}{c}{$\theta_{n-1}$}
                                           &amp; &amp; $\sqsubset$ &amp; $=$ &amp; $\sqsupset$ &amp; $\overlap$  &amp; $\disj$    \\  \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule{5-9}
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$      &amp; &amp; $c_{n-1}’$  &amp; -        &amp; -           &amp; -           &amp; -               \\ 
    2 &amp; $c_{n-1}’$      &amp; $=$         &amp; &amp; $c_{n-1}’$  &amp; -        &amp; -           &amp; -           &amp; -               \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$      &amp; &amp; $c_n’$      &amp; $c_n’$   &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; -               \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$       &amp; &amp; $c_n’$      &amp; -        &amp; -           &amp; $\ntsa_n$   &amp; -               \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$          &amp; &amp; $c_n’ \sqcap \neg c_{n-1}’$ \rmk{seq}
                                                           &amp; -        &amp; -           &amp; $\neg c_{n-1}’$ \rmk{inh1}
                                                                                                  &amp; $\neg c_{n-1}’$ \\ \cmidrule{2-9}
      &amp; \multicolumn{2}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; &amp; \multicolumn{5}{c}{$c_{n-1} \vldtranscript{\ctx_n}$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
   s1 &amp; \multicolumn{2}{c}{$\ntsa_{n-1}$}
                                           &amp; &amp; $c_n’$      &amp; $c_n’$   &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; -               \\
   s2 &amp; \multicolumn{2}{c}{otherwise}
                                           &amp; &amp; $c_n’ \sqcap c_n \vldtranscript{\ctx_{n-1}}$ \rmk{ind} 
                                                           &amp; -        &amp; -           &amp; $\neg c_{n-1}’$ &amp; $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}

\begin{table}[h]
  \centering
  \caption{Transcribing $c_{n-1}$ for case \ref{fig:medcxt-sup} (b), i.e., under context $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$. Again, the table presents (i) the valid transcriptum, or (ii) the absence of a valid transcription under context $\ctx_n$, denoted as $\ntsa_{\ctx_n}$, or (iii) a logical contradiction in the context and therefore not applicable, denoted by `-`.}
  \label{tab:transcr_}
  \begin{tabular}{cr@{, }l@{\hspace{5px}}lccccc}
    \toprule
    $c_{n-1} \vldtranscript{(\sqsupset, \theta_n, =, \ctx_{n-1})}$ &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}}$ 
                        &amp; $\theta_{n-1}$  &amp; &amp; $\sqsubset$   &amp; $=$   &amp; $\sqsupset$ &amp; $\overlap$  &amp; $\disj$  \\ \cmidrule(r){2-3} \cmidrule{5-9}
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$       &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $c_{n-1}’$ \rmk{inh2}
                                                                                       &amp; $c_{n-1}’$ \rmk{inh2} &amp; - \\ 
    2 &amp; $c_{n-1}’$      &amp; $=$          &amp; &amp; -           &amp; -          &amp; $c_{n-1}’$ \rmk{inh2} &amp; -  &amp; -         \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$       &amp; &amp; -           &amp; -          &amp; $c_n \vldtranscript{\ctx_n}$ \rmk{anc}
                                                                                       &amp; -           &amp; -         \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$        &amp; &amp; -           &amp; -          &amp; $c_n \vldtranscript{\ctx_n}$ \rmk{anc}
                                                                                       &amp; $\ntsa_n$   &amp; -         \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$           &amp; &amp; -           &amp; -          &amp; $\neg c_{n-1}’ \sqcap c_n \vldtranscript{\ctx_n}$ \rmk{anc}
                                                                                       &amp; $\neg c_{n-1}’$ \rmk{inh2}
                                                                                                     &amp; $\neg c_{n-1}’$ \\ \cmidrule{2-9}
      &amp; \multicolumn{3}{r}{Concluding: $c_{n-1} \vldtranscript{\ctx_n}$} &amp; \multicolumn{5}{c}{} \\
    a &amp; \multicolumn{1}{r}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; \multicolumn{1}{c}{}
                                            &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}} \sqcap c_n \vldtranscript{\ctx_n}$ \rmk{ind2} 
                                                                                       &amp; $c_{n-1}’$  &amp; $\neg c_{n-1}’$  \\ 
    b &amp; \multicolumn{1}{r}{$\ntsa_{n-1}$}  &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$   &amp; -               \\ \bottomrule
  \end{tabular}
\end{table}


\begin{mmrmk}\label{rmk:ind}
Since correspondence $\mu_n = \tuple{c_{n-1}, c_n’, \sqsubset}$ does not produce an invalid context $\ctx_n$, conform \cref{tab:atomic-class-transcriptions} it provides for a valid transcription $c_{n-1} \vldtranscript{\sqsubset} c_n’$. Simultaneously, transcription $c_{n-1} \vldtranscript{\ctx_{n-1}}$ is deemed to be valid as well because that is the presupposition for row (b). Both valid transcriptions can therefore be combined into the presented double constraint. Verification: When applied to row (5), its value ensues straightforwardly; when applied to rows (1) and (2) it follows that $c_{n-1} \vldtranscript{\ctx_n} c_{n-1}’ \sqcap c_n’$, and since $c_{n-1}’ \sqsubset c_n’$, this combines into $c_{n-1}’$. 
\end{mmrmk}
\begin{mmrmk}\label{rmk:ind2}
Since correspondence $\mu_n = \tuple{c_{n-1}, c_n’, \sqsupset}$ does not produce a valid transcription under $\theta_n$, context $\ctx_n$ is considered in order to take the transcription under context $\ctx_{n-1}$ into account. Whenever transcribendum $c_{n-1}$ has been given a transcriptum under context $\ctx_{n-1}$, this will be taken as result for the transcription under context $\ctx_n$. Whenever transcribendum $c_n$ can be transcribed under any future context $\ctx{}$, $c_{n-1}$ can be transcribed identically under the current context $\ctx_n$ as well due to the subjective equivalence pattern. Verification: When applied to row (5), its value ensues straightforwardly; when applied to rows (3) and (4), since no transcription under context $\ctx_{n-1}$ exists, its transcription must rely on the transcription of $c_n$ under any future context $\ctx_n$. 
\end{mmrmk}

The last two rows, (s1) and (s2), of \cref{tab:transcr_cn-1_ctxn_sup_a}, summarise the 5 rows above and express semantic equivalence. This can be formulated as:

\begin{equation}\label{eq:class_identity_cn-1_ctxn_sup_a}
  T_{( =, \theta_n, \sqsupset, \ctx_{n-1})}(c_{n-1}) \; = \; 
  \begin{cases}
    c_n’ \sqcap c_{n-1}’ \vldtranscript{\ctx_{n-1}} 
                                       &amp; : \theta_{n-1} \in \set{\sqsubset, =, \bot} \land \theta_n = \sqsubset \\
    \neg c_{n-1}’                      &amp; : \theta_{n-1} \in \set{\sqsubset, =, \bot} \land \theta_n \in \set{\overlap, \bot} \\
    c_n’                               &amp; : \theta_{n-1} \in \set{\sqsupset, \overlap} \land \theta_n \in \set{\sqsubset, =} \\
    \ntsa_n                            &amp; : \theta_{n-1} \in \set{\sqsupset, \overlap} \land \theta_n \in \set{\sqsupset, \overlap} \\
    -                                  &amp; : \text{ otherwise.}
  \end{cases}
\end{equation}



\begin{table}[h]
  \centering
  \caption{Transcribing $c_n$ for case \ref{fig:medcxt-sup} (b), i.e., under context $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$. Again, the table presents (i) its transcriptum, or (ii) the absence of a valid transcription under context $\ctx_n$, denoted as $\ntsa_{\ctx_n}$, or (iii) a logical contradiction in the context and therefore not applicable, denoted by `-`.}
  \label{tab:transcr_}
  \begin{tabular}{cr@{, }l@{\hspace{10px}}lccccc}
    \toprule
    $c_n \vldtranscript{(\sqsupset, \theta_n, =, \ctx_{n-1})}$ &amp; \multicolumn{2}{c}{Context $\ctx_{n-1}$} &amp; &amp; \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9} 
    &amp; $c_{n-1} \vldtranscript{\ctx_{n-1}}$ 
                        &amp; $\theta_{n-1}$ &amp; &amp; $\sqsubset$   &amp; $=$   &amp; $\sqsupset$ &amp; $\overlap$ &amp; $\disj$   \\  \cmidrule(r){2-3} \cmidrule{5-9} 
    1 &amp; $c_{n-1}’$      &amp; $\sqsubset$      &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; -               \\ 
    2 &amp; $c_{n-1}’$      &amp; $=$         &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; -          &amp; -               \\ 
    3 &amp; $\ntsa_{n-1}$   &amp; $\sqsupset$      &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; -               \\ 
    4 &amp; $\ntsa_{n-1}$   &amp; $\overlap$       &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; -          &amp; -               \\ 
    5 &amp; $\neg c_{n-1}’$ &amp; $\disj$          &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; $\neg c_{n-1}’$ \\ \cmidrule{2-9}
      &amp; \multicolumn{3}{r}{Concluding: $c_n \vldtranscript{\ctx_n}$} &amp; \multicolumn{5}{c}{} \\
    a &amp; \multicolumn{1}{r}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; $c_{n-1}’$  &amp; $c_{n-1}’$ &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; $\neg c_{n-1}’$ \\ 
    b &amp; \multicolumn{1}{r}{$\ntsa_{n-1}$}  &amp; \multicolumn{1}{c}{}
                                           &amp; &amp; -           &amp; -          &amp; $\ntsa_n$   &amp; $\ntsa_n$  &amp; -               \\ \bottomrule
  \end{tabular}
\end{table}


</Text>
        </Document>
        <Document ID="59">
            <Title>Transcription as cTRS</Title>
            <Synopsis>Show how the characteristics of a transcription map to what characteristics of a cTRS.

Define a trancription in terms of a cTRS.

\end{synopsis}</Synopsis>
            <Text>We consider a transcription a specific application of conditional term rewriting systems. The following table shows how the characteristics of a transcription can be turned into requirements for the cTRS.

--------------------------------------------------------------------------------------------------------------------------------
Characteristic of a transcription                     Aspect of a CTRS
----------------------------------------------------- --------------------------------------------------------------------------
A transcription is a syntactic replacement of terms   A TRS rewrites terms over a specific alphabet, and is oriented towards 
and values.                                           syntax only.

A transcription transcribes between two distinct      Show that each normal form for the particular TRS belongs to $\ont{O}’$.
alphabets.

Every transcription should terminate.                 Show that for the particular CTRS the termination property holds.

Despite the strategy used about which correspondence  Show that for the particular CTRS the confluence property holds.
to apply first during transcribing a theory, every    
strategy should yield the same transcription result.

A transcription should not introduce phantom          Since the validity of a transcription depends on the context 
semantics, i.e., only valid transcriptions should be  $\pair{r, \theta_n, r’, \ctx_{n-1}}$ from the transcription model 
allowed for correspondences that apply.               (\cref{fig:prov-class-transc-model}), any rewrite rule that follows from
                                                      a correspondence $\mu = \tuple{e, e’, \theta_n}$ should be guarded by a 
                                                      condition $\Gamma$ that implements the transcription context.
--------------------------------------------------------------------------------------------------------------------------------

   : Requirements for implementing transcriptions as conditional term rewriting systems.



What is left to do is to proof that for $\sigma(c_n) \, \vldtranscript{\ctx_n} \, \sigma(t_n’)$:

1. $t_n’$ is ground normal form with respect to the unconditional system, and
1. $c_n \trsrtc t_n’$


We have already formulated, in many tables, the transcription rules to apply in terms of the context $\pair{r, \theta_n, r’, \ctx_{n-1}}$ that comes about the inductive transcription model. This Section determines how such context can be specified as the conditional rewrite relation from \cref{def:conditional-rewrite-relation}. The purpose of the rewrite relation is to provide for a transcription between a transcriptum from $\ont{O}$ to a transcribendum from $\ont{O’}$. In other words, the rewrite rule will rewrite according to the specified correspondence $\mu = \tuple{c, c’, \theta}$. The unconditional rewrite relation $\to_{\rho_0}$ for any transcription stem from \cref{tab:atomic-class-transcriptions}, therefore, read as follows:
\begin{alignat}{2}
  \rho_{0,1}   &amp;: \; c_n \sqsubset c_n’ &amp;&amp;\to \; c_n’ \\
  \rho_{0,2}   &amp;: \; c_n \equiv c_n’    &amp;&amp;\to \; c_n’ \\
  \rho_{0,3}   &amp;: \; c_n \sqsupset c_n’ &amp;&amp;\to \; \ntsa_n \\
  \rho_{0,4}   &amp;: \; c_n \overlap c_n’  &amp;&amp;\to \; \ntsa_n \\
  \rho_{0,5}   &amp;: \; c_n \disj c_n’     &amp;&amp;\to \; \neg c_n’ 
\end{alignat}

It is clear that these unconditional rewrite rules do not induce phantom semantics.

For the conditional rewrite rules, we will use the example from Case \ref{fig:medcxt-sup}(a). The transcription context $\pair{r, \theta_n, r’, \ctx_{n-1}}$ for this case reads $\ctx_n = \pair{\equiv, \theta_n, \sqsupset, \ctx_{n-1}}$. Note that in the context of CTRS we will write that $\to_{n+1}$ is expressed in terms of $\to_n$, as opposed to the transcription context where $\ctx_n$ is expressed in terms of $\ctx_{n-1}$. 

\begin{alignat}{5}
  \rho_{n+1,1} &amp;: \quad c_{n+1} \sqsubset c_{n+1}’ &amp;&amp;\to \; c_{n+1}’  &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \ntsa_n \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \label{eq:transcription-rho1}\\
  \rho_{n+1,2} &amp;: \quad c_{n+1} \equiv c_{n+1}’    &amp;&amp;\to \; c_{n+1}’  &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \ntsa_n \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \; \land \;
    \theta_n = \, \sqsupset  \\
  \rho_{n+1,3} &amp;: \quad c_{n+1} \overlap c_{n+1}’  &amp;&amp;\to \; \neg c_n’ &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \neg c_n’ \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \\
  \rho_{n+1,4} &amp;: \quad c_{n+1} \disj c_{n+1}’     &amp;&amp;\to \; \neg c_n’ &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \neg c_n’ \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \\
  \rho_{n+1,5} &amp;: \quad c_{n+1} \sqsubset c_{n+1}’ &amp;&amp;\to \; c_n’ &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \neg c_n’ \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \\
  \rho_{n+1,6} &amp;: \quad c_{n+1} \sqsubset c_{n+1}’ &amp;&amp;\to \; c_{n+1}’ \sqcap \neg c_n’ &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \neg c_n’ \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \\
  \rho_{n+1,7} &amp;: \quad c_{n+1} \overlap c_{n+1}’  &amp;&amp;\to \; \ntsa_{n+1} &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \ntsa_n \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \\
  \rho_{n+1,8} &amp;: \quad c_{n+1} \sqsupset c_{n+1}’ &amp;&amp;\to \; \ntsa_{n+1} &amp;\quad \text{if} \quad 
    c_n \,   &amp;\to_n \, \ntsa_n \; &amp;\land \;
    r_{n+1}  &amp;= \, \equiv \; &amp;\land \;
    r_{n+1}’ &amp;= \, \sqsupset \label{eq:transcription-rho8}  
\end{alignat}

We explain equations \crefrange{eq:transcription-rho1}{eq:transcription-rho8} collectively with the following generic pattern:

1. The (conditional) rewrite rules $\rho_{n+1}$, too, will apply the correspondence $\mu_{n+1} = \tuple{c_{n+1}, c_{n+1}’, \theta_{n+1}}$. This means that each correspondence will be reflected in a (conditional) rewrite rule; the rule’s LHS will reflect the transcriptum, whilst its RHS will reflect the transcribendum;
1. Following \cref{def:conditional-rewrite-relation}, the conditional rewrite rules are defined inductively, meaning that the condition $\Gamma$ should express elements from a lower hierarchy. This demand matches nicely with the inductive definition for the transcription model. The condition $\Gamma_n$ for the rewrite rule $\rho_{n+1}$ primarily applies the valid transcription from the lower hierarchical level, viz. $\vldtranscript{\ctx_n}$; 
1. Finally, as indicated in \cref{def:conditions-in-ctrs}, the condition $\Gamma$ may also express fixed predicates. For Case \ref{fig:medcxt-sup}(a), its transcription context reads $\ctx_n = \pair{\equiv, \theta_n, \sqsupset, \ctx_{n-1}}$. The terms $\theta_n$ and $\ctx_{n-1}$ have already be addressed in the previous two parts of this pattern, leaving terms $r_{n+1} = \equiv$ and $r_{n+1}’ = \sqsupset$. Although these terms are defined on hierarchical level $n+1$, they are not dependent on any rewriting and can therefore be considered fixed propositions that can be added to the condition.  

From this explanation it becomes clear that we can define the conditional part of a transcription as follows:
\begin{mmdef}[Transcription]\label{def:transcription}
  \begin{alignat}{5}
    \rho_{n+1} &amp;: \quad \sigma\pair{c_{n+1} \theta_{n+1} c_{n+1}’} &amp;&amp;\to \; \sigma(t_{n+1}’)  &amp;\quad \text{if} \quad 
      \sigma(c_n) \,   &amp;\vldtranscript{\ctx_n} \, \sigma(t_n’) \; &amp;\land \;
      r_{n+1}  &amp;= \, r  \; &amp;\land \;
      r_{n+1}’ &amp;= \, r’ \; \land \;
      \theta_n = \, \theta  
  \end{alignat}
where $t_k’$ denotes the transcribendum that follows from the table that specifies the valid transcriptions for transcription context $\ctx_{k+1} = \pair{r, \theta_{k+1}, r’, \ctx_k}$.
\end{mmdef}
</Text>
        </Document>
        <Document ID="60">
            <Title>(conditional) Term Rewriting Systems</Title>
            <Synopsis>Provide for a short primer on term rewriting; be sure to include references to the basic literature.

Keep it short. This is not about explaining but about showing the terminology that we are to use.

\end{synopsis}</Synopsis>
            <Text>We will first define some terminology that is used in the definition on a term rewriting system (TRS). This is basic material taken from [@Baader1998; and @Bezem2003]. We finish this section with a notion on the use of context $\ctx_n$ in a conditional term rewriting system (cTRS).

\begin{mmdef}[Terms]\label{def:terms}
Consider a signature $\Sigma$ of admitted symbols, and a countable, possibly infinite set of \emph{variables} $V$ with $V \cap \Sigma = \; \emptyset$. The set of \emph{terms} over $\Sigma$, denoted as $T(\Sigma, V)$, contains strings over $\Sigma \cup V$. More specifically:
\begin{align*}
  \Sigma^0    &amp;= \; \text{denotes the set of functions with arity 0, i.e., atomic constant symbols,} \\
  \Sigma^n    &amp;= \; \set{f^n}, n \geq 1, \text{ denotes the set of $n$-ary functions, and}\\
  V           &amp;= \; \set{x_i \; | \; 0 \geq i \geq n}, \text{ denotes the set of variables $x_i$.} 
\end{align*}
Then, the set of terms $T(\Sigma, V)$ is defined inductively as:
\begin{align}
  \forall x_i \in V      \; &amp;: \; x_i \in T(\Sigma, V) \\
  \forall a \in \Sigma^0 \; &amp;: \; a \in T(\Sigma, V) \\
  \forall f \in \Sigma^n \; &amp;: \; t_1, \ldots, t_n \in T(\Sigma, V) \; \Rightarrow \; f(t_1, \ldots, t_n) \in T(\Sigma, V) 
\end{align}
\end{mmdef}

Furthermore:
\begin{itemize}[label={--}]
  \item $\var(t) \subseteq V$ denotes the set of variables that occur in term $t$
  \item A term $t$ is called a \emph{closed term}, or \emph{ground}, if it does not contain variables, i.e., when $\var(t) = \emptyset$. The set of closed terms are collectively denoted as $T_0(\Sigma, V)$, or $T(\Sigma, \emptyset)$, or simply $T(\Sigma)$. 
  \item $|t|$ denotes the \emph{length} of term $t$, i.e., 
  \begin{itemize}[label={-}]
    \item $x_i \in V, \; a \in \Sigma^0: \; |x_i| = |a| = 1$, and
    \item $|f^n(t_1, \ldots, t_n)| = |t_1| + \ldots |t_n| + 1$
  \end{itemize} 
\end{itemize}

\begin{mmdef}[$\Sigma$-identity]\label{def:sigma-identity}
A \emph{$\Sigma$-identity}, or simply an \emph{identity}, is a pair of terms $\pair{s, t} \in T(\Sigma, V) \times T(\Sigma, V)$, denoted as $s \approx t$, expressing an \emph{a priori} equality between both terms. We call $s$ the left-hand side (lhs) and $t$ the right-hand side (rhs) of the identity $s \approx t$.
\end{mmdef}

&gt;The term *identity* is used for a pair $s \approx t$ to express that the equality between $s$ and $t$ holds *a-priori*, distinguishing it from the term *equation* that is used to express that the equality must be *solved* or *proven*.
 
\begin{mmdef}[Rewrite rule]\label{def:rewrite-rule}
A \emph{term rewriting rule} is a pair of terms $l, r \in T(\Sigma, V)$, such that:
\begin{align}
  l       &amp;\not\in V         \label{eq:distinctness} \\
  \var(l) &amp;\supseteq \var(r) \label{eq:novarintro} 
\end{align}
Then, we denote $l \to r$ to indicate that $l$ can be replaced by $r$. A rewrite rule can be given a name, e.g., $\rho$, and we write $\rho : l \to r$.
\end{mmdef}

&gt;Since a rewrite rule is directed, the second restriction (\ref{eq:novarintro}) is necessary to avoid the pathological case where variables are introduced by the process of rewriting. The first restriction (\ref{eq:distinctness}) assures that rewriting and variable substitution remain distinct.
\begin{mmdef}[Term rewriting]\label{def:term-rewriting}
Consider a signature $\Sigma$ and a set of variables $V$ disjoint from $\Sigma$. Assume terms $s, t \in T(\Sigma, V)$, represented as a term tree (\cref{def:term-tree}).

A rewrite rule $\rho : l \to r$ can be \emph{applied} to a term $s$ iff $\exists p \in \pos(s): s|_p \equiv \sigma(l)$:
\begin{align}
  s|_p         &amp;: \; \text{denotes a subterm of $s$ that starts at position $p$ in $s$} \nonumber \\
  \sigma(l)    &amp;: \; \text{denotes the result obtained by applying the variable substitution $\sigma$ to the term $l$} \nonumber 
\intertext{The \emph{result} term $t$ of applying a rewrite rule $\rho$ to a term $s$ is obtained as $t \equiv s[\sigma(r)]_p$:} 
  s[ \cdot ]_p &amp;: \; \text{denotes a replacement of the subterm of $s$ that starts at position $p$ in $s$} \nonumber \\
\intertext{Then, a \emph{one-step rewrite} from $s$ to $t$ by $\rho$ is defined as: }
  s \to_\rho t &amp;: \; s|_p \equiv \sigma(l) \to_\rho s[\sigma(r)]_p \equiv t 
\end{align}
\end{mmdef}

\begin{mmdef}[Term rewriting system]\label{def:TRS}
A \emph{term rewriting system} (TRS) is an ARS with $\EuScript{R} = \pair{\Sigma, R}$, where:
\begin{itemize}[label={--}]
  \item $\Sigma$, the set of objects, denoting a signature according to \cref{def:signature}, and 
  \item $R$ denotes a set of rewrite rules according to \cref{def:rewrite-rule}. 
\end{itemize} 
\end{mmdef}

&gt;Consequently, a TRS is a combination of set of terms (\cref{def:terms}), which can be represented as a term tree (\cref{def:term-tree}), with a set of rewrite rules (\cref{def:rewrite-rule}).
 
The following provides for a list of the more relevant properties of an ARS:

1. **Termination**: If it is always the case that after applying a finite number of rewriting steps some object is reached for which no more rules apply, the ARS is called *terminating*.
1. **Normalising**: If an object $o$ can be rewritten into an object $o’$ for which no more rules apply, such final object is called the *normal form*. If $o’$ is the unique normal form of $o$, then this is denoted as $\unf{o}$. If every object $o \in A$ has a normal form, the ARS is called *normalising*.
1. **Confluence**: Assume that object $o$ can be rewritten to $o_1$ as well as $o_2$ by application of different rules from $\set{ \to }$. Then, if we can always find an object $o’$ that is a successor of $o_1$ as well as $o_2$, this implies that rewriting of $o$ always leads to $o’$, independent of the strategy for applying rules. This confluence property of an ARS is a very favourable property, since it simplifies the rewriting process significantly.
1. **Convergence**: An ARS is called *convergent* if it is both terminating and confluent.

In order to apply a TRS as foundation for semantic mediation, we need to introduce the notion of *context* in a TRS, defined as follows.

\begin{mmdef}[Term context]\label{def:term-context}
Consider a term $C$ over an extended signature $\Sigma \cup \set{\Box}$, where the constant symbol $\Box$, called a hole, represents an empty position in a term. Such hole can be replaced with a term $t \in T(\Sigma, V)$. The term $C \in T(\Sigma \cup \set{\Box}, V)$, consisting of $n$ holes ($n \geq 0$) is called a \emph{term context}, or simply \emph{context} if no confusion arises. The special case where $n = 1$ is called an \emph{one-hole context} and denoted by $C[\;]$. On replacing the $n$ holes from $C$ with terms $t_1, \ldots, t_n \in T(\Sigma, V)$, the resulting term is denoted as $C[t_1, \ldots, t_n]$. 
\end{mmdef}</Text>
        </Document>
    </Documents>
</SearchIndexes>
