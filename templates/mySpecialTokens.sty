\ProvidesPackage{mySpecialTokens}[2019/02/15 package mySpecialTokens]	% Tokens for modal logic, formal semantics and term rewriting
\RequirePackage[utf8]{inputenc}		% NOT required when using xetex as opposed to pdftex
\RequirePackage[T1]{fontenc}
\RequirePackage{amsmath}				% <amsthm> conflicts with <ntheorem> package (section 3.2.2 ftp://ftp.dante.de/pub/tex/macros/latex/contrib/ntheorem/ntheorem.pdf); 
                                        % Instead, the [amsthm] option is used with <ntheorem> 
\RequirePackage[ntheorem]{mathtools}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Modal logic operators

%\DeclareUnicodeCharacter{25C7}{\wdiamant}		% White diamond, "it is possible that"
%\DeclareUnicodeCharacter{25FB}{\wvierkant}		% White square, "it is necessarily so that"
 
\catcode`\^^c7=\active
\catcode`\^^fb=\active
\let^^c7=\wdiamant								% White diamond, "it is possible that"
\let^^fb=\wvierkant								% White square, "it is necessarily so that"

% Math domains
\def\domB{%
  \mathbb{B}
}
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Charactersfor FormalSemantics.
% Method is by superimposing two other characters, see: http://tex.stackexchange.com/questions/148051/how-do-you-make-a-square-element-symbol-in-to-show-that-an-element-belongs-t
% First, create a normalisation macro to ensure no math (i.e., $) is present in a variable; in this case it is substituted by \MyNormi that throws away the two $, otherwise it does nothing.
\makeatletter
\def\MyNorm{\@ifnextchar$\MyNormi{}}
\def\MyNormi$#1${#1}
\makeatother
 
% Second, create its reverse to ensure math mode
\newcommand*{\MyMath}[1]{%
  \ifmmode{#1}\else{\ensuremath{#1}}\fi%
}
 
% Third, create macro to enforce text mode
\newcommand*{\MyTMode}[1]{%
  \ifmmode{\text{#1}}\else{#1}\fi%
}
  
\usepackage{stackengine}
\def\eqdef{\mathrel{\ensurestackMath{\stackon[1pt]{=}{\scriptscriptstyle\Delta}}}}

 
% Interpretation: A consistent character for the Interpretation function I
\def\intn{%
  \CMcal{I}%
}
 
% Subjectivation: A consistent typesetting for the Subjectivation function I
\def\sbjn{%
  \intl{I}%
}
 
% Intentional: A consistent typesetting for denoting intentional concepts
\def\intl#1{%
 \mathfrak{#1}%
}
 
% Ontology: A consistent typesetting for denoting an ontology
\def\ont#1{%
 \ifmmode\EuScript{#1}\else{\ensuremath{\EuScript{#1}}}\fi%
}
 
% Representation: A consistent typesetting for denoting tokens
\def\token#1{%
 \texttt{#1}%
}

% Representation: A consistent typesetting for denoting concepts
\def\concept#1{%
 \ifmmode\EuScript{#1}\else{\ensuremath{\EuScript{#1}}}\fi%
}

% Disjoint, simply the \bottom character:
\def\disj{%
 \bot%
}
% Overlap, simply the \between character:
\def\overlap{%
 \between%
}
 
% Context: A consistent typesetting for denoting transcription context
\def\ctx{%
 \MyMath{\chi}%
}
 
% TRS context hole: reusing the modal logic operatorname
\def\hole{%
 \wvierkant%
}
 
% Math operators
\DeclareMathOperator{\dom}{dom}
\DeclareMathOperator{\rng}{rng}
\DeclareMathOperator{\sub}{\CMcal{S}ub}						% TRS set of all variabe substitutions
\DeclareMathOperator{\pos}{\CMcal{P}os}						% TRS position of subterm in term
\DeclareMathOperator{\var}{\CMcal{V}\mathnormal{ar}}		% TRS Variables in term
\DeclareMathOperator{\ter}{\CMcal{T}}						% TRS terms
\DeclareMathOperator{\mter}{\prescript{}{m}{\ter}}			% TRS mediation terms
%\DeclareMathOperator{\mter}{\CMcal{M}}						% TRS mediation terms

 
% Define the square element-of character, as a superimpose of \sqsubset and - . See: http://tex.stackexchange.com/questions/148051/how-do-you-make-a-square-element-symbol-in-to-show-that-an-element-belongs-t
% Square element-of (\sqin) character, as a superimpose of \sqsubset and - .
\newcommand{\sqin}{%
  \mathrel{\vphantom{\sqsubset}\text{%
    \mathsurround=0pt
    \ooalign{{\small\raisebox{0.1ex}{$\sqsubset$}}\cr--\cr}%
  }}%
}
 
% Square contains (\sqni) character, as a superimpose of \sqsupset and - .
\newcommand{\sqni}{%
  \mathrel{\vphantom{\sqsupset}\text{%
    \mathsurround=0pt
    \ooalign{{\small\raisebox{0.1ex}{$\sqsupset$}}\cr\hfill--\cr}%
  }}%
}
 
% Apartness-relation character, as a superimpose of = and twice /. See https://en.wikipedia.org/wiki/Apartness_relation
\newcommand{\apart}{%
%  \mathrel{\vphantom{=}\text{%
%    \mathsurround=0pt
%    \ooalign{$=$\cr$\,\parallel$\cr}%
%  }}%
    \#
}
 
% Square not subset (\nsqsubset) character, as a superimpose of \sqsubset and / .
\newcommand{\nsqsubset}{%
  \mathrel{\vphantom{\sqsubset}\text{%
    \mathsurround=0pt
    \ooalign{$\sqsubset$\cr$/$\cr}%
  }}%
}
 
% Disjoint & complete (\disjointcompl, or, \displete) character, as a superimpose of \bot and = .
% From https://tex.stackexchange.com/questions/471050/incomplete-iffalse-in-caption-but-correct-in-regular-text-wheres-the-if
\DeclareRobustCommand{\disjointcompl}{%
  \mathrel{\text{%
    \mathsurround=0pt
    \vtop{\offinterlineskip
      \ialign{##\cr
        $\bot$\cr
        \noalign{\kern-0.1ex}
        $=$\cr
      }
    }%
  }}%
}
%\newcommand{\disjointcompl}{%        This OLD VERSION makes it a fragile command, that has to be prefixed by \protect if used in a moving argument (caption or section title).
%  \mathrel{\vphantom{=}\text{%
%    \mathsurround=0pt%
%    \ooalign{$\bot$\cr\raisebox{-0.89ex}{$=$}\cr}%
%    \ooalign{$\bot$\cr{\small\raisebox{0.1ex}{c}}\cr}%
%  }}%
%}
\def\displete{%
 \disjointcompl%
}
 
% Not disjoint (\ndisjoint) character, as a superimpose of \bot and / .
\DeclareRobustCommand{\ndisjoint}{%
  \mathrel{\vphantom{\bot}\text{%
    \mathsurround=0pt%
    \ooalign{$\bot$\cr\hidewidth$/$\hidewidth\cr}%
  }}%
}
% Disjoint & incomplete (\disjoinc) character, as a superimpose of \disjointcompl and a small / .
\DeclareRobustCommand{\disjoinc}{%
  \mathrel{\vphantom{=}\text{%
    \mathsurround=0pt%
%    \ooalign{$\mid$\cr$\neq$\cr}%
    \ooalign{$\disjointcompl$\cr\hidewidth{\tiny\raisebox{-0.9ex}{$\diagup$}}\hidewidth\cr}%
  }}%
}
 
% Overlap & complete (\overlete) character, as a superimpose of \overlap and = .
\DeclareRobustCommand{\overlete}{%
  \mathrel{\vphantom{=}{%
    \mathsurround=0pt%
%   \raisebox{-0.9ex}{\ensurestackMath{\stackon[0.1pt]{=}{\small\overlap}}}
    \raisebox{-0.9ex}{\ensurestackMath{\stackon[0.1pt]{=}{\scalebox{.7}{$\overlap$}}}}
%    \ooalign{\hidewidth\small\raisebox{0.1ex}{$\overlap$}\hidewidth\cr\raisebox{-0.89ex}{$=$}\cr}%
%    \ooalign{$\bot$\cr{\small\raisebox{0.1ex}{c}}\cr}%
  }}%
}
 
% Overlap & incomplete (\overlinc) character, as a superimpose of \overlete and a small / .
\DeclareRobustCommand{\overlinc}{%
  \mathrel{\vphantom{\overlete}\text{%
    \mathsurround=0pt%
%    \ooalign{$\mid$\cr$\neq$\cr}%
    \ooalign{$\overlete$\cr\hidewidth{\tiny\raisebox{-0.9ex}{$\diagup$}}\hidewidth\cr}%
  }}%
}
 

 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Custom handy macros
\newcommand{\tuple}[1]{\ensuremath{ \langle \, #1 \, \rangle }}     % Encloses arguments by pair of auto-sized angles
\newcommand{\pair}[1]{\ensuremath{ \left( \, #1 \, \right) }}       % Encloses arguments by pair of auto-sized parenthesis
\newcommand{\set}[1]{\ensuremath{ \left\{ \, #1 \, \right\} }}      % Encloses arguments by pair of auto-sized curly braces
\newcommand{\rmk}[1]{\textsuperscript{\ref{rmk:#1} }}               % Creates a superscript reference to a custom \label{rmk:<argument>}
 
% Raised Rule Command:
%  Arg 1 (Optional) - How high to raise the rule
%  Arg 2            - Thickness of the rule
\newcommand{\raisedrule}[2][0em]{\leaders\hbox{\rule[#1]{1pt}{#2}}\hfill}
% Phantom semantics (\myPh) character, mimicing uppercase Ä¦ as a superimpose of H and \raisedrule .
\def\myPh{{%
    \setbox0\hbox{\textsf{\textup{H}}}%
    \rlap{\hbox to \wd0{\raisedrule[1.3ex]{0.5pt}}}\box0%
}}{\space}
 
%%%%%%%
 
 
