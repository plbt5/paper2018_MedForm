---
title:  'Semantic mediation: from alignment relations to data transcriptions'  
subtitle:   
author:  
- name: Paul Brandt  
  affiliation: Eindhoven University of Technology; Netherlands Organization of Applied Scientific Research TNO, Den Haag, The Netherlands   
- name: Marten van Sinderen  
  affiliation: University of Twente, Enschede, The Netherlands  
- name: Twan Basten  
  affiliation: Eindhoven University of Technology, Eindhoven, The Netherlands 
version:   
category:   
ack: This work was supported by TNO through the MSoBD program.    
tags: semantic interoperability, semantic mediation, ontology alignment, term rewriting, cTRS, data transcription   
bibliography: src/bib/CitedByMe-2018_MedForm.bib  
csl: templates/my-basic-reference-style.csl  
abstract: |  
  
  *Background:* Ontologies are considered a means to represent the semantics of a software agent. Semantic reconciliation, and the resulting ontology alignment, has shown instrumental for achieving semantic interoperability (sIOP) between software agents. An ontology alignment expresses inter-ontological concept correspondences, which basically denote set relationships to hold between a pair of concepts, e.g., *subset*, *superset*, *overlap*, and more. Semantic mediation results in *transcriptions*: replacing a native term from one agent for a native term from the other agent. Essentially, such replacement implies semantic equivalence to hold between the two concepts, which can be in contrast with the specified inter-ontological concept correspondence and, hence, their semantic relationship. 
 
  *Motivation:* Without solving this semantic discrepancy between the alignment correspondences that are *specified*, e.g., subset, superset, disjointness, and the transcription that is *applied*, i.e., equivalence, alignment-based mediation will often fail to achieve its purpose, viz. translating concepts between ontologies without introducing phantom semantics. The implementation of a generic transcription engine that adheres to the correspondences as specified by the alignment, would be key to an automated sIOP bridge between collaborating agents.  

  *Objective:* First, to investigate the contexts under which the applied transcription, despite its discrepancy with the intended correspondence, *does* represent a faithful semantic transcription between software agents. Second, to investigate how term rewriting can be applied as mathematical footing for such generic semantic transcription capability.

  *Method:* We consider contexts that emerge from the intra-ontological relations that exist with (i) the source concept(s) and (ii) the aligned target concept(s), and (iii) the specified inter-ontological correspondence between these concepts. For each context, we investigate whether the suggested target concept(s) represents a faithful semantic transcription, or not. On formulating these contexts in formal logics, they collectively describe the foundation for a faithful semantic transcription model that is generic with respect to the applied pair of ontologies and their inter-ontological alignment. We then investigate the applicability of a conditional term rewriting system as implementation for a generic semantic transcription engine, addressing its termination, normalisation, confluence and convergence properties.  

  *Results & Consequences:* Independently from their underlying syntax, and irrespective the case-specific ontologies and alignments, our method provides the most accurate valid data transcription possible given the specified alignment, or an indication that none is available. In this way the semantic difference between the specified correspondence relation and the implemented equivalence relation can be overcome, and data can be transcribed and exchanged between software agents without introducing phantom semantics. Thus sIOP can now be *specified* by inter-ontological alignments, as opposed to *implemented* by specific data wrappers case-by-case, providing for an important improvement in software flexibility, consistency and reuse of data, and a significant reduction in time-to-market. Being agnostic on the particular ontologies and their alignment, the transcription engine with its convergent rewriting property provides for a strong mathematical foundation towards infrastructural semantic standards and services, such that sIOP can be achieved by specification as opposed to implementation.


  
...

# Introduction #
Assume two collaborating software agents, exchanging data about their common interest. Each agent addresses a part of reality, here denoted the agent’s *application domain*. Collaboration implies that the agents’ application domains overlap. In terms of formal semantics, an application domain is abstracted into a conceptualisation as a set-based *Domain of Interpretation* (DoI), denoted \concept{D}. Furthermore, a conceptualisation is represented in tokens which, together, form an ontology, denoted \ont{O}. Finally, an interpretation function $\intn$ exists from the ontology to the conceptualisation. We assume that each agent decides on its own conceptualisation and its own ontological representation, the latter being built from a unique alphabet $\Sigma$.

Since each agent decides on its own conceptualisation, two DoI’s with two unique ontologies emerge: $\intn: \ont{O} \to \concept{D}$, and $\intn’: \ont{O}’ \to \concept{D}’$, where $\Sigma_{\ont{O}} \cap \Sigma_{\ont{O}’} = \varnothing$^[Even worse, it can be the case that both ontologies share identical tokens which refer to different concepts in each conceptualisation. It is easy to see how identical tokens can still become unique, hence we take the unique name assumption to apply for the rest of the paper.] whereas, since the DoI’s overlap, $\concept{D} \cap \concept{D}’ \neq \varnothing$. We assume the existence of (inter-ontological) alignment correspondences that hold between source and target ontological concepts, such as subsumption, disjointness or overlap. We make no assumptions on how the alignment correspondences are established but we do assume their semantic validity. Besides data exchange, collaboration thus demands for data transcription between both ontologies. Now consider that a *transcription* essentially implements a replacement of term $e \in \ont{O}$ to $e’ \in \ont{O}’$. From a semantic perspective, however, term replacement enforces an equivalence to hold between both terms, which is in clear contrast with the prescribed correspondence relations (except for an equivalence correspondence). Consequently, the result of the transcription will induce a difference between how it is actually being interpreted by the target agent and how it was intended to be interpreted according to its correspondence relation. Clearly, this difference might very well result in invalid semantics, with dramatic consequences for the agents’ collaboration. With invalid semantics we refer to a valuation of a theory that contradicts the state of affairs in the domain of interest. With *phantom semantics* we refer to invalid semantics that are induced by the data transcription. Due to the open world assumption this includes unfaithful valuations that remain open because conclusive data (or data that sources their entailment) have vaporised by the transcription, and vice versa, those that became closed because definitive data (or source data for their derivation) have transpired. In short, phantom semantics are semantics that are transcription-induced and contradict the state of affairs in the domain of interest. 

Our first objective towards *semantic interoperability* (sIOP) is to facilitate for any pair of collaborating agents a generic semantic transcription: a syntactic replacement between theories from two distinct alphabets, which does not induce phantom semantics, despite the difference between the stated correspondence relation and the actual transcription. Our second objective is to provide for an implementation of such generic semantic transcription, which is always terminating, and remains independent of the order with which the terms are replaced.

The main idea of the paper is to identify, for (i) all logical contexts that originate from the source and target ontological concepts, (ii) including their (intra-ontological) relations, and (iii) all (inter-ontological) alignment correspondences that are possible between source and target ontological concepts, *the most accurate transcription possible* or an indication that none is available. We call aspects (i)-(iii) the transcription context, and these are introduced as constraints for an abstract rewriting system, resulting in a *conditional term rewriting system* (cTRS) as the core engine for a generic semantic transcription component. Our contributions to the semantic mediation process are then as follows:

1. An *inductive model* of the transcription context, describing any logical context that might occur between collaborating agents, in terms of classes, relationships and correspondences (\cref{an-inductive-transcription-model});
1. A set of *valid transcriptions* for each transcription context that has been investigated and resolved. Due to space limitations we only present a few examples here -- the full set of valid transcriptions are available at [some web address | a “data” set] (\cref{valid-transcriptions});
1. A *mathematical specification of a semantic transcription engine*, founded on a conditional term rewriting system (\cref{a-ctrs-as-mediator});
1. An investigation into the *confluence property* of the inductive model, to assure that the transcription engine is properly terminating and its transcription results are independent of the order in which the terms are transcribed (\cref{the-confluence-property-of-the-mediator});
1. (Finally\todo{ brandtp, 9/17/2018 Alleen als ik daar tijdruimte voor vinden kan.} , an *evaluation* of the transcription engine by providing an implementation that is based on a generic rewriting logic framework, the Maude 2.0 System [@Clavel2003a], (\cref{validation})). 

Before turning to the first of these sections, we present a motivating example.
# Motivating example #
When considering food, whether it is categorised as fruit or vegetable depends on assuming a botanical or culinary perspective. The botanical classification is based on the structure and function of the part of the plant in question, whereas the culinary classification takes flavour and structure as its primary characteristics for classification. As a result tomatoes, cucumber and green beans are considered vegetables by a cook whilst these are considered fruits according to botanical discipline, see \cref{fig:cul-venn} versus \cref{fig:bot-venn}. Now assume two applications, a botanic and culinary one, with their own ontology as their underlying knowledge base, i.e., $\ont{O}_b$ and $\ont{O}_c$, respectively. Each ontology ascribes semantics to their particular data from their different (but equally legitimate) application perspective, depicted in \cref{fig:alignment-a}. Assume further that both applications are to exchange data and, hence, must be semantically interoperable. 


\begin{figure}
 \centering
 \hfill
 \begin{subfigure}[b]{.3\textwidth}
 \centering
 \includegraphics[width=\textwidth]{src/images/CulinaryVenn.png}
 \caption{The culinary categorisation of fruits and vegetables.}
 \label{fig:cul-venn}
 \end{subfigure}
 \hfill
 \begin{subfigure}[b]{.3\textwidth}
 \centering
 \includegraphics[width=\textwidth]{src/images/AlignmentA.png}
 \caption{A culinary ($\ont{O}_c$) and botanic ($\ont{O}_b$) ontology with different semantics.}
 \label{fig:alignment-a}
 \end{subfigure}
 \hfill
 \begin{subfigure}[b]{.3\textwidth}
 \centering
 \includegraphics[width=\textwidth]{src/images/BotanicVenn.png}
 \caption{The botanic categorisation of fruits and non-fruits.}
 \label{fig:bot-venn}
 \end{subfigure}
 \caption{Two perspectives on fruit and vegetables, their ontologies and alignment between them.}
 \label{fig:mot-example}
\end{figure}

The culinary ontology $\ont{O}_c$ defines a vegetational $i$ngredients concept that subsumes, amongst others (the dotted open line), $v$egetables. The botanic ontology $\ont{O}_b$ defines a $p$lant anatomy that subsumes, amongst others, $f$ruits. Clearly by excluding poisonous plants such as deadly hemlock and foxglove (digitalis), the culinary vegetational $i$ngredients can be considered a subclass of the botanic $p$lant parts, depicted as correspondence $\mu_1: i \sqsubset p$. The second correspondence, depicted as $\mu_2: v \overlap f$, states that the culinary $v$egetables concept overlaps with the botanic $f$ruit concept: both concepts have common individuals, e.g., tomatoes, cucumbers and green beans, but none is more general than the other in addressing individuals that do not belong to the other concept, e.g., apples as botanic fruit but not as culinary vegetables, and asparagus vice versa. Clearly, both correspondences are semantically valid. 

Turning our attention to the transcription of data, consider data from the culinary ontology: the vegetational ingredients on the menu consist of asparagus, carrots and tomatoes. Assume further that the transcription engine is aware of both ontologies and the two correspondences. Clearly, stating the culinary fact that “asparagus, carrots and tomatoes are vegetational ingredients” can be transcribed into the botanic fact that “asparagus, carrots and tomatoes are plant parts”; a one-to-one replacement of terms suffices since everything that is considered a vegetational ingredient is, according to $\mu_1$, considered a part of a plant as well, and semantic interoperability has been achieved. Now consider the transcription for the culinary statement “asparagus, carrots and tomatoes are vegetables”. Simply replacing the culinary term “vegetables” with the botanic term “fruit” in the transferred data because a valid correspondence *exists* between the two terms, here $\mu_2$, now results in *phantom semantics*: inducing an erroneous categorisation of individuals, here asparagus and carrots as botanic fruits. Since an ontology embodies the knowledge-base for an application, this phantom semantics will introduce erroneous or conflicting knowledge to the botanic application; semantic interoperability has failed. In conclusion, we consider a valid logic notion on how the two categories relate to each other a necessary but not sufficient condition for transcription: Simply replacing the related terms one-to-one doesn’t always achieve faithful semantic interoperability between applications.

Based on the transcription context as depicted in \cref{fig:alignment-a}, the only *valid transcription* of “asparagus, carrots and tomatoes are vegetables”, viz. one that is logically sound and remains closest to the individuals that are denoted by the term under transcription, here “vegetables”, is the botanic term “plant parts”. To allow for such transcription it is necessary to take into consideration more information than the correspondence relation $\mu_2$ and its two related concepts only. In fact, to achieve a valid transcription, in this case the total logical context that applies to the two related concepts should be taken into consideration. We call this the *transcription context*, which includes the essence of the correspondence relation, plus fragments of both ontologies as well as other correspondences between those fragments. Although the valid transcription might be more generic than its original fact, no phantom semantics occur. As a result, semantic interoperability will be achieved and the botanic application can process external data without the risk to show more erroneous behaviour than with its internal data only. 

We note that the transcription context can be considered agnostic to the particular ontologies and alignments since it only depends on the underlying formal logic: the intra-ontological relations and inter-ontological correspondences. A transcription engine, thus, only needs to consider the transcription context in order to produce valid transcriptions. 


<!-- Page definitions -->



## Terminology ##
We introduce some terminology, as follows.

A *correspondence* denotes a single particular inter-ontological relation, prescribed, and assumed to represent a semantically valid relation between both concepts, see $\mu_1$ and $\mu_2$ in \cref{fig:alignment-a}. The correspondence is denoted as
\begin{equation}\label{eq:correspondence}
\mu = \tuple{ e, e’, \theta }
\end{equation}
with $\theta \in \Theta$ specifying the *correspondence relation* that holds between source concept $e \in \ont{O}$, denoted the *transcribendum*, and the target concept $e’ \in \ont{O}’$, denoted the *transcriptum*. The correspondence relations $\Theta$ that we consider are:
\begin{equation*}
  \Theta = \{=, \sqsubset, \sqsupset, \disj, \overlap \}
\end{equation*}
denoting $=$: semantic equality, $\sqsubset$: subsumption of, $\sqsupset$: subsumes, $\disj$: disjointness, and $\overlap$: overlap. Despite the fact that we have limited ourselves to these particular relations, the method that we propose can be extended to other correspondence relations as well. 

The *concepts* in the ontologies are the elements that apply in the ontology. These are of a certain type, dependent on the type of logic that is used to formulate the ontology. Although we limit ourselves to description logic, and, for sake of simplicity and available space, to only the classes therein, the principles that we present here are applicable to the other types of elements in description logic, i.e., relations, properties and instances, as well as other types of logic.   

We denote as *atomic correspondence *a correspondence where $e$ and $e’$ are atomic concepts, i.e., a single concept without considering any (logical or ontological) relation with another concept from its own ontology. 

A correspondence is *homogeneous* when it relates concepts that are of the same type, whereas correspondences between concepts of different types are denoted as *heterogeneous*. We assume homogeneous correspondences only, and we similarly assume ontologies that are based on the same logic.  

Finally, some notation to distinguish various forms of equivalences:
\begin{align*}
  \equiv \;  &\text{: denotes \emph{syntactical identity}} \\
  = \;       &\text{: denotes \emph{semantic equivalence} that is (to be) established} \\
  \approx \; &\text{: a semantic equivalence that holds \emph{a priori}, called a ($\Sigma$-)\emph{identity}}
\end{align*}

# An inductive transcription model #
Atomic concepts are of certain *type*, denoted $\varepsilon$. This type is dependent on the underlying logic, and since we consider ontologies that are based on description logics the following types apply:
\begin{equation}\label{eq:concept-type}
\varepsilon \; ::= \; \token{C} \; | \; \token{R} \; | \; \token{P} \; | \; \token{T} \; | \; \token{I}
\end{equation}
where:

* \token{C} denotes the *Class* concept type. The interpretation of, e.g., the class $m$ of all coffee holders, results in a set $\intn(m) = \concept{M}$ of all individual mugs, cups, beakers, demitasses and what have you. Hence, $m \lhd \token{C}: \concept{M} \subseteq \concept{C}$ states that because the concept $m$ is type-of ($\lhd$) the Class type (\token{C}), its interpretation results in a set $\concept{M}$ that is a subset of the set \concept{C} of all class instances. On its turn, set \concept{C} is a subset of the set of all instances that we consider in the domain of interpretation: $\concept{C} \subseteq \concept{D}$;
* \token{R}, \token{P}, \token{T} and \token{I} denote the *Relation* concept type, the *Property* concept type, the *value type* concept type, and the *Instance* concept type, respectively, each with their own interpretation in \concept{D}. For reason of space limitation, in this paper we need to constrain ourselves to alignments over classes; however, our approach towards semantic transcription applies to other concept types as well. We refer the interested reader to, e.g, [@Baader:2007tt] for an in-depth treatise on description logics.   

Whenever the type of the concept or its atomicity is irrelevant, we denote the concept as $e$, whereas $c, p, r, t$ and $\iota$ denote a particular, intra-ontological atomic concept of type class, property, relation, value type or instance. In our example we can write that $m \sqsubset c$ because $\intn(m \sqsubset c) = \intn(m) \intn(\sqsubset) \intn(c) = \concept{M} \subseteq \concept{C}$. The homogeneous, non-atomic correspondence relation from \cref{eq:correspondence} is depicted in \cref{fig:basic-correspondence} (a). The patterns that emerge for each homogeneous and atomic correspondence are depicted in \cref{fig:basic-correspondence} (b) to (f). 

![Atomic homogeneous correspondences, i.e., two ontologies, $\ont{O}$ and $\ont{O’}$, each containing only one atomic concept $e \lhd \varepsilon$ with correspondence relation $\theta \in \Theta$ that specifies how transcribendum $e$ corresponds with its peer transcriptum $e’$. Note that $\theta$ is a directional relation. Correspondence (a) collectively represents the atomic correspondence for classes, types and individuals, depicted by correspondences (d), (e) and (f), respectively. Correspondences (b) and (c) represent the generic atomic correspondences for object relations and property relations, respectively.][def:BasicCorrespondence]

\Cref{fig:basic-correspondence} (b) to (f) represent all potential atomic correspondences: two ontologies, $\ont{O}$ and $\ont{O’}$, each containing only one atomic concept $e$, with $e \lhd \varepsilon$, and one correspondence relation $\theta \in \Theta$ to relate transcribendum $e$ with its peer transcriptum $e’$. In correspondence (a), however, concept $e$ can only be one of type \token{C}, \token{I} or \token{T}: when considering concepts that express relations, i.e., correspondence (b) on object relations and correspondence (c) on property relations, a class concept $c_d$ becomes a necessary part of the pattern to represent the domain of the relations; similarly, a range concept $c_r$ is necessarily included to the pattern as well. Furthermore, by including these secondary (domain and range) concepts, secondary correspondence relations are necessary to include in the atomic correspondence as well in order to clarify how the secondary concepts of the source $\ont{O}$ relate with those of the target ontology $\ont{O’}$. When one considers these secondary correspondence relations, i.e., $\theta_{c_d}$ and $\theta_{c_r}$ from correspondences (b) and $\theta_c$ and $\theta_t$ from (c) it becomes clear that these are, in fact, the atomic correspondences from (d) and (e), respectively. From this it follows that:

1. indeed correspondence (a) represents the generic atomic correspondence but only for classes, $\tuple{ c, c’, \theta_c}$ as depicted in correspondence (d) and exemplified as $\tuple{ m, m’, =}$ with $m=\text{‘mug’}$ and $m’=\text{‘mok’}$^[‘mok’ is Dutch for ‘mug’]; value types $\tuple{t, t’, \theta_t}$ as depicted in correspondence (e); and individuals $\tuple{\iota, c’, \in}$ as depicted in correspondence (f), indicating, e.g., that my favourite cup is called ‘kopje’ in Dutch;
1. correspondences (b) and (c) represent the generic atomic correspondences for relations, since apart from the primary atomic correspondence also two secondary atomic correspondences are involved, i.e., three atomic correspondences in total;
1. the generic atomic correspondence of a relation can only be addressed once the transcriptions for the atomic correspondences (d) and (e) are resolved. 

In this paper, we only investigate the transcription for correspondence (d): $\tuple{ c, c’, \theta_c}$. To that end, we introduce the local contexts of the transcriptum and transcribendum in their particular ontologies $\ont{O}$ and $\ont{O}’$. Together, we denote this as the *transcription context* $\ctx$, collectively denoted as $X$. The transcription context identifies the context that applies for correspondence (d), i.e., the classes $c$ and $c’$ and the classes they have a direct intra-ontological relationship $r$ and $r’$ with as depicted in \cref{fig:gen-class-transc-models}(a); note that this looks similar but is different from the correspondence (b). We define this transcription context inductively over the intra-ontological relations $r$ and $r’$, as follows:
\begin{equation}
  \ctx_n = \pair{ r, \theta_n, r', \ctx_{n-1} }    \label{eq:transcription-context}
\end{equation}
where:

* $r, r’ \in \set{\sqsubset, =, \sqsupset, \overlete, \overlinc, \displete, \disjoinc}$, denoting the seven logical relationships that can apply intra-ontologically between pair of concepts, depicted in \cref{fig:key2-r-symbols} for $r \in \ont{O}$, with:
    * $r$ and $r’$ part of $\ont{O}$ and $\ont{O}’$, respectively;
    * $\sqsubset, =, \sqsupset$ denote *subsumption of*, *semantic equivalence*, and *subsumes*, e.g., $m \sqsupset b$ as ‘a coffee holder subsumes a beaker’, and
    * $\displete, \disjoinc$ denote *disjoint* ($e_1 \sqcap e_2 = \emptyset$) *but complete* ($e = e_1 \sqcup e_2$) or *incomplete* ($e \sqsupset e_1 \sqcup e_2$), respectively, e.g. $m \sqsupset b \disjoinc d$ denoting ‘beaker and demitasse are a disjoint but incomplete set of coffee holders’; 
    * $\overlete, \overlinc$ denote *not disjoint* ($e_1 \sqcap e_2 \neq \emptyset$) *but complete* and *not disjoint and incomplete*, respectively;
    * Note the we do not consider the correspondence relation that might or might not have been specified between $r$ and $r’$, otherwise we would investigate correspondence (b) from \cref{fig:basic-correspondence}; 
* $\theta_n \in \Theta$, the correspondence relation from \cref{eq:correspondence} that is assumed to hold between classes $c_n \in \ont{O}$ and $c_n’ \in \ont{O}’$;
* $\ctx_{n-1} = \pair{r, \theta_{n-1}, r’, \ctx_{n-2}}$, viz. the transcription context at the previous induction level;
* $\ctx_0 = \pair{\theta}$, viz. the basic correspondence that holds between classes $c \in \ont{O}$ and $c’ \in \ont{O}’$ (see \cref{tab:atomic-class-transcriptions} in \cref{transcribing-over-atomic-class-context}).   


We can depict the inductive transcription context as follows. We first consider the intra-ontological relationships $r, r’ \in \set{\sqsubset, =, \sqsupset}$. The context $\ctx_n$ is then fully described by the concepts $c_n, c_{n-1} \in \ont{O}$ and $c_n’, c_{n-1}’ \in \ont{O’}$ and their intra-ontological relationships $r, r’$, the inter-ontological correspondence relation $\theta_n$ and the transcription context $\ctx_{n-1}$. This model has been depicted in \cref{fig:gen-class-transc-models}(a). 

![The class transcription models that support all seven ontological relations, where $\theta_n$ denotes the correspondence relation that applies for the context $\ctx_n = \pair{r, \theta_n, r', \ctx_{n-1}}$, and $\vldtranscript{\ctx_{n-1}}$ denotes the valid transcription under context $\ctx_{n-1}$. Category (a) represents $r, r’ \in \set{\sqsubset, =, \sqsupset}$. For $r, r’ \in \set{ \protect\overlete, \protect\overlinc, \protect\displete, \protect\disjoinc }$, category (b), classes $c$ and $c'$ are implicit.][def:GenClassTranscModels]

On considering $r, r’ \in \set{\overlete, \overlinc, \displete, \disjoinc}$, the completeness aspect of the relations demands a subsuming class concept that can act as reference for (in)completeness. This model has been depicted in \cref{fig:gen-class-transc-models}(b), introducing the reference concepts $c$, resp. $c’$, which subsume $c_n \, r \, c_{n-1}$ and $c_n’ \, r’ \, c_{n-1}’$, respectively. Two other categories that are allowed by the inductive model from \cref{eq:transcription-context} but are not shown in \cref{fig:gen-class-transc-models}, are (c) with $r \in \set{\sqsubset, =, \sqsupset}$ and $r’ \in \set{\overlete, \overlinc, \displete, \disjoinc}$, and (d) $r$ and $r’$ specified vice versa.  

In the remainder of this paper we refer to a specific context that specify both intra-ontological relations, $r$ and $r’$, and the inter-ontological correspondence $\theta_n$ over another induction ($\ctx_{n-1}$) as a particular *case. *Clearly, categories \ref{fig:gen-class-transc-models}(a)-(d) are complementary to each other, depending on the particular choice for $r$ or $r’$. Together they represent the generic, inductive transcription context with which each and every correspondence in every context that might apply can be described. How this can be used to produce transcriptions that are valid and, therefore, do not produce phantom semantics, is presented in the next section. 




<!-- Page definitions -->
[def:BasicCorrespondence]: src\images\BasicCorrespondence.png {#fig:basic-correspondence width=70%}
[def:Key2rSymbols]: src\images\Key2rSymbols.png {#fig:key2-r-symbols width=100%}
[def:GenClassTranscModels]: src\images\GenClassTranscrModelAAndB.png {#fig:gen-class-transc-models width=70%}
# Valid transcriptions #
The main demand for the transcription engine is to guarantee that it produces a semantic valid transcription. We formulate a naive transcription and a valid transcription as follows.

\begin{mmdef}[Transcription]\label{def:transcription}
A \emph{transcription} is a function $T_{\ctx} : \ont{O} \to \ont{O}’$ that is primarily specified by the correspondence $\mu = \tuple{ e, e’, \theta }$ between transcribendum $e \in \ont{O}$ and transcriptum $e’ \in \ont{O}’$. We denote $T_{\ctx}(e)$ the \emph{transcription result} of concept $e$ under context $\ctx$. 
\end{mmdef} 

\begin{mmdef}[Naive transcription]\label{def:naive-transcription}
A transcription is called \emph{naive} when it produces the transcriptum from the subject correspondence without taking the transcription context $\ctx$, defined by \cref{eq:transcription-context}, into account, i.e., $\forall \ctx \in X: T_{\ctx}(e) = e’$.   
\end{mmdef}
An example of a naive transcription can be found in [@Makris2010a;@ISI:000273452000034].
\begin{mmdef}[Valid transcription (under transcription context $\ctx$)]\label{def:valid-transcription}
Consider a transcription function $T_{\ctx} : \ont{O} \to \ont{O}’$ with correspondence $\mu_n = \tuple{ e_n, e_n’, \theta_n }$. Such transcription is called \emph{valid under transcription context} $\ctx$, or simply \emph{valid}, denoted $\vldtranscript{\ctx}$ iff:\[
\intn’(T_{\ctx_n}(e_n)) \supseteq \intn(e_n)
\]
where:
\begin{align*}
  e_n             &\in \ont{O}        \\
  T_{\ctx_n}(e_n) &\in \ont{O}’       \\
  \ctx_n          &= \pair{r, \theta_n, r', \ctx_{n-1}}   \\
  e_{n-1}         &\vldtranscript{\ctx_{n-1}}    \\
  \intn(\cdot)    &: \ont{O}  \to \concept{D}  \text{, see \cref{def:ontology}}       \\
  \intn’(\cdot)   &: \ont{O}’ \to \concept{D}’ \text{, see \cref{def:ontology}} 
\end{align*}
For a valid transcription $\vldtranscript{\ctx}$, it holds that $\vldtranscript{\ctx} \subset T_{\ctx}$. 
\end{mmdef}

The above definitions assume the following two constraints are met:

1. Firstly, the correspondence $\mu_n = \tuple{ e_n, e_n’, \theta_n }$ is prescribed and assumed to represent a semantic valid correspondence, that is, $e_n \theta_n e_n’$ holds;
1. Secondly, since the transcription result $T_{\ctx_n}(e_n)$ represents a new theory that is added to $\ont{O}’$, the validity of the transcription holds from the moment that this new theory and its logical consequences have been inferred, and not sooner.  

Indeed, the best transcription would be one for which $\intn’(T_{\ctx_n}(e_n)) \, = \, \intn(e_n)$ holds. However, since we are more concerned with preventing the emergence of phantom semantics, we demand the former weaker constraint. If it can be guaranteed that transcription $T_{\ctx}$ is valid, the transcribendum $e \in \ont{O}$ can be replaced by concept $T_{\ctx}(e) \in \ont{O}’$ without inducing phantom semantics. Assume that $T_{\ctx}(e) = e’$ is valid for some atomic or non-atomic $e’ \in \ont{O}’$, we denote $\pair{e, e’} \in \vldtranscript{\ctx}$ or $e \vldtranscript{\ctx} e’$. When the transcription context is reduced to $\ctx_0$, i.e., the correspondence relation $\theta$ only, we write $T_{(\theta)}$ with its valid counterpart $\vldtranscript{(\theta)}$. 

Since the transcription context provides for all potential logical contexts that can occur, we can resolve the question whether or not a transcription is valid generically and independently from the particular ontologies and alignments that are applied by the software agents. The question at hand then becomes how to establish $T_{\ctx_n}(e_n)$? Clearly, the transcription result can be represented inductively as a logical combination of atomic concepts $e_n’$ and $e_{n-1}’$, or $e_n’$, $e_{n-1}’$ and $e’$ for all cases that are addressed by \cref{fig:gen-class-transc-models}(a), resp. (b). Our task is then to traverse the 4-dimensional space that is spanned by the transcription context, and for each point in that space consider when $\intn’(T_{\ctx_n}(e_n)) \supseteq \intn(e_n)$ holds, viz. which logical combination of $e_n’$, $e_{n-1}’$ and $e’$ implies the smallest set that includes $\intn(e_n)$. We first consider transcriptions for atomic correspondences, and in the subsequent subsections we extend it to cover several example cases of the full transcription context.



Noot: \cref{def:valid-transcription} IS FEITELIJK ONJUIST, omdat $\intn: \ont{O} \to \concept{D}$ en $\intn’: \ont{O}’ \to \concept{D}’$ en derhalve niet hetzelfde co-domain hebben, en daardoor de subset relatie niet bepaald kan worden. Het is juist de bedoeling dat de alignment $e_n \theta_n e_n’$ het verschil in conceptualisaties overbrugt; dat neem ik ook als uitgangspunt. Want: Het maken van een alignment is niet mogelijk zonder een extern orakel die beide afzonderlijke conceptualisaties tot elkaar weet te verhouden. Dat orakel, de mens, is wat ik in \cref{def:valid-transcription} als gezamenlijk co-domain impliceer, op basis waarvan de subset relatie wordt bepaald. Maar ja, hoe schrijf je dat op, mathematisch; door de semiotische “abstractie” relatie met de werkelijkheid te leggen? Maar leg je dan eigenlijk niet heel exact vast dat je te weinig expliciet kan maken om vast te stellen wanneer de transcriptie semantisch valide is?

Hoe dan ook, het is niet noodzakelijk voor de rest van het verhaal om \cref{def:valid-transcription} sluitend te krijgen, gelukkig; het overbrengen van de intuitie van wat ik als valide semantiek bedoel, volstaat. 
  
## Transcribing over atomic class context ##
We first consider the transcription of case (d) in \cref{fig:basic-correspondence}, the atomic correspondence $\mu = \tuple{ c, c’, \theta }$, with its atomic transcription context $\ctx = (\theta)$. As indicated, the question at hand is which logical combination of $e_n’$, $e_{n-1}’$ and $e’$ implies the smallest set that covers $\intn(e_n)$?

This is straightforward for this case: since no other concepts are present in context $\ctx$, the transcriptum $c’$ represents the only potential concept that will take part in the transcription result. Hence the only potential outcomes are $\set{c’, \neg c’}$, or any logical combination thereof. The choice depends on whether phantom semantics are amongst the results of the transcription for the particular context $\ctx = (\theta)$ that is considered. The result of this strategy is shown in \cref{tab:atomic-class-transcriptions}, where each column specifies the possible correspondence relation that applies, and the row specifies the individual transcription results $T_\sqsubset(c)$, $T_=(c)$, $T_\sqsupset(c)$, $T_\overlap(c)$, and $T_\disj(c)$, collectively denoted as $T_{(\theta)}(c)$.

\begin{table}[h]
 \centering
 \caption{Transcription results $T_{(\theta)}(c)$ for the atomic transcription context $\ctx = (\theta)$ and correspondences $\tuple{c, c’, \theta}$: atomic class $c$ represents the transcribendum and is transcribed under relation $\theta$, taking no other concepts into consideration. The transcription result is semantically valid, denoted as $c \vldtranscript{(\theta)}$, by token of not inducing phantom semantics under this specific context. }
 \label{tab:atomic-class-transcriptions}
 \begin{tabular}{cc@{\qquad}ccccc}
 \toprule
 \multicolumn{2}{c}{$c \vldtranscript{(\theta)}$} & \multicolumn{5}{c}{Correspondence relation $\theta$} \\ \cmidrule{3-7}
 && $\sqsubset$ 
 & $=$
 & $\sqsupset$
 & $\overlap$ 
 & $\disj$ \\
 \multicolumn{2}{c}{Concept $e$}
 & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sb.png}
 & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Eq.png}
 & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sp.png}
 & \includegraphics[width=0.1\textwidth]{src/images/VennBC-nD.png}
 & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Dj.png} \\ \cmidrule(r){1-2} \cmidrule{3-7}
 & $c$ & $c’$ & $c’$ & \ntsa & \ntsa & $\neg c’$ \\ \bottomrule
 \end{tabular}
\end{table}

In conclusion, \cref{tab:atomic-class-transcriptions} specifies all *valid* transcriptions under the one single atomic transcription context for all correspondences, collectively. We therefore denote such transcription table as $\vldtranscript{\ctx}$, and this particular one as $\vldtranscript{(\theta)}$. This can be summarised as:

\begin{subnumcases}{\label{eq:act}\ensuremath{c \vldtranscript{(\theta)} \; = \; }} 
  c’      & : $\theta \in \set{\sqsubset, =}$        \label{eq:act-1}\\
  \neg c’ & : $\theta \in \set{\disj}$               \label{eq:act-2}\\
  \ntsa   & : $\theta \in \set{\sqsupset, \overlap}$ \label{eq:act-3}
\end{subnumcases}


Unfortunately, three transcription results, although valid, are rather disappointing. For $\theta \in \set{\sqsupset, \overlap}$, eq.~(\ref{eq:act-3}), neither $c’$ nor $\neg c’$ do sufficiently constrain the individuals in $\ont{O}’$ that are implied by $c$. In other words, the best logical combination of terms from $\ont{O}’$ that we can make that implies the smallest set covering $\intn(c)$ is $T_{(\theta \in \set{\sqsupset, \overlap})}(c) = c’ \sqcup \neg c’$, or $\top$ for short, denoting *verum*, viz. always \token{True}. A rather useless transcription, but a valid one nonetheless. Moreover, the transcription result for $\theta \in \set{\disj}$, eq.~(\ref{eq:act-2}), is not as total as $\top$ but still as broad as $T_{(\disj)}(c) = \neg c’$. These particular three correspondences, $\theta \in \set{\sqsupset, \overlap, \disj}$, do have a common ground for their “shortcomings”, being lack of knowledge. Therefore, we extend the atomic context of the transcription to the full transcription context in order to gain more information with the purpose to resolve the shortcomings of the atomic case.
## Transcribing over an $r, r'\in \set{\sqsubset, =, \sqsupset}$ class context ##
The following two cases are a minimal extension of the original atomic class transcription from the previous section. We introduce a new classes in both $\ont{O}$ and $\ont{O’}$ with a subsumption or equivalence relation with the existing class: $c_n = c_{n-1}$ into $\ont{O}$ and $c_n’ \sqsupset c_{n-1}’$ into $\ont{O’}$ is depicted in \cref{fig:medcxt-e_p-p_e-b_e} case (a), case (b) introduces the same relations but vice versa, and for case (c) we flip the direction of the subsumption relation from case (b). This has been depicted in \cref{fig:medcxt-e_p-p_e-b_e}.  

![Introducing intra-ontological relations $r, r'\in \set{\sqsubset, =, \sqsupset}$: Case (a): class $c_n$ is equivalent to class $c_{n-1}$. Case (b): class $c_n$ subsumes class $c_{n-1}$. Case (c): class $c_n$ is subsumed by class $c_{n-1}$. All cases extend and build upon the valid transcription under context $\ctx_{n-1} = \pair{\theta_{n-1}}$, as specified in \cref{tab:atomic-class-transcriptions}. The current context, $\ctx_n$, specifies case (a) as $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$, case (b) as $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$, and case (c) as $\ctx_n = \pair{\sqsubset, \theta_n, =, \ctx_{n-1}}$][def:MedcxtSup]

All three cases are founded on case \ref{tab:atomic-class-transcriptions} since the transcription of the latter (specified in \cref{tab:atomic-class-transcriptions}) has been incorporated inductively as the underlying transcription, i.e., $T_{(\theta)}(c)$. Since this is a valid transcription (as we have seen in the previous section) we can denote this as $c_{n-1}\vldtranscript{\ctx_{n-1}}$, where context $\ctx_{n-1}$ is fully defined by correlation relation $\theta_{n-1}$, i.e., $\ctx_{n-1} = \pair{\theta_{n-1}}$. In contrast, the current context $\ctx_n$ for case \ref{fig:medcxt-e_p-p_e-b_e}(a) is defined by (i) the logical relationship between $c_n$ and $c_{n-1}$, i.e., equivalence, (ii) the correlation relation $\theta_n$ between $c_n$ and $c_n’$, (iii) the logical relationship between $c_n’$ and $c_{n-1}’$, viz. subsumption, and finally (iv) the previous context $\ctx_{n-1}$. Hence, $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$. The contexts for cases (b) and (c) are denoted similarly, $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$ and $\ctx_n = \pair{\sqsubset, \theta_n, =, \ctx_{n-1}}$, respectively\todo{ brandtp, 9-9-2019 Misschien nuttiger om in case c geen intra-ontologische equivalentie toe te passen om meer positieve resltaten te behalen.} .

One way to establish $T_{\ctx_n}(c_{n-1})$ is to draw the Venn-diagrams for $c_n$, $c_{n-1}$, $c_n’$ and $c_{n-1}’$ conform each instance of context $\ctx_n$, viz. each point in the table, and investigate how $c_{n-1}$ can be transcribed best. Another way is to apply first order logic to derive the best transcription. Either way, ‘best’ means to refer to (a) at least all individuals denoted by $c_{n-1}$ and (b) preferably not more than those, by applying a logical combination of terms from \ont{O’}. We can best explain this by introducing the following example.

\begin{mmexmp}[A correspondence]
 \begin{align}
  \ont{O}  &= \set{ \token{car, bike} }  \\
  \ont{O}’ &= \set{ \token{vehicle} }  \\
  \ont{A}  &= \set{ \pair{\token{car} \sqcup \token{bike} \quad \sqsubset \quad \token{vehicle}}} 
 \end{align}    
\end{mmexmp} 

 the results are either (i) a valid transcription result, (ii) non-existent since the context represents a logical contradiction and is therefore not applicable, denoted by `-`, or (iii) the *verum* concept, denoted as $\ntsa_n$. We explain the last result: since the context is valid, the result must be the smallest set of individuals in $\ont{O’}$ that can be represented with logical combinations of concepts that are present in the context in $\ont{O’}$.  at our disposal to formulate a valid transcription (each of $c_n’$ and $c_{n-1}’$ would be a naive transcription with phantom semantics as consequence); the best valid transcription here is therefore .      

Since context $\ctx_n$ is constructed from classes $c_n$ and $c_{n-1}$ that both entail a correspondence, both transcriptions $T_{\ctx_n}(c_n)$ and $T_{\ctx_n}(c_{n-1})$ are to be considered per case. 

We start with the transcriptions for class $c_{n-1}$, shown in \cref{tab:transcr_cn-1_ctxn_eq,tab:transcr_cn-1_ctxn_sup,tab:transcr_cn-1_ctxn_sub} for cases (a), (b) and (c), respectively. Because we build on the results from the previous section, class $c_{n-1}$ refers in these cases to the very same class that is denoted as class $c$ in \cref{tab:atomic-class-transcriptions}. In contrast to \cref{tab:atomic-class-transcriptions} where an atomic context was considered only, here the context of the classes in $\ont{O}$ and $\ont{O}’$ are taken into consideration. This results in a 2-dimensional tableau where the potential correspondence relations $\theta_n$ on level $n$ are specified as its columns and the valid transcriptions on level $n-1$ are specified as its rows, entitled *Context* $\ctx_{n-1}$ in the second column. This column takes as presupposition the atomic transcriptions from \cref{tab:atomic-class-transcriptions}. Observe that these latter are *valid* transcriptions for $c_{n-1}$. 

\begin{table}[h]
  \centering
  \caption{Valid transcription for $T_{\ctx_n}(c_{n-1})$ for case \ref{fig:medcxt-e_p-p_e-b_e} (a), i.e., under context $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$. A logical contradiction in the context and therefore no applicable transcription is denoted by `-`.}
  \label{tab:transcr_cn-1_ctxn_eq}
  \begin{tabular}{cc@{\hspace{4px}}c@{\hspace{5px}}lccccc}
    \toprule
    $c_{n-1} \vldtranscript{( =, \theta_n, \sqsupset, \ctx_{n-1})}$ & \multicolumn{2}{c}{Context $\ctx_{n-1}$} & & \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    & \multicolumn{1}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} & \multicolumn{1}{c}{$\theta_{n-1}$}
                                        & & $\sqsubset$ & $=$      & $\sqsupset$ & $\overlap$  & $\disj$    \\  \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule{5-9}
    1 & $c_{n-1}’$      & $\sqsubset$ & & $c_{n-1}’$    & -        & -           & -           & -          \\ 
    2 & $c_{n-1}’$      & $=$         & & $c_{n-1}’$    & -        & -           & -           & -          \\ 
    3 & $\ntsa$         & $\sqsupset$ & & $c_n’$        & $c_n’$   & $\ntsa$     & $\ntsa$     & -          \\ 
    4 & $\ntsa$         & $\overlap$  & & $c_n’$        & -        & -           & $\ntsa$     & -          \\ 
    5 & $\neg c_{n-1}’$ & $\disj$     & & $c_n’ \sqcap \neg c_{n-1}’$ 
                                                        & -        & -           & $\neg c_{n-1}’$ 
                                                                                             & $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}
We explain the transcription of $T_{( =, \theta_n, \sqsupset, \ctx_{n-1})}(c_{n-1})$, i.e., for case (a) in \cref{tab:transcr_cn-1_ctxn_eq}, for column $\theta_n = \sqsubset$; the other columns are left as an exercise to the reader. Solely based on correspondence relation on level $n$, viz. $\theta_n$, the valid transcription $c_{n-1} \vldtranscript{\sqsubset} c_n’$ applies for each row 1-5. However, by token of the underlying context $\ctx_{n-1}$ a valid transcription for $c_{n-1}$ had already been established for level $n-1$ by \cref{tab:atomic-class-transcriptions}, viz. rows 1&2: $c_{n-1} \vldtranscript{\ctx_{n-1}} c_{n-1}’$, rows 3&4: $c_{n-1} \vldtranscript{\ctx_{n-1}} \ntsa$, row 5: $c_{n-1} \vldtranscript{\ctx_{n-1}} \neg c_{n-1}’$. Both transcriptions are equally valid and shall be applied together, rendering a double constraint as set intersection, viz. $\set{c_n’ \sqcap c_{n-1}’, c_n’ \sqcap c_{n-1}’, c_n’ \sqcap \ntsa, c_n’ \sqcap \ntsa, c_n’ \sqcap \neg c_{n-1}’}$ for rows 1-5, respectively. In the context of this case $r’= \sqsupset$ applies and hence, $c_n’ \sqcap c_{n-1}’ \, = \, c_{n-1}’$ and $c_n’ \sqcap \ntsa \, = \, c_n’$, providing the transcription results for the particular column in the table. We can thus conclude that:
\begin{equation}\label{eq:cn-1.ctxn.eq}
T_{\ctx_n}(c_{n-1}) \; = \; T_{\ctx_{n-1}}(c_{n-1}) \, \sqcap \, c_{n-1}\vldtranscript{\theta_n} \qquad \text{for } \ctx_n \, = \, ( =, \theta_n, \sqsupset, \ctx_{n-1})
\end{equation}

Similarly, the transcription \cref{tab:transcr_cn-1_ctxn_sup} presents the transcription of $c_{n-1}$ for case (b), viz. $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$, in reference to the atomic case from \cref{tab:atomic-class-transcriptions}. 
\begin{table}[h]
  \centering
  \caption{Valid transcription for $T_{\ctx_n}(c_{n-1})$ for case \ref{fig:medcxt-e_p-p_e-b_e} (b), i.e., under context $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$. }
  \label{tab:transcr_cn-1_ctxn_sup}
  \begin{tabular}{cc@{\hspace{4px}}c@{\hspace{5px}}lccccc}
    \toprule
    $c_{n-1} \vldtranscript{(\sqsupset, \theta_n, =, \ctx_{n-1})}$ & \multicolumn{2}{c}{Context $\ctx_{n-1}$} & & \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    & \multicolumn{1}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} & \multicolumn{1}{c}{$\theta_{n-1}$}
                                            & & $\sqsubset$ & $=$        & $\sqsupset$     & $\overlap$      & $\disj$  \\ 
                                                                                               \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule{5-9}
    1 & $c_{n-1}’$      & $\sqsubset$       & & $c_{n-1}’$  & $c_{n-1}’$ & $c_{n-1}’$      & $c_{n-1}’$      & - \\ 
    2 & $c_{n-1}’$      & $=$               & & -           & -          & $c_{n-1}’$      & -               & - \\ 
    3 & $\ntsa$         & $\sqsupset$       & & -           & -          & $\ntsa$         & -               & - \\ 
    4 & $\ntsa$         & $\overlap$        & & -           & -          & $\ntsa$         & $\ntsa$         & - \\ 
    5 & $\neg c_{n-1}’$ & $\disj$           & & -           & -          & $\neg c_{n-1}’$ & $\neg c_{n-1}’$ & $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}
We explain the above transcription $T_{\ctx_n}(c_{n-1})$ for column $\theta_n = \sqsupset$. For rows 1-5, solely based on correspondence relation $\theta_n$, the transcription result $c_{n-1} \vldtranscript{(\sqsupset)} \ntsa$ applies, i.e., the atomic class transcription from \cref{eq:act-3}. However, as in the previous case, the transcription from column $c_{n-1} \vldtranscript{\ctx_{n-1}}$ applies as well, rendering the double constrained as intersection $\ntsa \sqcap c_{n-1}’ \, = \, c_{n-1}’$ for rows 1 & 2 and $\ntsa \sqcap \neg c_{n-1}’ \, = \, \neg c_{n-1}’$ for row 5, leaving $\ntsa$ for rows 3 & 4. We can thus conclude that:
\begin{equation}\label{eq:cn-1_ctxn_sup}
T_{\ctx_n}(c_{n-1}) \; = \; T_{\ctx_{n-1}}(c_{n-1}) \, \sqcap \, c_{n-1}\vldtranscript{\theta_n} \qquad \text{for } \ctx_n \, = \, ( \sqsupset, \theta_n, =, \ctx_{n-1})
\end{equation} 
As example for a logical contradiction we explain rows 3 & 4 for $\theta_n \in \{ \sqsubset, = \}$ as follows. $\theta_{n-1} \in \set{\sqsupset, \overlap} \iff \exists \iota \in \concept{D}: \iota \in c_{n-1} \land \iota \not\in c_{n-1}’$, whereas $\theta_n \in \set{\sqsubset, =} \iff \forall \iota \concept{D}: \iota \in c_{n-1} \to \iota \in c_{n-1}’$. The consequence of this contradiction is that contexts $\pair{\sqsupset, \sqsubset \text{ or } =, =, \sqsupset \text{ or } \overlap }$ cannot exist. Similar logical contradictions can be derived for the other `-` results.  

Finally, the transcription \cref{tab:transcr_cn-1_ctxn_sub} presents $T_{\ctx_n}(c_{n-1})$ for case (c), viz. $\ctx_n = \pair{\sqsubset, \theta_n, =, \ctx_{n-1}}$, in reference to the atomic case from \cref{tab:atomic-class-transcriptions}. 
\begin{table}[h]
  \centering
  \caption{Valid transcription for $T_{\ctx_n}(c_{n-1})$ for case \ref{fig:medcxt-e_p-p_e-b_e} (c), i.e., under context $\ctx_n = \pair{\sqsubset, \theta_n, =, \ctx_{n-1}}$. }
  \label{tab:transcr_cn-1_ctxn_sub}
  \begin{tabular}{cc@{\hspace{4px}}c@{\hspace{5px}}lccccc}
    \toprule
    $c_{n-1} \vldtranscript{(\sqsubset, \theta_n, =, \ctx_{n-1})}$ & \multicolumn{2}{c}{Context $\ctx_{n-1}$} & & \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    & \multicolumn{1}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} & \multicolumn{1}{c}{$\theta_{n-1}$}
                                            & & $\sqsubset$ & $=$        & $\sqsupset$ & $\overlap$      & $\disj$  \\ 
                                                                                               \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule{5-9}
    1 & $c_{n-1}’$      & $\sqsubset$       & & $c_{n-1}’$  & -          & -           & -        & -               \\ 
    2 & $c_{n-1}’$      & $=$               & & $c_{n-1}’$  & -          & -           & -        & -               \\ 
    3 & $\ntsa$         & $\sqsupset$       & & $\ntsa$     & $\ntsa$    & $\ntsa$     & $\ntsa$  & -               \\ 
    4 & $\ntsa$         & $\overlap$        & & $\ntsa$     & -          & -           & $\ntsa$  & -               \\ 
    5 & $\neg c_{n-1}’$ & $\disj$           & & -           & -          & -           & -        & $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}
This case is a bit different than the previous ones. Because $r=\sqsubset$ and hence $c_n \sqsubset c_{n-1}$, class $c_n$ does not constrain class $c_{n-1}$ in any way. Consequently, despite that a valid transcription for $c_{n-1}$ had already been established for level $n-1$ and, hence, still holds logically, practically $c_{n-1}\vldtranscript{(\theta_n)}$ does not constrain $T_{\ctx_{n-1}}(c_{n-1})$. We conclude:
\begin{equation}\label{eq:cn-1_ctxn_sub}
  T_{\ctx_n}(c_{n-1}) \; = \; T_{\ctx_{n-1}}(c_{n-1}) \qquad \text{for } \ctx_n \, = \, ( \sqsubset, \theta_n, =, \ctx_{n-1}) 
\end{equation}
In other words, the information added by this case does not add anything to the transcription that was already available in the original atomic case as specified in \cref{tab:atomic-class-transcriptions}, on condition that the context remains logically consistent.  

Now that we have addressed the transcriptions for class $c_{n-1}$, let’s turn our attention to the transcription for class $c_n$. Consider case \ref{fig:medcxt-e_p-p_e-b_e} (a), viz. context $\ctx_n = \pair{=, \theta_n, \sqsupset, \ctx_{n-1}}$. Since the intra-ontological relation $r$ specifies that $c_n = c_{n-1}$, it follows that:
\begin{equation}\label{eq:transcr_cn_ctxn_eq}
c_n\vldtranscript{( =, \theta_n, \sqsupset, \ctx_{n-1})} = c_{n-1}\vldtranscript{( =, \theta_n, \sqsupset, \ctx_{n-1})}
\end{equation}

On considering cases \ref{fig:medcxt-e_p-p_e-b_e} (b) and (c), viz. contexts $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$ and $\ctx_n = \pair{\sqsubset, \theta_n, =, \ctx_{n-1}}$, the transcription results for class $c_n$, $T_{(\sqsupset, \theta_n, =, \ctx_{n-1})}(c_n)$ and $T_{(\sqsubset, \theta_n, =, \ctx_{n-1})}(c_n)$, are summarised in \cref{tab:transcr_cn_ctxn_sup,tab:transcr_cn_ctxn_sub}, respectively.

\begin{table}[h]
  \centering
  \caption{Valid transcription for $T_{\ctx_n}(c_n)$ for case \ref{fig:medcxt-e_p-p_e-b_e} (b), i.e., under context $\ctx_n = \pair{\sqsupset, \theta_n, =, \ctx_{n-1}}$.}
  \label{tab:transcr_cn_ctxn_sup}
  \begin{tabular}{cc@{\hspace{4px}}c@{\hspace{5px}}lccccc}
    \toprule
    $c_n \vldtranscript{(\sqsupset, \theta_n, =, \ctx_{n-1})}$ & \multicolumn{2}{c}{Context $\ctx_{n-1}$} & & \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    & \multicolumn{1}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} & \multicolumn{1}{c}{$\theta_{n-1}$}
                                           & & $\sqsubset$ & $=$        & $\sqsupset$ & $\overlap$ & $\disj$  \\ \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule{5-9} 
    1 & $c_{n-1}’$      & $\sqsubset$      & & $c_n’$      & $c_n’$     & $\ntsa$     & $\ntsa$    & -               \\ 
    2 & $c_{n-1}’$      & $=$              & & -           & -          & $\ntsa$     & -          & -               \\ 
    3 & $\ntsa$         & $\sqsupset$      & & -           & -          & $\ntsa$     & -          & -               \\ 
    4 & $\ntsa$         & $\overlap$       & & -           & -          & $\ntsa$     & $\ntsa$    & -               \\ 
    5 & $\neg c_{n-1}’$ & $\disj$          & & -           & -          & $\ntsa$     & $\ntsa$    & $\neg c_{n-1}’$ \\ \bottomrule
  \end{tabular}
\end{table}
\begin{table}[h]
  \centering
  \caption{Valid transcription for $T_{\ctx_n}(c_n)$ for case \ref{fig:medcxt-e_p-p_e-b_e} (c), i.e., under context $\ctx_n = \pair{\sqsubset, \theta_n, =, \ctx_{n-1}}$.}
  \label{tab:transcr_cn_ctxn_sub}
  \begin{tabular}{cc@{\hspace{4px}}c@{\hspace{5px}}lccccc}
    \toprule
    $c_n \vldtranscript{(\sqsubset, \theta_n, =, \ctx_{n-1})}$ & \multicolumn{2}{c}{Context $\ctx_{n-1}$} & & \multicolumn{5}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{5-9}
    & \multicolumn{1}{c}{$c_{n-1} \vldtranscript{\ctx_{n-1}}$} & \multicolumn{1}{c}{$\theta_{n-1}$}
                                           & & $\sqsubset$ & $=$ & $\sqsupset$ & $\overlap$ & $\disj$  \\ \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule{5-9} 
    1 & $c_{n-1}’$      & $\sqsubset$      & & $c_n’$  & -       & -           & -          & -           \\ 
    2 & $c_{n-1}’$      & $=$              & & $c_n’$  & -       & -           & -          & -           \\ 
    3 & $\ntsa$         & $\sqsupset$      & & $c_n’$  & $c_n’$  & $\ntsa$     & $\ntsa$    & $\neg c_n’$ \\  
    4 & $\ntsa$         & $\overlap$       & & $c_n’$  & -       & -           & $\ntsa$    & $\neg c_n’$ \\ 
    5 & $\neg c_{n-1}’$ & $\disj$          & & -       & -       & -           & -          & $\neg c_n’$ \\ \bottomrule
  \end{tabular}
\end{table}
For case \ref{fig:medcxt-e_p-p_e-b_e} (b) there is no substantial difference in $T_{( \sqsupset, \theta_n, =, \ctx_{n-1})}(c_n)$ whether context $\ctx_n$ is taken into account (\cref{tab:transcr_cn_ctxn_sup}) or not (\cref{tab:atomic-class-transcriptions}): For the columns where the original shortcomings occurred, i.e., $\theta_n \in \{\sqsupset, \overlap \}$, a more specific transcription can not be generated. This is not surprising since the information that has been added into context $\ctx_n$, i.e., $c_n \sqsupset c_{n-1}$, does not constrain in any way correspondence $\mu = \tuple{c_n, c_n’, \theta_n}$. In conclusion:
\begin{equation}\label{eq:cn_ctxn_sup}
  c_n\vldtranscript{( \sqsupset, \theta_n, =, \ctx_{n-1})} \; = \; c \vldtranscript{\theta} 
\end{equation}
Contrarily, for \cref{tab:transcr_cn_ctxn_sub} (case (c)), $c_{n-1} \sqsupset c_n$ enforces that the transcription of $c_{n-1}$ constrains the transcription of $c_n$; however, this additional constraint is cancelled out by the equivalence that holds between $c_n’$ and $c_{n-1}’$. Indeed this latter would not be the case for contexts where $r’ \neq =$, not shown here. In conclusion:
\begin{equation}\label{eq:cn_ctxn_sub}
  c_n\vldtranscript{( \sqsubset, \theta_n, =, \ctx_{n-1})} \; = \; c \vldtranscript{\theta} 
\end{equation}

We can summarise the conclusions as follows:

1. The logical consistency of the transcription is defined by the transcription context, i.e., $T_{\ctx_n}(c_n) = T_{\ctx_n}(c_{n-1}) = -$ for logically inconsistent contexts;
2. The resulting transcription for $c_{n-1}$ in transcription context $\ctx_n$ is the intersection of the transcription at context level $n$ and those at the lower levels;   
    1. Introducing new information brings about subcases that *do* generate more specificity in the transcription for $c_{n-1}$ where, originally, a valid transcription was not possible. Case (a) provides for alternative transcriptions, i.e., columns $\theta_n \in \set{\sqsubset, =}$ in \cref{tab:transcr_cn-1_ctxn_sup}, so by introducing more (context) information we have gained a 50% improvement over the atomic class context. When we look at case (b) in \cref{tab:transcr_cn-1_ctxn_sup}, a potential transcription for the hard case $\theta_n = \sqsupset$ is available as well for rows 3 and 4, as explained in \cref{rmk:anc}; an improvement of 66% over the atomic case. Moreover, for rows 1, 2, and 5, both cases (a) and (b) provide for a transcription for $\theta_n \in \{ \sqsupset, \overlap \}$ for all points where the context is logically consistent. Both cases (a) and (b) provide for a more accurate transcription for $\theta_{n-1} = \disj$;
    2. Subcases exist that do not generate a more specific context. Indeed, the information added by case \ref{fig:medcxt-e_p-p_e-b_e} (a) renders insufficient knowledge to provide for an alternative transcription for the problematic rows 3 and 4, as is shown in \cref{tab:transcr_cn-1_ctxn_eq}, columns $\theta_n \in \{ \sqsupset, \overlap \}$.
3. The resulting transcription for $c_n$ in transcription context $\ctx_n$ is not different than that of the original atomic case, except when an intra-ontological equivalence holds between $c_n$ and $c_{n-1}$. In fact, we can only expect a more specific transcription for level $n$ when taking context $\ctx_{n+1}$ into consideration, viz. on the next higher induction level $n+1$. This holds also for those subcases from the previous conclusion 2.2 above.  

So far we only have used examples from the transcription model \ref{fig:gen-class-transc-models}(a). We show in the next section the reasoning that applies for part (b) of the transcription model.

<!-- Page definitions -->
[def:MedcxtSup]: src\images\MedCxt-eq_sup-sup_eq-sub_eq.png {#fig:medcxt-e_p-p_e-b_e width=90%}


## Transcribing over an  $r, r'\in \set{\protect\overlete, \protect\overlinc, \protect\displete, \protect\disjoinc}$  class contexts ##
In this Section we consider the contexts that emerges from the transition model that is in between \cref{fig:gen-class-transc-models} (a) and (b). This transition model emerges by the introduction of $r’ \in \set{\overlete, \overlinc, \displete, \disjoinc}$, viz. conform \cref{fig:gen-class-transc-models} (b), while continuing $r \in \set{\sqsubset, =, \sqsupset}$, viz. conform \cref{fig:gen-class-transc-models} (a). Consequently, to provide reference for the (in)completeness aspect of the intra-ontological relation $r’$ the subsuming class $c’$ emerges. This has been depicted in \cref{fig:medcxt-r}, representing 3 cases, (a)-(c), one for each intra-ontological relationship $r \in \set{\sqsubset, =, \sqsupset}$, respectively. In other words, case (a) considers context $\ctx_n = \pair{\sqsubset, \theta_n, r’, \ctx_{n-1}}$, case (b) represents $\ctx_n = \pair{=, \theta_n, r’, \ctx_{n-1}}$, and case (c) represents $\ctx_n = \pair{\sqsupset, \theta_n, r’, \ctx_{n-1}}$.

![A correspondence over an \emph{implied class context}, conforming to the model in between \cref{fig:gen-class-transc-models} (a) and (b). Class $c’$ subsumes both classes $c_{n-1}’$ and $c_n’$ and forms the reference for the (in)completeness relation $r’$. Case (a): $r = \sqsubset$, case (b): $r = `=’$, case (c): $r = \sqsupset$. All cases (a)-(c) build upon the valid transcription under context $\ctx_{n-1}$, whilst their current context $\ctx_n = \pair{r, \theta_n, r’, \ctx_{n-1}}$ only vary in $r$ and $r’$.][def:MedcxtR]

The transcription of $c_{n-1}$ under context $\ctx_n$, i.e., cases \ref{fig:medcxt-r}(a) through (c), is presented in \crefrange{tab:transcr_cn-1_ctxn_pair-sup_a}{tab:transcr_cn-1_ctxn_pair-sup_c} respectively\todo{ brandtp, 30-4-2019 Tabel case (a) nog invullen} . Subsequently, we present the transcription of $c_n$ under context $\ctx_n$ in \cref{tab:transcr_cn_ctxn_pair-sup_a}. Additionally to the previous section and tables, though, we now include all four relations $r’\in \set{\overlete, \overlinc, \displete, \disjoinc }$ and their valid transcriptions. This results in a 3-dimensional table, which we reduce to a presentable 2-dimensional tableau by inserting a $2 \times 2$ quadrant for each transcription cell that can then denote the valid transcriptions for each of the four relations $r’$.  

\begin{table}[h]
  \centering
  \caption{Transcribing $c_{n-1}$ for case \ref{fig:medcxt-r} (a), i.e., under context $\ctx_n = \pair{\sqsubset, \theta_n, r’, \ctx_{n-1}}$.}
  \label{tab:transcr_cn-1_ctxn_pair-sup_a}
  \begin{tabular}{cccrlcrlrlrlrlrl}
    \toprule
    & \bc{Context $\ctx_{n-1}$} & \bc{$r’$} & & \multicolumn{10}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{7-16} 
    & $c_{n-1} \vldtranscript{\ctx_{n-1}}$  & $\theta_{n-1}$ & & & 
        & \bc{$\sqsubset$} & \bc{$\equiv$}   & \bc{$\sqsupset$} & \bc{$\overlap$}  & \bc{$\disj$} \\ 
    \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule(lr){4-5} \cmidrule(lr){7-8} \cmidrule(lr){9-10} \cmidrule(lr){11-12} \cmidrule(lr){13-14} \cmidrule(lr){15-16}     
    & \br{$c_{n-1}’$} & \br{$\sqsubset$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$c_{n-1}’$} & \br{$=$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$\ntsa_n$} & \br{$\sqsupset$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$\ntsa_n$} & \br{$\overlap$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$\neg c_{n-1}’$} & \br{$\disj$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ \bottomrule
  \end{tabular}
\end{table}

\begin{table}[h]
  \centering
  \caption{Transcribing $c_{n-1}$ for case \ref{fig:medcxt-r} (b), i.e., under context $\ctx_n = \pair{=, \theta_n, r’, \ctx_{n-1}}$.}
  \label{tab:transcr_cn-1_ctxn_pair-sup_b}
  \begin{tabular}{cccrlccccccccccc}
    \toprule
    & \bc{Context $\ctx_{n-1}$} & \bc{$r’$} & & \multicolumn{10}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{7-16} 
    & $c_{n-1} \vldtranscript{\ctx_{n-1}}$  & $\theta_{n-1}$ & & & 
        & \bc{$\sqsubset$} & \bc{$\equiv$}   & \bc{$\sqsupset$} & \bc{$\overlap$}  & \bc{$\disj$} \\ 
    \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule(lr){4-5} \cmidrule(lr){7-8} \cmidrule(lr){9-10} \cmidrule(lr){11-12} \cmidrule(lr){13-14} \cmidrule(lr){15-16}     
    & \br{$c_{n-1}’$} & \br{$\sqsubset$} & $\displete$ & $\disjoinc$ & 
        & -           & -            & - & - & - & - & - & - & \bc{$c_{n-1}’$} \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & \bc{$c_n’\sqcap c_{n-1}’$} & - & - & - & - & \bc{$c_{n-1}’$} & \bc{$c_n’\sqcap c_{n-1}’$}  \\
\\     
    & \br{$c_{n-1}’$} & \br{$=$} & $\displete$ & $\disjoinc$ & 
        & - & - & - & - & - & - & -               & - & \bc{$c_{n-1}’$} \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & - & - & - & - & - & - & \bc{$c_{n-1}’$} & - & -  \\
\\     
    & \br{$\ntsa_n$} & \br{$\sqsupset$} & $\displete$ & $\disjoinc$ & 
        & - & - & - & - & \bc{\br{$c’$}} & \bc{\br{$c_{n-1}’\sqcup c_n’$}} & \br{-} & $c’\sqcap \neg c_n’$ \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & - & - & - & - & \bc{}          & \bc{}                           &        & - \\
\\     
    & \br{$\ntsa_n$} & \br{$\overlap$} & $\displete$ & $\disjoinc$ & 
        & -    & -    & -    & -    & \bc{\br{$c_n’\sqcup c_{n-1}’$}} & \bc{\br{$c_{n-1}’\sqcup c_n’$}} & \br{-} & \br{$\neg c_n’ \sqcap c’$} \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & \bc{$c_n’$} & \bc{$c_n’$} & \bc{} & \bc{} &   &   \\
\\     
    & \br{$\neg c_{n-1}’$} & \br{$\disj$} & $\displete$ & $\disjoinc$ & 
        & \bc{$c_n’$} & \bc{$c_n’$} & - & $\neg c_{n-1}’ \sqcap c’$ & \br{-} & \br{$\neg c_{n-1}’ \sqcap c’$} & \br{-} & \br{$\neg c_{n-1}’\sqcap \neg c_n’$} \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & \bc{$c_n’\sqcap c_{n-1}’$} & - & - & - & - & - &   &   \\ \bottomrule
  \end{tabular}
\end{table}

\begin{table}[h]
  \centering
  \caption{Transcribing $c_{n-1}$ for case \ref{fig:medcxt-r} (c), i.e., under context $\ctx_n = \pair{\sqsupset, \theta_n, r’, \ctx_{n-1}}$.}
  \label{tab:transcr_cn-1_ctxn_pair-sup_c}
  \begin{tabular}{cccrlcrlrlrlrlrl}
    \toprule
    & \bc{Context $\ctx_{n-1}$} & \bc{$r’$} & & \multicolumn{10}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{7-16} 
    & $c_{n-1} \vldtranscript{\ctx_{n-1}}$  & $\theta_{n-1}$ & & & 
        & \bc{$\sqsubset$} & \bc{$\equiv$}   & \bc{$\sqsupset$} & \bc{$\overlap$}  & \bc{$\disj$} \\ 
    \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule(lr){4-5} \cmidrule(lr){7-8} \cmidrule(lr){9-10} \cmidrule(lr){11-12} \cmidrule(lr){13-14} \cmidrule(lr){15-16}     
    & \br{$c_{n-1}’$} & \br{$\sqsubset$} & $\displete$ & $\disjoinc$ & 
        & - & - & - & - & \bc{\br{$c_{n-1}’$}} & \bc{\br{$c_{n-1}’$}} & \bc{\br{$c_{n-1}’$}} \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & \bc{$c_{n-1}’\sqcap c_n’$} & - & - & \bc{} & \bc{} & \bc{}  \\
\\     
    & \br{$c_{n-1}’$} & \br{$=$} & $\displete$ & $\disjoinc$ & 
        & - & - & - & - & \bc{\br{$c_{n-1}’$}} & \bc{\br{$c_{n-1}’$}} & \bc{\br{$c_{n-1}’$}} \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & - & - & - & - & \bc{} & \bc{} & \bc{}  \\
\\     
    & \br{$\ntsa_n$} & \br{$\sqsupset$} & $\displete$ & $\disjoinc$ & 
        & - & - & - & - & \bc{\br{$\ntsa_n$}} & \bc{\br{$\ntsa_n$}} & $\ntsa_n$ & $\ntsa_n$ \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & - & - & - & - & \bc{} & \bc{} & - & -  \\
\\     
    & \br{$\ntsa_n$} & \br{$\overlap$} & $\displete$ & $\disjoinc$ & 
        & - & - & - & - & \bc{\br{$\ntsa_n$}} & \bc{\br{$\ntsa_n$}} & $\ntsa_n$ & $\ntsa_n$ \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & \bc{$c_{n-1}’\sqcup c_n’$} & \bc{$c_{n-1}’\sqcup c_n’$} & \bc{} & \bc{} & - & -  \\
\\     
    & \br{$\neg c_{n-1}’$} & \br{$\disj$} & $\displete$ & $\disjoinc$ & 
        & \bc{$c_n’$} & \bc{$c_n’$} & \bc{\br{$\neg c_{n-1}’$}} & \bc{\br{$\neg c_{n-1}’$}} & \bc{\br{$\neg c_{n-1}’\sqcup \neg c_n’$}} \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        & \bc{$c_{n-1}’\sqcup c_n’$} & \bc{$c_{n-1}’\sqcup c_n’$} & \bc{} & \bc{} & \bc{}  \\ \bottomrule
  \end{tabular}
\end{table}


Finally, consider the transcription\todo{ brandtp, 30-4-2019 Table nog Invullen}  for $c_n$ for case \ref{fig:fig:medcxt-r}(b), summarised in \cref{tab:transcr_cn_ctxn_pair-sup_a}.


\begin{table}[h]
  \centering
  \caption{Transcribing $c_n$ for case \ref{fig:medcxt-r} (a), i.e., under context $\ctx_n = \pair{\sqsubset, \theta_n, r’, \ctx_{n-1}}$.}
  \label{tab:transcr_cn_ctxn_pair-sup_a}
  \begin{tabular}{cccrlcrlrlrlrlrl}
    \toprule
    & \bc{Context $\ctx_{n-1}$} & \bc{$r’$} & & \multicolumn{10}{c}{$\theta_n$} \\ \cmidrule(r){2-3} \cmidrule{7-16} 
    & $c_{n-1} \vldtranscript{\ctx_{n-1}}$  & $\theta_{n-1}$ & & & 
        & \bc{$\sqsubset$} & \bc{$\equiv$}   & \bc{$\sqsupset$} & \bc{$\overlap$}  & \bc{$\disj$} \\ 
    \cmidrule(lr){2-2} \cmidrule(lr){3-3} \cmidrule(lr){4-5} \cmidrule(lr){7-8} \cmidrule(lr){9-10} \cmidrule(lr){11-12} \cmidrule(lr){13-14} \cmidrule(lr){15-16}     
    & \br{$c_{n-1}’$} & \br{$\sqsubset$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$c_{n-1}’$} & \br{$=$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$\ntsa_n$} & \br{$\sqsupset$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$\ntsa_n$} & \br{$\overlap$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\
\\     
    & \br{$\neg c_{n-1}’$} & \br{$\disj$} & $\displete$ & $\disjoinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ 
    &                 &                  & $\overlete$ & $\overlinc$ & 
        &   &   &   &   &   &   &   &   &   &  \\ \bottomrule
  \end{tabular}
\end{table}

In conclusion, and similar to the results of the previous section, given the occurrence of several $\ntsa_n$ results in the tables, we cannot guarantee all correspondences to result in valid transcriptions. However, we have shown that taking the context of the transcription into account, many correspondences *do* provide for valid transcriptions, despite the semantic difference between a formal correspondence and the pragmatic transcription. Additionally, by returning a $\ntsa_n$ result, an *invalid* transcription and, hence, the emergence of phantom semantics, have been prevented. Finally, since the transcription results are independent on the particular ontologies and their alignment, this method shows that a genuine generic transcription process exists. What is left to do is to provide for a generic implementation of this transcription process, which is the subject of the next section. 

<!-- Page definitions -->
[def:MedcxtR]: src\images\MedCxt-r-theta-cprime_sup_cpn_rp_cpn-1-chi.png {#fig:medcxt-r width=35%}
# A cTRS as mediator #
Before we show how a transcription can be formulated as a conditional Term Rewriting System (cTRS), we will first provide for a small summary on term rewriting systems.
## (conditional) Term Rewriting Systems ##
We will first define some terminology that is used in the definition on a term rewriting system (TRS). This is basic material taken from [@Baader1998; and @Bezem2003]. We finish this section with a notion on the use of context $\ctx_n$ in a conditional term rewriting system (cTRS).

\begin{mmdef}[Terms]\label{def:terms}
Consider a signature $\Sigma$ of admitted symbols, and a countable, possibly infinite set of \emph{variables} $V$ with $V \cap \Sigma = \; \emptyset$. The set of \emph{terms} over $\Sigma$, denoted as $\ter(\Sigma, V)$, contains strings over $\Sigma \cup V$. More specifically:
\begin{align*}
  \Sigma^0    &= \; \text{denotes the set of functions with arity 0, i.e., atomic constant symbols,} \\
  \Sigma^n    &= \; \set{f^n}, n \geq 1, \text{ denotes the set of $n$-ary functions, and}\\
  V           &= \; \set{x_i \; | \; 0 \geq i \geq n}, \text{ denotes the set of variables $x_i$.} 
\end{align*}
Then, the set of terms $\ter(\Sigma, V)$ is defined inductively as:
\begin{align*}
  \forall x_i \in V      \; &: \; x_i \in \ter(\Sigma, V) \\
  \forall a \in \Sigma^0 \; &: \; a \in \ter(\Sigma, V)  \\
  \forall f^n \in \Sigma^n \; &: \; t_1, \ldots, t_n \in \ter(\Sigma, V) \; \Rightarrow \; f^n(t_1, \ldots, t_n) \in \ter(\Sigma, V) 
\end{align*}
\end{mmdef}

Furthermore:
\begin{itemize}[label={--}]
  \item $\var(t) \subseteq V$ denotes the set of variables that occur in term $t$
  \item A term $t$ is called a \emph{closed term}, or \emph{ground}, if it does not contain variables, i.e., when $\var(t) = \emptyset$. The set of closed terms are collectively denoted as $\ter_0(\Sigma, V)$, or $\ter(\Sigma, \emptyset)$, or simply $\ter(\Sigma)$. 
  \item $|t|$ denotes the \emph{length} of term $t$, i.e., 
  \begin{itemize}[label={-}]
    \item $x_i \in V, \; a \in \Sigma^0: \; |x_i| = |a| = 1$, and
    \item $|f^n(t_1, \ldots, t_n)| = |t_1| + \ldots |t_n| + 1$
  \end{itemize} 
\end{itemize}

\begin{mmdef}[$\Sigma$-identity]\label{def:sigma-identity}
A \emph{$\Sigma$-identity}, or simply an \emph{identity}, is a pair of terms $\pair{s, t} \in \ter(\Sigma, V) \times \ter(\Sigma, V)$, denoted as $s \approx t$, expressing an \emph{a priori} equality between both terms. We call $s$ the left-hand side (lhs) and $t$ the right-hand side (rhs) of the identity $s \approx t$.
\end{mmdef}

>The term *identity* is used for a pair $s \approx t$ to express that the equivalence $s = t$ holds *a-priori*, distinguishing it from the term *equation* that is used to express that the equivalence must be *solved* or *proven*.

\begin{mmdef}[Rewrite rule]\label{def:rewrite-rule}
A \emph{term rewriting rule} is a pair of terms $l, r \in \ter(\Sigma, V)$, such that:
\begin{subequations}
  \begin{align}
  l       &\not\in V          \\
  \var(l) &\supseteq \var(r)  
  \end{align}
\end{subequations}
Then, we denote $l \to r$ to indicate that $l$ can be replaced by $r$. A rewrite rule can be given a name, e.g., $\rho$, and we write $\rho : l \to r$.
\end{mmdef}

>Since a rewrite rule is directed, the second restriction (\ref{eq:novarintro}) is necessary to avoid the pathological case where variables are introduced by the process of rewriting. The first restriction (\ref{eq:distinctness}) assures that rewriting and variable substitution remain distinct.

\begin{mmdef}[Term rewriting]\label{def:term-rewriting}
Consider a signature $\Sigma$ and a set of variables $V$ disjoint from $\Sigma$. Assume terms $s, t \in \ter(\Sigma, V)$, represented as a term tree.

A rewrite rule $\rho : l \to r$ can be \emph{applied} to a term $s$ iff $\exists p \in \pos(s): s|_p \equiv \sigma(l)$:
\begin{align}
  s|_p         &: \; \text{denotes a subterm of $s$ that starts at position $p$ in $s$} \nonumber \\
  \sigma(l)    &: \; \text{denotes the result obtained by applying the variable substitution } \sigma: V \to \ter(\Sigma) \text{ to the term $l$} \nonumber 
\intertext{The \emph{result} term $t$ of applying a rewrite rule $\rho$ to a term $s$ is obtained as $t \equiv s[\sigma(r)]_p$:} 
  s[ \cdot ]_p &: \; \text{denotes a replacement of the subterm of $s$ that starts at position $p$ in $s$} \nonumber \\
\intertext{Then, a \emph{one-step rewrite} from $s$ to $t$ by $\rho$, denoted $s \to_\rho t$, is defined as: }
  & \; s|_p \equiv \sigma(l) \to_\rho s[\sigma(r)]_p \equiv t \label{eq:ctr} 
\end{align}
\end{mmdef}
The result of a one-step rewrite can be considered for another one-step rewrite when a proper rewrite rule is available. A finite or infinite sequence of one-step rewrites is called a *rewrite sequence* or *rewrite path*, denoted $a \to a_1 \to ... a_k \to b$ with $a, a_i, b \in \ter$. If we do not want to identify the particular rewrite path we denote $a \to b$. In either case we say that $a$ *rewrites* to $b$, and $b$ is the *rewrite* of $a$. A rewrite path is finite when the last element of the rewrite path is a term for which no rewrite rules apply. Such term is called an *end term*. The reflexive-transitive closure of $\to$ is denoted as $\trsrtc$.  
\begin{mmdef}[Term rewriting system]\label{def:TRS}
A \emph{term rewriting system} (TRS) is an ARS with $\EuScript{R} = \pair{\Sigma, R}$, where:
\begin{itemize}[label={--}]
  \item $\Sigma$ represents the set of objects, denoting a signature according to \cref{def:terms}, and 
  \item $R$ represents a set binary directed relations over $\ter(\Sigma, V)$ that express rewrite rules according to \cref{def:rewrite-rule}. 
\end{itemize} 
\end{mmdef}

Consequently, a TRS is a combination of set of terms (\cref{def:terms}), which can be represented as a term tree, with a set of rewrite rules (\cref{def:rewrite-rule}). For $a, a_i, b \in \ter(\Sigma, V)$, we have $a \trsrtc b$ if and only if there is a finite rewrite sequence $a \equiv a_0 \to a_1 \to ... \to a_n \equiv b \; (n \ge 0)$. 

Notation: 

* $a$ is *in normal form* if there exists no $b$ such that $a \to b$; 
* $b$ is *a normal form* of $a$ iff $a \trsrtc b$ and $b$ is in normal form;
* $b$ is a *unique normal form* (UNF) of $a$, denoted as $\unf{a}$, iff for all normal forms $c_i$ of $a$ it holds that $b \equiv c_i$, i.e., $b$ is the only normal form of $a$;
* $a$ and $b$ are *joinable* iff there exists a $c$ such that $a \trsrtc c \ctrsrt b$, denoted as $\trsjnb{a}{b}$. 
* The rewrite relation $\to$ is *confluent* iff $b_1 \ctrsrt a \trsrtc b_2 \; \Rightarrow \; \trsjnb{b_1}{b_2}$, i.e., all rewrite paths that start at $a$ will have one shared end term;
* The rewrite relation $\to$ is *terminating* iff no infinite term sequence $a \to a_1 \to a_2 \to ...$ exists.

A further specialisation of a TRS introduces conditions to the effect that a given rule can be applied only if its condition, instantiated by the matching substitution, is satisfied. These are called *conditional* TRSs (CTRS), and are based on a set of conditional rewrite rules. Depending on the definition of the conditional rules, their evaluation may become undecidable. The following definition is adapted from [@Kirchner2006 def. 7.23]: 
\begin{mmdef}[Conditional rewrite rule]\label{def:crr}
\begin{subequations}\label{eq:crr}
A \emph{conditional rewrite rule} is a rewrite rule (\cref{def:rewrite-rule}) of the form
\begin{align}
  l       &\to r \text{ if } \Gamma \label{eq:crr-concl} \\ 
  \Gamma  &= (s_1 = t_1 \land s_2 = t_2 \land \cdots s_n = t_n) \label{eq:crr-cond} \\ 
\intertext{A conditional rewrite rule is equally restricted in the production of variables as a rewrite rule, hence:} 
  \var(l) &\supseteq \var(r) \cup \var(\Gamma) \label{eq:crr-v}
\end{align}
The $\Gamma$-part of the rule, \cref{eq:crr-cond}, is called the \emph{condition}, and it expresses exactly that: zero or more conditions that should all hold. The first part of the rule, \cref{eq:crr-concl}, is called the \emph{conclusion} and only applied on a term when the condition is satisfied. Collectively, the set of conditional rewrite rules is called a \emph{conditional rewrite system} and denoted as $R \subseteq \ter(\Sigma, V) \times \ter(\Sigma, V)$.
\end{subequations}
\end{mmdef}

In order to avoid an infinite recursion and its consequential introduction of undecidability, a hierarchy on the rules of the conditional rewrite system $R$ is enforced. Such hierarchy makes that in order for the rule’s conclusion to apply on a term, its condition has to be satisfied at a lower hierarchical level. To that end the rewriting relation $\to_R$ associated to the conditional rewriting system $R$ is defined inductively, as follows ([@Kirchner2006, def. 7.25] and [@Bezem2003, def. 3.5.5]):
\begin{mmdef}[Conditional rewrite relation]\label{def:crrel}
\begin{subequations}\label{eq:crrel}
Consider $R$ a conditional rewrite system as the collective conditional rewrite rules from \cref{def:crr}. The inductive definition of the conditional rewrite system at level $i \ge 0$, denoted $R_i$, reads as follows:
\begin{align}
  R_0     &: \set{ \rho_0: \, l \to r \; | \; (l, r) \in R } \label{eq:crrel-r} \\
  \begin{split}
  R_{i+1} &: R_i \; \cup \; \{ \rho_{i+1}: \, \sigma(l) \to \sigma(r) \; | \; l \to r \text{ if } \pair{s_1 = t_1 \land \ldots \land s_m = t_m} \in R \\
          &\qquad \land \forall j = \set{1, \ldots, m}: \sigma(s_j) \trsrtc_i \sigma(t_j) \} \label{eq:crrel-r_i} 
  \end{split}
\intertext{For the \emph{conditional rewrite relation} $\to_R$ it holds that}
  t \to_R t’ \; &\text{ iff } \; t \to_{R_i} t’ \quad \text{ for some } i \ge 0   \label{eq:crrel-rel} 
\end{align}
\end{subequations} 
\end{mmdef}

>An inductive definition requires a starting condition, here defined in \cref{eq:crrel-r} and specified by $\rho_0$ as a set of unconditional rewrite rules (\cref{def:rewrite-rule}). The essence on the inductive part of the definition, \cref{eq:crrel-r_i}, is to only consider conditional rewrite rules for which their condition, instantiated by the matching substitution $\sigma(\cdot)$, can be satisfied by rules that have already been defined at a lower hierarchy. In both [@Kirchner2006] and [@Bezem2003], three types of conditional rules are given that originate from [@Dershowitz1988] but we will use *normal conditional rewriting* only: \Cref{eq:crrel-r_i} demands that at induction level $i$, $\sigma(t_j)$ can be shown to be the normal form of $\sigma(s_j)$ for all terms in the condition of the rewrite rule.   


## Transcription as cTRS ##
Indeed, being a syntactic replacement of terms and values, we consider a transcription a specific application of a TRS which, after all, provides for a syntactic rewrite of terms over a specific alphabet. Since a transcription is initiated by its correspondence, the term rewriting that we are looking for is of the pattern $c_n \theta_n c_n’ \, \trsrtc \, c_n \vldtranscript{\ctx_n}$, with $c_n$, $c_n’$ and $\theta_n$ specified by some $\mu$. 

We first provide for a formal specification of an ontology in a way that suits the term rewriting discipline.
\begin{mmdef}[Ontology language, abstract syntax, theories, ontology]\label{def:ontology}
An \emph{ontology language}, denoted $L_{\ont{O}}$, is a formal language characterised by an alphabet $\Sigma_\ont{O} = \tuple{\Sigma_s, \Sigma_p, \Sigma_c }$ that consists of atomic symbols $\Sigma_s$, atomic predicates $\Sigma_p$, and connectives $\Sigma_c$, with:
\begin{align*}
  \Sigma_s \; &\subseteq \; I \cup V \cup \set{\emptyset} \\
  \Sigma_p \; &\subseteq \; C \cup R \cup P \cup T \\
  \Sigma_c \; &= \; \{ \sqsubset, \sqsupset, \equiv, \disj, \ndisjoint, \sqin, \sqni, \neg, \land, \lor, \to, \leftrightarrow , (, )\}
\end{align*}
where $C$, $R$, $P$, and $T$ denote the set of classes, relations, properties and data types, respectively; $I$ denotes the set of individuals of classes, relations and properties; $V$ denotes the set of values of type $T$, and $\Sigma_c$ represents connectives to formulate \emph{concept axioms} and \emph{concept expressions}. 

The \emph{abstract syntax}, denoted as $S_\ont{O} = \tuple{\Sigma_\ont{O}, G_\ont{O}}$, produces the ontology language $L_\ont{O}$ over alphabet $\Sigma_\ont{O}$ by grammar $G_\ont{O}$. Specifically, $G_\ont{O}$ represents the formal grammar for the propositional language, also known as sentential logic or truth-functional logic \cite[35]{Gamut1991}. Then, $L_{\ont{O}}$ is a set of well-formed strings, viz. the \emph{theories} that are admitted by ontology $\ont{O}$.   

An \emph{ontology} collects the abstract syntax together with a Domain of Interpretation (DoI), denoted $\EuScript{D}$, and an interpretation function $\intn: L_{\ont{O}} \to \EuScript{D}$ from the language and its theories to its DoI \cite[3.6.1]{Gamut1991}, and is denoted as $\ont{O} = \tuple{S_\ont{O}, \EuScript{D}, \intn(\cdot)}$.    
\end{mmdef}

We apply this definition on ontology and its related terms to adapt the TRS definitions from \cref{conditional-term-rewriting-systems}, where deemed necessary.
\begin{mmdef}[mediation terms]\label{def:med-terms}
Assume two ontologies, $\ont{O}$ and $\ont{O}’$, with alphabet $\Sigma_{\ont{O}} = \tuple{\Sigma_s, \Sigma_p, \Sigma_c}$ and $\Sigma_{\ont{O}’} = \tuple{\Sigma_s’, \Sigma_p’, \Sigma_c}$, which share $\Sigma_c$ \footnote{Although sharing $\Sigma_c$ is not required, it is often the case. Still, extending this definition for the opposite case is straightforward}. Assume the alphabets of each ontology extended with a differently notated but shared verum concept, and let $\Sigma = \pair{\Sigma_{\ont{O}} \cup \top} \cup \pair{\Sigma_{\ont{O}’} \cup \top’}$ denotes the signature of the transcription. Let $V$ denote a countable, possible infinite set of variables with $V \cap \Sigma = \; \emptyset$. The set of \emph{mediation terms} over $\Sigma$, denoted as $\mter(\Sigma, V)$, contains strings over $\Sigma \cup V$. More specifically:
\begin{align*}
  \Sigma^0    &= \; \set{\Sigma_s \cup \top} \cup \set{\Sigma_s’ \cup \top’} \text{, denotes the set of individuals from } \ont{O} \text{ and } \ont{O}’,\\
  \Sigma^n    &= \; \Sigma_p \cup \Sigma_p’ \cup \Sigma_c \text{, denotes the set of $n$-ary predicates and connectives from } \ont{O} \text{ and } \ont{O}’, \text{ and}\\
  V           &= \; \set{x_i \; | \; 0 \geq i \geq n}, \text{ denotes the set of variables $x_i$.} 
\end{align*}
Then, the set of mediation terms $\mter(\Sigma, V)$ is defined inductively as:
\begin{align*}
  \forall x_i \in V      \; &: \; x_i \in \mter(\Sigma, V) \\
  \forall a \in \Sigma^0 \; &: \; a \in \mter(\Sigma, V) \\
  \forall p \in \Sigma^n \; &: \; t_1, \ldots, t_n \in \mter(\Sigma, V) \; \Rightarrow \; p(t_1, \ldots, t_n) \in \mter(\Sigma, V)  
\end{align*}     
\end{mmdef}
The difference between this \cref{def:med-terms} and the original \cref{def:terms} is to assure that $\mter(\Sigma, V)$ includes terms that are formulated over the two ontologies, and furthermore, each of them including a differently denoted verum concept. This definition does not enforce that each mediation term is a valid ontological theory because this is irrelevant and even undesirable for mediation terms that occur as intermediate terms in the rewriting sequence. We do need to ensure, though, that the end terms of a term transcription is a valid ontological theory.    

\begin{mmdef}[Term identity]\label{def:term-identity}
A \emph{term identity}, or simply an \emph{identity}, is a pair of terms $\pair{s, t} \in \mter(\Sigma_\ont{O}, V) \times \mter(\Sigma_{\ont{O}’}, V)$, denoted as $s \approx t$, expressing an \emph{a priori} equality between both terms. We call $s$ the left-hand side (LHS) and $t$ the right-hand side (RHS) of the identity $s \approx t$. 
\end{mmdef}
The difference between this \cref{def:term-identity} and the original \cref{def:sigma-identity} is to assure that the identity represents pairs of semantic equivalent terms, the LHS of which is admitted by the source ontology and the RHS by the target ontology. This is not possible with the more general original definition that considers one language only.  

Regarding \cref{def:rewrite-rule,def:term-rewriting}, no other modifications are required other than their reference to $\mter$ as opposed to $\ter$.

## Conditional transcription rules ##
Based on the previous sections we now can specify the conditional term rewriting system that implements a generic transcription engine. The following table shows how the necessary characteristics of a transcription can be turned into sufficient requirements that we set on the CTRS.

--------------------------------------------------------------------------------------------------------------------------------------
 Req  Characteristic of a transcription                          Requirement on the specified CTRS
----- ---------------------------------------------------------- ---------------------------------------------------------------------
1     An atomic transcription $T_{(\theta)}(c)$ is defined by    A TRS is built by defining the proper rewrite rules. The terms        
      a correspondence $\mu$.                                    to be rewritten, e.g., the LHS of a transcription rule, is specified
                                                                 by correspondence $\mu$ as $c_n \theta_n c_n’$. 

                                                                 \vspace{-1pt}\space

2     Valid transcriptions are specified by                      The RHS of the transcription rules are specified by the tables in  
      $\vldtranscript{\ctx}$.                                    \cref{valid-transcriptions}, viz. $\vldtranscript{\ctx}$.

                                                                 \vspace{-1pt}\space

3     A transcription transcribes between two distinct           Consider a set of mediation terms $\mter(\Sigma, V)$ that separates 
      alphabets.                                                 in its signature the alphabets $\ont{O}$ and $\ont{O}’$.

                                                                 \vspace{-5pt}\space

4     A transcription should not introduce phantom semantics.    $\unf{c_n} \equiv c_n \vldtranscript{\ctx_n}$, and    
                                                                 condition $\Gamma_n$ implements $r, r’, \ctx_{n-1} \in \ctx_n$ 
                                                                 according to the transcription model as depicted in 
                                                                 \cref{fig:gen-class-transc-models}.

                                                                 \vspace{1pt}\space  

5     Every transcription should terminate.                      Show that the specified CTRS terminates.

                                                                 \vspace{-9pt}\space

6     Despite the strategy used about which correspondence to    Show that for the specified CTRS the confluence property holds and
      apply first during transcribing a theory, every strategy   that $\forall c_n \in \ont{O}: \unf{c_n} \in \ont{O}’$.
      should yield the same transcription result.
--------------------------------------------------------------------------------------------------------------------------------------

   : Requirements for implementing transcriptions as conditional term rewriting systems.\label{tab:reqs}

The unconditional rewrite rules for any transcription stem from $\ctx = \pair{\theta}$, eq. \ref{eq:act}, and read as follows:
\begin{subequations}\label{eq:utr-all}
\begin{alignat}{2}
  \rho_{(\theta)}   &:\quad&            l \, &\to_0 \, r    \label{eq:utr}\\
\intertext{and specifically}
  \rho_{_\sqsubset} &:\quad&  c \sqsubset c’ &\to_0 c’      \label{eq:utr-sub} \\
  \rho_{_\equiv}    &:\quad&     c \equiv c’ &\to_0 c’      \label{eq:utr-eq} \\
  \rho_{_\sqsupset} &:\quad&  c \sqsupset c’ &\to_0 \ntsa’  \label{eq:utr-sup} \\
  \rho_{_\overlap}  &:\quad&   c \overlap c’ &\to_0 \ntsa’  \label{eq:utr-overlap} \\
  \rho_{_\disj}     &:\quad&      c \disj c’ &\to_0 \neg c’ \label{eq:utr-disj} \\
  \rho_{_\top}      &:\quad&          \ntsa’ &\to_0 \ntsa   \label{eq:utr-ntsa}  
\end{alignat}
\end{subequations}
Collectively, these rules represent the \emph{unconditional transcription rules}. Note that these unconditional transcription rules apply to the most specific classes in ontology $\ont{O}$ only, viz. $\set{c \; | \; \forall b, c \in \ont{O}: b \sqsubset c \; \Rightarrow \; b \equiv \bot}$. 

For conditional transcriptions we need to specify the conditions under which the rules apply. Note that two different inductions dimensions apply here: one is about the transcription model, depicted in \cref{fig:gen-class-transc-models} and denoted with index $n$, whereas the other is about the cTRS that is being designed, denoted with index $k$. Furthermore, in the transcription model the induction is taking place over levels $n-1$ and its adjacent higher level of $n$, whereas in the cTRS model it takes place over levels $k$ and $k+1$. These induction dimensions apply independently from each other. The reason for this is laid in a conflict between the inductive formulations of the class transcription model in \cref{valid-transcriptions} and a cTRS, \cref{eq:crrel-r_i}. Where in the latter $c_{n-1} \vldtranscript{\ctx_n}$ depends on the higher level context $\ctx_n$, e.g., \cref{eq:cn-1_ctxn_sup}, the former explicitly demands that the condition that applies at level $k+1$ can be satisfied by rules that can be resolved at a lower hierarchy, \cref{eq:crrel-r_i}.     

\begin{mmdef}[Conditional transcription relation]\label{def:ctrel} 
\begin{subequations}\label{eq:ctrel} 
 A \emph{conditional transcription relation} is a conditional rewrite relation (\cref{def:crrel}) of the form
  \begin{align}
    R_0     &: \set{\rho_{_\sqsubset}, \rho_{_\equiv}, \rho_{_\sqsupset}, \rho_{_\overlap}, \rho_{_\disj}, \rho_{_\top}}  \label{eq:ctrel-a} \\
    R_{k+1} &: R_k \; \cup \; \set{ \rho_{k+1,\ctx_n} : \, \sigma(l) \to \sigma(r) \; | \; l \, \to \, r \; \text{if } \Gamma_{k,\ctx_n} } \label{eq:ctrel-b} \\   
    \intertext{where $\Gamma_{k,\ctx_n}$ consists of $m$ conditions, each of them ($\forall_{0 < j \leq m}$) specified as:}  
    \ctx_n      &\land \pair{s_j, t_j} \in R_k  \label{eq:ctrel-c} \\
    s_j         &= c_{j,n-1} \, \theta_{j,n-1} \, c_{j,n-1}’ \label{eq:ctrel-d} \\
    t_j         &= c_{j,n-1} \vldtranscript{(\theta_{j,n})} \sqcap c_{j,n-1} \vldtranscript{\ctx_{j,n-1}}  \label{eq:ctrel-e} \\
    \sigma(s_j) &\trsrtc_k \sigma(t_j) \label{eq:ctrel-f}      
  \end{align}
  Collectively, these rules are denoted $R_{k+1} = R_k \cup \rho_{k+1,\ctx_n}$, representing the \emph{conditional transcription rules} as follows:
  \begin{equation}\label{eq:tc-as-ctr}
    c_{n-1} \vldtranscript{\ctx_n} \quad \Longleftrightarrow \quad \rho_{k+1,\ctx_n}: \, \sigma(l) \, \to_{k+1} \, \sigma(r) \; \text{if } \Gamma_{k,\ctx_n}   
  \end{equation}    
\end{subequations}  
\end{mmdef}
With $\rho_{k+1,\ctx_n}$ we emphasise that the particular rewrite rule is completely defined by context $\ctx_n$. Furthermore, the definitions for \cref{eq:ctrel-a,eq:ctrel-b,eq:ctrel-c} follow directly from \cref{def:crr,def:crrel}, with \cref{eq:ctrel-c} additionally demanding the existence of the particular transcription context. \Cref{eq:ctrel-d} and \cref{eq:ctrel-e} implement Req.1 respectively Req.2 from \cref{tab:reqs}



Discussion

Ik ben er niet zeker van dat \cref{def:ctrel} de waterdichte oplossing is van het hierboven genoemde conflict tussen het inductieve transcriptiemodel en het inductieve cTRS model. Inderdaad heb ik de beide inductiedimensies losgekoppeld, want
 
* het transcriptie inductiemodel uit \cref{fig:gen-class-transc-models} legt geen voorwaarde op aangaande de wijze waarop we door de inductie heen moeten lopen. Het stelt alleen dat een context $\ctx_n$ bestaat uit *een* combinatie van $r, \theta_n, r’, \ctx_{n-1}$ en dat zegt niks over hoe de context $\ctx_{n-1}$ op een lager inductienivo er uitziet;
* het cTRS inductiemodel legt geen voorwaarde op over de inhoud van de rewrite rules en alleen over het feit dat de conditie op een lager inductienivo moet kunnen worden geevalueerd. Dat betekent dat ik voor een specifieke correspondence $\pair{e, e’, \theta}$ een specifieke inrichting zou kunnen maken van de andere correspondences, zodanig dat aan de cTRS inductie-eis kan worden voldaan.

Toch lijkt er nog steeds een vorm van afhankelijkheid te bestaan, want dit zou betekenen dat ik voor elke specifieke correspondence een specifieke volgordelijkheid van de rewrite rules, dus de correspondences en bijbehorende transcriptiemodellen, moet maken. En ik zie niet hoe ik dat op een generieke wijze kan invullen. Derhalve lijkt het formaliseren van een transcriptie als cTRS op deze wijze niet mogelijk te zijn.  

Klopt deze gedachtengang?  




We define the one-step rewrite for a transcription as follows.
\begin{align}
  s|_p &\equiv \sigma(l) \equiv \sigma(c_{n-1} \, \theta_{n-1} \, c_{n-1}’) \\
  \sigma(r) &\equiv \sigma(c_{n-1} \vldtranscript{(\theta_n)} \sqcap c_{n-1} \vldtranscript{\ctx_{n-1}}) \\ 
  \intertext{Using these equivalences in \cref{eq:ctr}, we arrive at: }
  s|_p \equiv \sigma(c_{n-1} \, \theta_{n-1} \, c_{n-1}’) &\to_\rho s[\sigma(c_{n-1} \vldtranscript{(\theta_n)} \sqcap c_{n-1} \vldtranscript{\ctx_{n-1}})]_p \equiv t \\
  \intertext{where }
  &\rho \text{ is uniquely defined by } \ctx_n \\
  &t_n’ \text{ is ground normal form with respect to the unconditional system, and} \\
  &c_n \trsrtc t_n’
\end{align}


$\sigma(c_n) \, \to_\rho \, \sigma(t_n’)$

We now consider use Case \ref{fig:medcxt-sup}(a) to show how transcription $T_{\ctx_n}(c_n)$ can be specified as rules and conditions. The transcription context for this case reads $\ctx_n = \pair{\equiv, \theta_n, \sqsupset, \ctx_{n-1}}$, which will translate into the condition whilst the transcription rule will be based on the valid transcription from \cref{eq:transcr_cn_ctxn_eq} (which equals eq.\ref{eq:cn-1-ctxn-eq}).  

\begin{alignat}{5}
  \rho_{n+1,1} &: \quad c_{n+1} \sqsubset c_{n+1}’ &&\to \; c_{n+1}’  &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \label{eq:transcription-rho1}\\
  \rho_{n+1,2} &: \quad c_{n+1} \equiv c_{n+1}’    &&\to \; c_{n+1}’  &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \; \land \;
    \theta_n = \, \sqsupset  \\
  \rho_{n+1,3} &: \quad c_{n+1} \overlap c_{n+1}’  &&\to \; \neg c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,4} &: \quad c_{n+1} \disj c_{n+1}’     &&\to \; \neg c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,5} &: \quad c_{n+1} \sqsubset c_{n+1}’ &&\to \; c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,6} &: \quad c_{n+1} \sqsubset c_{n+1}’ &&\to \; c_{n+1}’ \sqcap \neg c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,7} &: \quad c_{n+1} \overlap c_{n+1}’  &&\to \; \ntsa_{n+1} &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,8} &: \quad c_{n+1} \sqsupset c_{n+1}’ &&\to \; \ntsa_{n+1} &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \label{eq:transcription-rho8}  
\end{alignat}

We explain equations \crefrange{eq:transcription-rho1}{eq:transcription-rho8} collectively with the following generic pattern:

1. The (conditional) rewrite rules $\rho_{n+1}$, too, will apply the correspondence $\mu_{n+1} = \tuple{c_{n+1}, c_{n+1}’, \theta_{n+1}}$. This means that each correspondence will be reflected in a (conditional) rewrite rule; the rule’s LHS will reflect the transcriptum, whilst its RHS will reflect the transcribendum;
1. Following \cref{def:crrel}, the conditional rewrite rules are defined inductively, meaning that the condition $\Gamma$ should express elements from a lower hierarchy. This demand matches nicely with the inductive definition for the transcription model. The condition $\Gamma_n$ for the rewrite rule $\rho_{n+1}$ primarily applies the valid transcription from the lower hierarchical level, viz. $\vldtranscript{\ctx_n}$; 
1. Finally, as indicated in \cref{def:conditions-in-ctrs}, the condition $\Gamma$ may also express fixed predicates. For Case \ref{fig:medcxt-sup}(a), its transcription context reads $\ctx_n = \pair{\equiv, \theta_n, \sqsupset, \ctx_{n-1}}$. The terms $\theta_n$ and $\ctx_{n-1}$ have already be addressed in the previous two parts of this pattern, leaving terms $r_{n+1} = \equiv$ and $r_{n+1}’ = \sqsupset$. Although these terms are defined on hierarchical level $n+1$, they are not dependent on any rewriting and can therefore be considered fixed propositions that can be added to the condition.  

From this explanation it becomes clear that we can define the conditional part of a transcription as follows:
\begin{mmdef}[Transcription]\label{def:transcription}
  \begin{alignat}{5}
    \rho_{n+1} &: \quad \sigma\pair{c_{n+1} \theta_{n+1} c_{n+1}’} &&\to \; \sigma(t_{n+1}’)  &\quad \text{if} \quad 
      \sigma(c_n) \,   &\vldtranscript{\ctx_n} \, \sigma(t_n’) \; &\land \;
      r_{n+1}  &= \, r  \; &\land \;
      r_{n+1}’ &= \, r’ \; \land \;
      \theta_n = \, \theta  
  \end{alignat}
where $t_k’$ denotes the transcribendum that follows from the table that specifies the valid transcriptions for transcription context $\ctx_{k+1} = \pair{r, \theta_{k+1}, r’, \ctx_k}$.
\end{mmdef}
 
\begin{mmdef}[Transcription system]\label{def:transcription-trs}
A \emph{transcription system} (TS) is a TRS with $\EuScript{R} = \pair{\Sigma, R}$, where:
\begin{subequations}
 \begin{align}
  \Sigma &= \Sigma_{\ont{O}} \cup \Sigma_{\ont{O}’} \cup {\top} \text{ from \cref{def:med-terms}, and} \\ 
  c \vldtranscript{(\theta)} \quad \Longleftrightarrow \quad R_0  = \set{\rho_{_\sqsubset}, \rho_{_\equiv}, \rho_{_\sqsupset}, \rho_{_\overlap}, \rho_{_\disj}, \rho_{_\top}} \label{eq:tc-as-utr} \\
  c_{n-1} \vldtranscript{\ctx_n} \quad \Longleftrightarrow \quad \rho_{k+1,\ctx_n}: \, \sigma(l) \, \to_{k+1} \, \sigma(r) \; \text{if } \Gamma_{k,\ctx_n}
 \end{align} 
\end{subequations}
\end{mmdef}
## Discussion ##
# The confluence property of the mediator #
The following provides for a list of the more relevant properties of an ARS:

1. **Termination**: If it is always the case that after applying a finite number of rewriting steps some object is reached for which no more rules apply, the ARS is called *terminating*.
1. **Normalising**: If an object $o$ can be rewritten into an object $o’$ for which no more rules apply, such final object is called the *normal form*. If $o’$ is the unique normal form of $o$, then this is denoted as $\unf{o}$. If every object $o \in A$ has a normal form, the ARS is called *normalising*.
1. **Confluence**: Assume that object $o$ can be rewritten to $o_1$ as well as $o_2$ by application of different rules from $\set{ \to }$. Then, if we can always find an object $o’$ that is a successor of $o_1$ as well as $o_2$, this implies that rewriting of $o$ always leads to $o’$, independent of the strategy for applying rules. This confluence property of an ARS is a very favourable property, since it simplifies the rewriting process significantly.
1. **Convergence**: An ARS is called *convergent* if it is both terminating and confluent.

It is clear that the unconditional transcription rules from \cref{eq:tc-as-utr} do not induce phantom semantics.
# Validation #
# Related work #
To discuss:

1. Barnickel, N., Böttcher, J., & Paschke, A. (2010). Semantic mediation of information flow in cross-organizational business process modeling. CEUR Workshop Proceedings, 682, 21–28.
1. Mascardi, V., Locoro, A., Rosso, P.: Automatic ontology matching via upper ontologies: A systematic evaluation. IEEE Transact. Knowl. Data Eng. 22(5), 609–623 (2010)
1. Arp, R., Smith, B., Spear, A.D.: Building Ontologies with Basic Formal Ontology. MIT Press, Cambridge, Massachusetts, USA (2015)
1. Berto, F., Plebani, M.: Ontology and Metaontology. Bloomsbury, London, UK (2015)
1. Euzenat, J., Shvaiko, P.: Ontology Matching, 2nd edn. Springer, Heidelberg, Germany (2013)
1. Bruijn, J. de, Ehrig, M., Feier, C., Martíns-Recuerda, F., Scharffe, F., & Weiten, M. (2006). Ontology Mediation, Merging, and Aligning. In J. Davies, R. Studer, & P. Warren (Eds.), Semantic Web Technologies: Trends and Research in Ontology-based Systems (pp. 95–113). Wiley. https://doi.org/10.1002/047003033X.ch6
1. Bennaceur, A., & Issarny, V. (2015). Automated Synthesis of Mediators to Support Component Interoperability. IEEE Transactions on Software Engineering, 41(3), 221–240. https://doi.org/10.1109/TSE.2014.2364844
# Conclusions and further work #
# References {-} 