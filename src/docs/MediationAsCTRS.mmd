---
title:  'Engineering Semantic Interoperability into Software'  
subtitle: 'Mediation by conditional term rewrting'  
author: Paul Brandt  
affiliation: Eindhoven University of Technology  
version:    
category:    
bibliography: src/bib/CitedByMe-2018_MedForm.bib  
csl: templates/my-basic-reference-style.csl  
abstract: |  
    Semantic mediation should prevent the induction of *phantom semantics* during the transcription process:   
      Section 1 - Transcribing atomic concepts  
      Section 2 - Transcribing class contexts  
    Formalisation of semantic mediation as conditional term rewriting systems  
      Section 3 - Summary on Abstract Reduction Systems   
      Section 4 - Formalisation of a transcription  
   
...
# Formalisation of a transcription #
Assume two collaborating software agents. Each software agent addresses the same part of reality, here denoted the *domain of interest*. In terms of formal semantics, each agent observes the domain of interest into its own conceptualisation, a set-based *Domain of Interpretation* (DoI), denoted \concept{D}. The DoI is represented by an ontology \ont{O}, and the elements of the ontology are mapped on the DoI according to an interpretation function $\intn: \ont{O} \to \concept{D}$. The *concepts* in the ontologies are of certain type, denoted $\varepsilon$, and is considered one of the following:
\begin{equation}
\varepsilon \; ::= \; \token{C} \; | \; \token{R} \; | \; \token{P} \; | \; \token{\iota}
\end{equation}
where:

* \token{C} denotes the Class concept type, the interpretation of which results in a set $\concept{C} \subseteq \concept{D}$ of individuals, $\forall \token{c} \lhd \token{C}: \intn(\token{c}) \in \concept{C}$, where $\lhd$ denotes the left element as instance-of the right type;
* \token{R}, \token{P} and \token{\iota} denote the Relation concept type, the Property concept type, and the Instance concept type, respectively, with their own interpretation in the \concept{D}. For the sake of simplicity, we will here limit ourselves to transcribing a Class concept, only. Concepts are thus atomic elements in an ontology, here a single Class. 

The purpose of a transcription is to facilitate the agent collaboration by correctly transcribing the source concept $\token{e} \in \ont{O}$, denoted the *transcribendum*, into the native representation of the receiving agent, viz. the target concept $\token{e’} \in \ont{O}’$, denoted the *transcriptum.* We assume both agents have an overlapping domain of interest, whereas each agent decide on its own conceptualisation, hence, DoI: $\intn: \ont{O} \to \concept{D}$, and $\intn’: \ont{O}’ \to \concept{D}’$ and $\concept{D} \cap \concept{D}’ = \varnothing$. Our objective is to facilitate a semantic valid transcription, which is the result of two cooperating mechanisms:

1. Firstly, the transcription relies on a correspondence $\mu = \tuple{ e, e’, \theta }$, with $\theta \in \Theta$ specifying the correspondence relation that holds between $e \in \ont{O}$ and $e’ \in \ont{O}’$. We consider $\Theta \; = \; \{\equiv, \sqsubset, \sqsupset, \disj, \overlap, \in, \ni \}$ where $\disj$ represents disjointness, and $\overlap$ overlap. The correspondence is prescribed and assumed to represent a semantic valid correspondence relation between both concepts. We denote a correspondence where $e$ and $e’$ are atomic elements, i.e., a single concept without considering its relation with another concept in the ontology, an *atomic correspondence*;
1. Secondly, the transcription result $e’$ represents a new theory that is added to $\ont{O}’$. This theory will be evaluated by use of the target’s agent interpretation function $\intn’: \ont{O}’ \to \concept{D}’$. 

The semantic validity of the transcription, therefore, is dependent on how $\intn(e)$ relates to $\intn’(e’)$. Since a transcription essentially implements a replacement of terms, from a semantic perspective it can be considered to enforce an equivalence to hold between both terms. The difference between the equivalence relation that is experienced due to the transcription and the correspondence relation $\theta$ that is prescribed, will result in what we will denote as *phantom semantics*: a valuation of both theories that contradicts the state of affairs in the domain of interest.

In the following we will first introduce an inductive model of a transcription.
## An inductive model of a transcrption ##
Transcribing an atomic correspondence is simple: Since no other concepts are present in the atomic context of the correspondence, class $c’$ represents the only potential transcriptum for transcribendum $c$. This shows an important characteristic of a transcription: With no more information available, a valid transcription implies a binary choice: either transcribe transcriptum $c$ into the transcribendum $c’$, denoted as $c \vldtranscript{\theta_c} c’$, or not. This choice depends on whether phantom semantics are induced by the transcription. The result of this strategy is shown in \cref{tab:atomic-class-transcriptions}, where each column specifies the possible correspondence relation that applies. The table presents transcriptions as either (i) the transcriptum, which, by absence of induced phantom semantics is necessarily valid, or (ii) no transcription, denoted by \ntsa, because the transcription into the transcriptum would induce phantom semantics.

\begin{table}[h]
  \centering
  \caption{Valid transcriptions $e \mapsto e’$ conform atomic correspondences $\tuple{e, e’, \theta}$: atomic concept $e$ represents the transcribendum and is transcribed under relation $\theta$, taking into consideration that no other concepts are present. The value of transcriptum $e’$ is presented in the table. As indicated, we only address class concepts, resulting in a table with one single row only.}
  \label{tab:atomic-class-transcriptions}
  \begin{tabular}{cc@{\qquad}ccccc}
    \toprule
    \multicolumn{2}{c}{$e \vldtranscript{\theta} e’$} & \multicolumn{5}{c}{Correlation relation $\theta$} \\ \cmidrule{3-7}
     && $\sqsubset$ 
      & $\equiv$
      & $\sqsupset$
      & $\overlap$ 
      & $\disj$ \\
     \multicolumn{2}{c}{Concept $e$}
      & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sb.png}
      & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Eq.png}
      & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Sp.png}
      & \includegraphics[width=0.1\textwidth]{src/images/VennBC-nD.png}
      & \includegraphics[width=0.1\textwidth]{src/images/VennBC-Dj.png} \\ \cmidrule(r){1-2} \cmidrule{3-7}
      & $c$     & $c’$        & $c’$     & \ntsa     & \ntsa     & $\neg c’$  \\ \bottomrule
  \end{tabular}
\end{table}

In conclusion, \cref{tab:atomic-class-transcriptions} specifies valid class transcriptions for all atomic correspondences between atomic classes. Unfortunately, two out of five cases prohibit a transcription, a third is rather broad in its transcription, and last but not least, a concept seldom live alone in its ontology. We therefore introduce the local contexts of the transcriptum and transcribendum in their particular ontologies $\ont{O}$ and $\ont{O}’$. Together, we denote this as the *transcription context* that we define inductively as $\ctx_n = \pair{r, \theta_n, r', \ctx_{n-1}}$, with:

* $r, r’ \in \set{\sqsubset, \equiv, \sqsupset, \overlete, \overlinc, \displete, \disjoinc}$, representing a logical relationship between a class pair, with:
    * $r$ and $r’$ part of $\ont{O}$ and $\ont{O}’$, respectively, and 
    * $\displete, \disjoinc$ denote *disjoint and complete*, and *disjoint and incomplete*, whereas 
    * $\overlete, \overlinc$ denote *not disjoint but complete* and *not disjoint and incomplete*, respectively;
* $\theta_n \in \Theta$, the correspondence relation that is assumed to hold between classes $c_n \in \ont{O}$ and $c_n’ \in \ont{O}’$;
* $\ctx_{n-1} = \pair{r, \theta_{n-1}, r’, \ctx_{n-2}}$, viz. the transcription context at the previous induction level. 

We first consider the ontological relationships $r, r’ \in \set{\sqsubset, \equiv, \sqsupset}$. Then, the transcription context is fully described by $c_n, r, c_{n-1} \in \ont{O}$ and $c_n’, r’, c_{n-1’} \in \ont{O’}$. This model has been depicted in \cref{fig:gen-class-transc-models}(a). On considering $r, r’ \in \set{\overlete, \overlinc, \displete, \disjoinc}$, we conclude that the completeness part of the relations demands a subsuming class concept that can act as reference for it. This model has been depicted in \cref{fig:gen-class-transc-models}(b), where $r, r’ \in \set{\sqsubset, \equiv, \sqsupset}$ relate the reference concept $c_n$ with subclasses $c_{n-1}$ and $\hat{c}_{n-1}$ that bear an (in)completeness relation $\hat{r}$. 

![The class transcription models that support all seven ontological relations. $\theta_n$ denotes the correspondence relation that applies for the current context $\ctx_n = \pair{\hat{r}, \theta_n, \hat{r}', \ctx_{n-1}}$, and $\longmapsto$ denotes the valid transcription under context $\ctx_{n-1}$. Classes $c_n$ and $c_n'$ are implied by class relations $c_{n-1} \hat{r} \hat{c}_{n-1}$ and $c_{n-1}' \hat{r}' \hat{c}_{n-1}'$, respectively.][def:GenClassTranscModels]

Clearly, situation \ref{fig:gen-class-transc-models}(a) is a special case of situation \ref{fig:gen-class-transc-models}(b) since (b) morphs into (a) for $\hat{r} = \equiv$. As a result, we consider the generic case (b) only when investigating the transcription. 




<!-- Page definitions -->
[def:GenClassTranscModels]: src\images\GenClassTranscModels.png {#fig:gen-class-transc-models width=80%}
## Transcription as cTRS ##
Given the following observations, we consider a transcription a specific application of conditional term rewriting systems:

--------------------------------------------------------------------------------------------------------------------------------
Characteristic of a transcription                     Aspect of a CTRS
----------------------------------------------------- --------------------------------------------------------------------------
A transcription is a syntactic replacement of terms   A TRS rewrites terms over a specific alphabet, and is oriented towards 
and values.                                           syntax only.

A transcription transcribes between two distinct      Show that each normal form for the particular TRS belongs to $\ont{O}’$.
alphabets.

Every transcription should terminate.                 Show that for the particular CTRS the termination property holds.

Despite the strategy used about which correspondence  Show that for the particular CTRS the confluence property holds.
to apply first during transcribing a theory, every    
strategy should yield the same transcription result.

A transcription should not introduce phantom          Since the validity of a transcription depends on the context 
semantics, i.e., only valid transcriptions should be  $\pair{r, \theta_n, r’, \ctx_{n-1}}$ from the transcription model 
allowed for correspondences that apply.               (\cref{fig:prov-class-transc-model}), any rewrite rule that follows from
                                                      a correspondence $\mu = \tuple{e, e’, \theta_n}$ should be guarded by a 
                                                      condition $\Gamma$ that implements the transcription context.
--------------------------------------------------------------------------------------------------------------------------------

   : Requirements for implementing transcriptions as conditional term rewriting systems.


We have already formulated, in many tables, the transcription rules to apply in terms of the context $\pair{r, \theta_n, r’, \ctx_{n-1}}$ that comes about the inductive transcription model. This Section determines how such context can be specified as the conditional rewrite relation from \cref{def:conditional-rewrite-relation}. The purpose of the rewrite relation is to provide for a transcription between a transcriptum from $\ont{O}$ to a transcribendum from $\ont{O’}$. In other words, the rewrite rule will rewrite according to the specified correspondence $\mu = \tuple{c, c’, \theta}$. The unconditional rewrite relation $\to_{\rho_0}$ for any transcription stem from \cref{tab:atomic-class-transcriptions}, therefore, read as follows:
\begin{alignat}{2}
  \rho_{0,1}   &: \; c_n \sqsubset c_n’ &&\to \; c_n’ \\
  \rho_{0,2}   &: \; c_n \equiv c_n’    &&\to \; c_n’ \\
  \rho_{0,3}   &: \; c_n \sqsupset c_n’ &&\to \; \ntsa_n \\
  \rho_{0,4}   &: \; c_n \overlap c_n’  &&\to \; \ntsa_n \\
  \rho_{0,5}   &: \; c_n \disj c_n’     &&\to \; \neg c_n’ 
\end{alignat}

It is clear that these unconditional rewrite rules do not induce phantom semantics.

For the conditional rewrite rules, we will use the example from Case \ref{fig:medcxt-sup}(a). The transcription context $\pair{r, \theta_n, r’, \ctx_{n-1}}$ for this case reads $\ctx_n = \pair{\equiv, \theta_n, \sqsupset, \ctx_{n-1}}$. Note that in the context of CTRS we will write that $\to_{n+1}$ is expressed in terms of $\to_n$, as opposed to the transcription context where $\ctx_n$ is expressed in terms of $\ctx_{n-1}$. 

\begin{alignat}{5}
  \rho_{n+1,1} &: \quad c_{n+1} \sqsubset c_{n+1}’ &&\to \; c_{n+1}’  &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \label{eq:transcription-rho1}\\
  \rho_{n+1,2} &: \quad c_{n+1} \equiv c_{n+1}’    &&\to \; c_{n+1}’  &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \; \land \;
    \theta_n = \, \sqsupset  \\
  \rho_{n+1,3} &: \quad c_{n+1} \overlap c_{n+1}’  &&\to \; \neg c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,4} &: \quad c_{n+1} \disj c_{n+1}’     &&\to \; \neg c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,5} &: \quad c_{n+1} \sqsubset c_{n+1}’ &&\to \; c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,6} &: \quad c_{n+1} \sqsubset c_{n+1}’ &&\to \; c_{n+1}’ \sqcap \neg c_n’ &\quad \text{if} \quad 
    c_n \,   &\to_n \, \neg c_n’ \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,7} &: \quad c_{n+1} \overlap c_{n+1}’  &&\to \; \ntsa_{n+1} &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \\
  \rho_{n+1,8} &: \quad c_{n+1} \sqsupset c_{n+1}’ &&\to \; \ntsa_{n+1} &\quad \text{if} \quad 
    c_n \,   &\to_n \, \ntsa_n \; &\land \;
    r_{n+1}  &= \, \equiv \; &\land \;
    r_{n+1}’ &= \, \sqsupset \label{eq:transcription-rho8}  
\end{alignat}

We explain equations \crefrange{eq:transcription-rho1}{eq:transcription-rho8} collectively with the following generic pattern:

1. The (conditional) rewrite rules $\rho_{n+1}$, too, will apply the correspondence $\mu_{n+1} = \tuple{c_{n+1}, c_{n+1}’, \theta_{n+1}}$. This means that each correspondence will be reflected in a (conditional) rewrite rule; the rule’s LHS will reflect the transcriptum, whilst its RHS will reflect the transcribendum;
1. Following \cref{def:conditional-rewrite-relation}, the conditional rewrite rules are defined inductively, meaning that the condition $\Gamma$ should express elements from a lower hierarchy. This demand matches nicely with the inductive definition for the transcription model. The condition $\Gamma_n$ for the rewrite rule $\rho_{n+1}$ primarily applies the valid transcription from the lower hierarchical level, viz. $\vldtranscript{\ctx_n}$; 
1. Finally, as indicated in \cref{def:conditions-in-ctrs}, the condition $\Gamma$ may also express fixed predicates. For Case \ref{fig:medcxt-sup}(a), its transcription context reads $\ctx_n = \pair{\equiv, \theta_n, \sqsupset, \ctx_{n-1}}$. The terms $\theta_n$ and $\ctx_{n-1}$ have already be addressed in the previous two parts of this pattern, leaving terms $r_{n+1} = \equiv$ and $r_{n+1}’ = \sqsupset$. Although these terms are defined on hierarchical level $n+1$, they are not dependent on any rewriting and can therefore be considered fixed propositions that can be added to the condition.  

From this explanation it becomes clear that we can define the conditional part of a transcription as follows:
\begin{mmdef}[Transcription]\label{def:transcription}
  \begin{alignat}{5}
    \rho_{n+1} &: \quad \sigma\pair{c_{n+1} \theta_{n+1} c_{n+1}’} &&\to \; \sigma(t_{n+1}’)  &\quad \text{if} \quad 
      \sigma(c_n) \,   &\vldtranscript{\ctx_n} \, \sigma(t_n’) \; &\land \;
      r_{n+1}  &= \, r  \; &\land \;
      r_{n+1}’ &= \, r’ \; \land \;
      \theta_n = \, \theta  
  \end{alignat}
where $t_k’$ denotes the transcribendum that follows from the table that specifies the valid transcriptions for transcription context $\ctx_{k+1} = \pair{r, \theta_{k+1}, r’, \ctx_k}$.
\end{mmdef}

What is left to do is to proof that for $\sigma(c_n) \, \vldtranscript{\ctx_n} \, \sigma(t_n’)$:

1. $t_n’$ is ground normal form with respect to the unconditional system, and
1. $c_n \trsrtc t_n’$


